{
    "accordion": {
        "description": "Accordion groups a collection of contents in tabs.\n\n[Live Demo](https://www.primevue.org/accordion/)",
        "components": {
            "default": {
                "description": "Accordion groups a collection of contents in tabs.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "AccordionClickEvent": {
                    "description": "Custom tab open event.",
                    "relatedProp": "AccordionEmits.tab-open",
                    "props": [
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Opened tab index."
                        },
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "MouseEvent",
                            "default": "",
                            "description": "Browser mouse event."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "AccordionTabOpenEvent"
                },
                "AccordionEmits": {
                    "description": "Defines valid emits in Accordion component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "tab-click",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "AccordionClickEvent",
                                    "description": "Custom tab click event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when an active tab is clicked."
                        },
                        {
                            "name": "tab-close",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "AccordionTabCloseEvent",
                                    "description": "Custom tab close event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when an active tab is collapsed by clicking on the header."
                        },
                        {
                            "name": "tab-open",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "AccordionTabOpenEvent",
                                    "description": "Custom tab open event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a tab gets expanded."
                        },
                        {
                            "name": "update:activeIndex",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "undefined | number",
                                    "description": "Index of new active tab."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the active tab changes."
                        }
                    ]
                },
                "AccordionProps": {
                    "description": "Defines valid properties in Accordion component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "activeIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "null | number | number[]",
                            "default": "null",
                            "description": "Index of the active tab or an array of indexes in multiple mode."
                        },
                        {
                            "name": "collapseIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "pi pi-chevron-down",
                            "description": "Icon of an expanded tab."
                        },
                        {
                            "name": "expandIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "pi pi-chevron-right",
                            "description": "Icon of a collapsed tab."
                        },
                        {
                            "name": "lazy",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, hidden tabs are not rendered at all. Defaults to false that hides tabs with css."
                        },
                        {
                            "name": "multiple",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, multiple tabs can be activated at the same time."
                        },
                        {
                            "name": "selectOnFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, the focused tab is activated."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Index of the element in tabbing order."
                        }
                    ],
                    "methods": []
                },
                "AccordionSlots": {
                    "description": "Defines valid slots in Accordion slots.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Default slot to detect AccordionTab components."
                        }
                    ]
                },
                "AccordionTabCloseEvent": {
                    "description": "Custom tab close event.",
                    "relatedProp": "AccordionEmits.tab-close",
                    "props": [
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Opened tab index."
                        },
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "MouseEvent",
                            "default": "",
                            "description": "Browser mouse event."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "AccordionTabOpenEvent"
                },
                "AccordionTabOpenEvent": {
                    "description": "Custom tab open event.",
                    "relatedProp": "AccordionEmits.tab-open",
                    "props": [
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Opened tab index."
                        },
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "MouseEvent",
                            "default": "",
                            "description": "Browser mouse event."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "AccordionTabCloseEvent,AccordionClickEvent"
                }
            }
        }
    },
    "accordiontab": {
        "description": "AccordionTab is a helper component for Accordion.\n\n[Live Demo](https://www.primevue.org/accordion/)",
        "components": {
            "default": {
                "description": "AccordionTab is a helper component for Accordion..",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "AccordionTabEmits": {
                    "description": "Defines valid emits in AcordionTab component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "AccordionTabProps": {
                    "description": "Defines valid properties in AccordionTab component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "contentClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the tab content."
                        },
                        {
                            "name": "contentProps",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLDivElement to the tab content."
                        },
                        {
                            "name": "contentStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the tab content."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the tab is disabled."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Orientation of tab headers."
                        },
                        {
                            "name": "headerActionProps",
                            "optional": true,
                            "readonly": false,
                            "type": "AnchorHTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLAnchorElement to the focusable anchor element inside the tab header."
                        },
                        {
                            "name": "headerClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the tab header."
                        },
                        {
                            "name": "headerProps",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLDivElement to the tab header."
                        },
                        {
                            "name": "headerStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the tab header."
                        }
                    ],
                    "methods": []
                },
                "AccordionTabSlots": {
                    "description": "Defines valid slots in AcordionTab slots.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Default slot for content."
                        },
                        {
                            "name": "header",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content for the title section of a panel is defined using the header template."
                        }
                    ]
                }
            }
        }
    },
    "api/Api": {},
    "autocomplete": {
        "description": "AutoComplete is an input component that provides real-time suggestions while being typed.\n\n[Live Demo](https://www.primevue.org/autocomplete/)",
        "components": {
            "default": {
                "description": "AutoComplete is an input component that provides real-time suggestions while being typed.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "AutoCompleteChangeEvent": {
                    "description": "Custom change event.",
                    "relatedProp": "AutoCompleteEmits.change",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Selected option value"
                        }
                    ],
                    "methods": []
                },
                "AutoCompleteCompleteEvent": {
                    "description": "Custom complete event.",
                    "relatedProp": "AutoCompleteEmits.complete",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "query",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Value to search with"
                        }
                    ],
                    "methods": []
                },
                "AutoCompleteDropdownClickEvent": {
                    "description": "Custom dropdown click event.",
                    "relatedProp": "AutoCompleteEmits['dropdown-click']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "MouseEvent",
                            "default": "",
                            "description": "Browser mouse event"
                        },
                        {
                            "name": "query",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current value of the input field"
                        }
                    ],
                    "methods": []
                },
                "AutoCompleteEmits": {
                    "description": "Defines valid emits in AutoComplete component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "before-hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke before the overlay is hidden."
                        },
                        {
                            "name": "before-show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke before the overlay is shown."
                        },
                        {
                            "name": "blur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component loses focus."
                        },
                        {
                            "name": "change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "AutoCompleteChangeEvent",
                                    "description": "Custom change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on value change."
                        },
                        {
                            "name": "clear",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when input is cleared by the user."
                        },
                        {
                            "name": "complete",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "AutoCompleteCompleteEvent",
                                    "description": "Custom complete event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke to search for suggestions."
                        },
                        {
                            "name": "dropdown-click",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "AutoCompleteDropdownClickEvent",
                                    "description": "Custom dropdown click event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke to when dropdown button is clicked."
                        },
                        {
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component receives focus."
                        },
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when the overlay is hidden."
                        },
                        {
                            "name": "item-select",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "AutoCompleteItemSelectEvent",
                                    "description": "Custom item select event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a suggestion is selected."
                        },
                        {
                            "name": "item-unselect",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "AutoCompleteItemUnselectEvent",
                                    "description": "Custom item unselect event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a selected value is removed."
                        },
                        {
                            "name": "show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when the overlay is shown."
                        },
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        }
                    ]
                },
                "AutoCompleteItemSelectEvent": {
                    "description": "Custom item select event.",
                    "relatedProp": "AutoCompleteEmits['item-select']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Selected item"
                        }
                    ],
                    "methods": [],
                    "extendedBy": "AutoCompleteItemUnselectEvent"
                },
                "AutoCompleteItemUnselectEvent": {
                    "description": "Custom item unselect event.",
                    "relatedProp": "AutoCompleteEmits['item-unselect']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Selected item"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "AutoCompleteItemSelectEvent"
                },
                "AutoCompleteProps": {
                    "description": "Defines valid properties in AutoComplete component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "string | HTMLElement",
                            "default": "body",
                            "description": "A valid query selector or an HTMLElement to specify where the overlay gets attached.\nSpecial keywords are 'body' for document body and 'self' for the element itself."
                        },
                        {
                            "name": "aria-label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a string value that labels an interactive element."
                        },
                        {
                            "name": "aria-labelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "autoHighlight",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": ""
                        },
                        {
                            "name": "autoOptionFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to focus on the first visible or selected element when the overlay panel is shown."
                        },
                        {
                            "name": "completeOnFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to run a query when input receives focus."
                        },
                        {
                            "name": "dataKey",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "A property to uniquely identify an option."
                        },
                        {
                            "name": "delay",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "300",
                            "description": "Delay between keystrokes to wait before sending a query."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "dropdown",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Displays a button next to the input field when enabled."
                        },
                        {
                            "name": "dropdownClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Style class of the dropdown button."
                        },
                        {
                            "name": "dropdownIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "pi pi-chevron-down",
                            "description": "Icon to display in the dropdown."
                        },
                        {
                            "name": "dropdownMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"blank\" | \"current\"",
                            "default": "blank",
                            "description": "Specifies the behavior dropdown button. Default 'blank' mode sends an empty string and 'current' mode sends the input value."
                        },
                        {
                            "name": "emptySearchMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "No results found",
                            "description": "Text to display when filtering does not return any results. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "emptySelectionMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "No selected item",
                            "description": "Text to be displayed in hidden accessible field when any option is not selected. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "field",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": ""
                        },
                        {
                            "name": "forceSelection",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, autocomplete clears the manual input if it does not match of the suggestions to force only accepting values from the suggestions."
                        },
                        {
                            "name": "inputClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Style class of the input field."
                        },
                        {
                            "name": "inputId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "inputProps",
                            "optional": true,
                            "readonly": false,
                            "type": "InputHTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLInputElement to the focusable input element inside the component."
                        },
                        {
                            "name": "inputStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Inline style of the input field."
                        },
                        {
                            "name": "loadingIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "pi pi-spinner pi-spin",
                            "description": "Icon to display in loading state."
                        },
                        {
                            "name": "minLength",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Minimum number of characters to initiate a search."
                        },
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Value of the component."
                        },
                        {
                            "name": "multiple",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Specifies if multiple values can be selected."
                        },
                        {
                            "name": "optionDisabled",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the disabled flag of an option, defaults to false when not defined."
                        },
                        {
                            "name": "optionGroupChildren",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function that refers to the children options of option group."
                        },
                        {
                            "name": "optionGroupLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the label of an option group."
                        },
                        {
                            "name": "optionLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the label of an option."
                        },
                        {
                            "name": "panelClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Style class of the overlay panel."
                        },
                        {
                            "name": "panelProps",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLDivElement to the overlay panel inside the component."
                        },
                        {
                            "name": "panelStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Inline style of the overlay panel."
                        },
                        {
                            "name": "placeholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Default text to display when no option is selected."
                        },
                        {
                            "name": "removeTokenIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "pi pi-times-circle",
                            "description": "Icon to display in chip remove action."
                        },
                        {
                            "name": "scrollHeight",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "200px",
                            "description": "Maximum height of the suggestions panel."
                        },
                        {
                            "name": "searchLocale",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Locale to use in searching. The default locale is the host environment's current locale."
                        },
                        {
                            "name": "searchMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "'{0} results are available'",
                            "description": "Text to be displayed in hidden accessible field when filtering returns any results. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "selectOnFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, the focused option is selected."
                        },
                        {
                            "name": "selectionMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "'{0} items selected'",
                            "description": "Text to be displayed in hidden accessible field when options are selected. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "suggestions",
                            "optional": true,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "An array of suggestions to display."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "virtualScrollerOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "VirtualScrollerProps",
                            "default": "",
                            "description": "Whether to use the virtualScroller feature. The properties of VirtualScroller component can be used like an object in it."
                        }
                    ],
                    "methods": []
                },
                "AutoCompleteSlots": {
                    "description": "Defines valid slots in AutoComplete component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "chip",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>value</b>: any, // A value in the selection\n  }",
                                    "description": "chip slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom chip template."
                        },
                        {
                            "name": "content",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>items</b>: any, // An array of objects to display for virtualscroller\n  \t <b>styleClass</b>: string, // Style class of the component\n  \t <b>contentRef(el: any)</b>: void, // Referance of the content\n  \t <b>getItemOptions(index: number)</b>: VirtualScrollerItemOptions, // Options of the items\n  }",
                                    "description": "content slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom panel template."
                        },
                        {
                            "name": "empty",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom empty template when there is no data to display."
                        },
                        {
                            "name": "footer",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>suggestions</b>: any, // Displayed options\n  \t <b>value</b>: any, // Value of the component\n  }",
                                    "description": "footer slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom footer template of panel."
                        },
                        {
                            "name": "header",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>suggestions</b>: any, // Displayed options\n  \t <b>value</b>: any, // Value of the component\n  }",
                                    "description": "header slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header template of panel."
                        },
                        {
                            "name": "item",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>index</b>: number, // Index of the option\n  \t <b>item</b>: any, // Option instance\n  }",
                                    "description": "item slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": ""
                        },
                        {
                            "name": "loader",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>options</b>: any, // Options of the loader items for virtualscroller\n  }",
                                    "description": "loader slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom loader template."
                        },
                        {
                            "name": "option",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>index</b>: number, // Index of the option\n  \t <b>option</b>: any, // Option instance\n  }",
                                    "description": "option slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom option template."
                        },
                        {
                            "name": "optiongroup",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>index</b>: number, // Index of the option\n  \t <b>item</b>: any, // undefined\n  \t <b>option</b>: any, // Option instance\n  }",
                                    "description": "option group slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom option group template."
                        }
                    ]
                }
            }
        }
    },
    "avatar": {
        "description": "Avatar represents people using icons, labels and images.\n\n- [Live Demo](https://primevue.org/avatar)",
        "components": {
            "default": {
                "description": "Avatar represents people using icons, labels and images.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "AvatarEmits": {
                    "description": "Defines valid emits in Avatar component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "error",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Triggered when an error occurs while loading an image file."
                        }
                    ]
                },
                "AvatarProps": {
                    "description": "Defines valid properties in Avatar component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "aria-label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes a string value that labels the component."
                        },
                        {
                            "name": "aria-labelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines the icon to display."
                        },
                        {
                            "name": "image",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines the image to display."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines the text to display."
                        },
                        {
                            "name": "shape",
                            "optional": true,
                            "readonly": false,
                            "type": "\"square\" | \"circle\"",
                            "default": "square",
                            "description": "Shape of the element."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "\"normal\" | \"large\" | \"xlarge\"",
                            "default": "normal",
                            "description": "Size of the element."
                        }
                    ],
                    "methods": []
                },
                "AvatarSlots": {
                    "description": "Defines valid slots in Avatar component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Content can easily be customized with the default slot instead of using the built-in modes."
                        }
                    ]
                }
            }
        }
    },
    "avatargroup": {
        "description": "AvatarGroup is a helper component for Avatar.\n\n[Live Demo](https://www.primevue.org/accordion/)",
        "components": {
            "default": {
                "description": "A set of Avatars can be displayed together using the AvatarGroup component.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "AvatarGroupEmits": {
                    "description": "Defines valid emits in AvatarGroup component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "AvatarGroupProps": {
                    "description": "Defines valid properties in AvatarGroup component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "AvatarGroupSlots": {
                    "description": "Defines valid slots in AvatarGroup component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        }
    },
    "badge": {
        "description": "Badge represents people using icons, labels and images.\n\n[Live Demo](https://www.primevue.org/badge)",
        "components": {
            "default": {
                "description": "Badge represents people using icons, labels and images.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "BadgeEmits": {
                    "description": "Defines valid emits in Badge component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "BadgeProps": {
                    "description": "Defines valid properties in Badge component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "severity",
                            "optional": true,
                            "readonly": false,
                            "type": "null | \"success\" | \"info\" | \"warning\" | \"danger\"",
                            "default": "",
                            "description": "Severity type of the badge."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "null | \"large\" | \"xlarge\"",
                            "default": "",
                            "description": "Size of the badge, valid options are 'large' and 'xlarge'."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "Value to display inside the badge."
                        }
                    ],
                    "methods": []
                },
                "BadgeSlots": {
                    "description": "Defines valid slots in Badge component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Content can easily be customized with the default slot instead of using the built-in display."
                        }
                    ]
                }
            }
        }
    },
    "badgedirective": {
        "description": "Badge directive is a small status indicator for another element.\n\n[Live Demo](https://primevue.org/badge)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "BadgeDirectiveBinding": {
                    "description": "Binding of Badge directive.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "modifiers",
                            "optional": true,
                            "readonly": false,
                            "type": "BadgeDirectiveModifiers",
                            "default": "",
                            "description": "Modifiers of the Badge."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Value of the Badge."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "Omit<DirectiveBinding, \"modifiers\" | \"value\">"
                },
                "BadgeDirectiveModifiers": {
                    "description": "Defines modifiers of Badge directive.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "danger",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Danger severity for Badge directive."
                        },
                        {
                            "name": "info",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Info severity for Badge directive."
                        },
                        {
                            "name": "success",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Success severity for Badge directive."
                        },
                        {
                            "name": "warning",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Warning severity for Badge directive."
                        }
                    ],
                    "methods": []
                }
            }
        }
    },
    "blockui": {
        "description": "BlockUI represents people using icons, labels and images.\n\n[Live Demo](https://www.primevue.org/blockui)",
        "components": {
            "default": {
                "description": "BlockUI represents people using icons, labels and images.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "BlockUIEmits": {
                    "description": "Defines valid emits in BlockUI component",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "block",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Fired when the element gets blocked."
                        },
                        {
                            "name": "unblock",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Fired when the element gets unblocked."
                        }
                    ]
                },
                "BlockUIProps": {
                    "description": "Defines valid properties in BlockUI component",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "autoZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to automatically manage layering."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "blocked",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Controls the blocked state."
                        },
                        {
                            "name": "fullScreen",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, the whole document gets blocked."
                        }
                    ],
                    "methods": []
                },
                "BlockUISlots": {
                    "description": "Defines valid slots in BlockUI component",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content's slot."
                        }
                    ]
                }
            }
        }
    },
    "breadcrumb": {
        "description": "Breadcrumb provides contextual information about page hierarchy.\n\n[Live Demo](https://www.primevue.org/breadcrumb/)",
        "components": {
            "default": {
                "description": "Breadcrumb provides contextual information about page hierarchy.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "BreadcrumbEmits": {
                    "description": "Defines valid emits in Breadcrumb component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "BreadcrumbProps": {
                    "description": "Defines valid properties in Breadcrumb component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "aria-label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a string value that labels an interactive element."
                        },
                        {
                            "name": "aria-labelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying menu element."
                        },
                        {
                            "name": "exact",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to apply 'router-link-active-exact' class if route exactly matches the item path."
                        },
                        {
                            "name": "home",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuItem",
                            "default": "",
                            "description": "Configuration for the home icon."
                        },
                        {
                            "name": "model",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuItem[]",
                            "default": "",
                            "description": "An array of menuitems."
                        }
                    ],
                    "methods": []
                },
                "BreadcrumbSlots": {
                    "description": "Defines valid slots in Breadcrumb component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "item",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>item</b>: MenuItem, // Menuitem instance\n  }",
                                    "description": "item slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom item template."
                        }
                    ]
                }
            }
        }
    },
    "button": {
        "description": "Button is an extension to standard button element with icons and theming.\n\n[Live Demo](https://www.primevue.org/button/)",
        "components": {
            "default": {
                "description": "Button is an extension to standard button element with icons and theming.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ButtonEmits": {
                    "description": "Defines valid emits in Button component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "ButtonProps": {
                    "description": "Defines valid properties in Button component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "badge",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Value of the badge."
                        },
                        {
                            "name": "badgeClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the badge."
                        },
                        {
                            "name": "class",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the button."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Name of the icon."
                        },
                        {
                            "name": "iconClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the icon."
                        },
                        {
                            "name": "iconPos",
                            "optional": true,
                            "readonly": false,
                            "type": "\"left\" | \"top\" | \"bottom\" | \"right\"",
                            "default": "left",
                            "description": "Position of the icon."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Text of the button."
                        },
                        {
                            "name": "link",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Add a link style to the button."
                        },
                        {
                            "name": "loading",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the button is in loading state."
                        },
                        {
                            "name": "loadingIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "pi pi-spinner pi-spin",
                            "description": "Icon to display in loading state."
                        },
                        {
                            "name": "outlined",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Add a border class without a background initially."
                        },
                        {
                            "name": "plain",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Add a plain textual class to the button without a background initially."
                        },
                        {
                            "name": "raised",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Add a shadow to indicate elevation."
                        },
                        {
                            "name": "rounded",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Add a circular border radius to the button."
                        },
                        {
                            "name": "severity",
                            "optional": true,
                            "readonly": false,
                            "type": "\"success\" | \"help\" | \"info\" | \"warning\" | \"danger\" | \"secondary\"",
                            "default": "",
                            "description": "Defines the style of the button."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "\"small\" | \"large\"",
                            "default": "",
                            "description": "Defines the size of the button."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the button."
                        },
                        {
                            "name": "text",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Add a textual class to the button without a background initially."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "ButtonHTMLAttributes"
                },
                "ButtonSlots": {
                    "description": "Defines valid slots in Button component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content such as icons, images and text can be placed inside the button via the default slot. Note that when slot is used, label, icon and badge properties are not included."
                        }
                    ]
                }
            }
        }
    },
    "calendar": {
        "description": "Calendar also known as DatePicker, is a form component to work with dates.\n\n[Live Demo](https://www.primevue.org/calendar/)",
        "components": {
            "default": {
                "description": "Calendar also known as DatePicker, is a form component to work with dates.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "CalendarBlurEvent": {
                    "description": "Custom Calendar blur event.",
                    "relatedProp": "CalendarEmits.blur",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Input value"
                        }
                    ],
                    "methods": []
                },
                "CalendarEmits": {
                    "description": "Defines valid emits in Calendar component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "blur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "CalendarBlurEvent",
                                    "description": "Blur event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on blur of input field."
                        },
                        {
                            "name": "clear-click",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when clear button is clicked."
                        },
                        {
                            "name": "date-select",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "Date",
                                    "description": "Selected value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a date is selected."
                        },
                        {
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Focus event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on focus of input field."
                        },
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when datepicker panel is hidden."
                        },
                        {
                            "name": "input",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when input field is being typed."
                        },
                        {
                            "name": "keydown",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a key is pressed."
                        },
                        {
                            "name": "month-change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "CalendarMonthChangeEvent",
                                    "description": "Custom month change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a month is changed using the navigators."
                        },
                        {
                            "name": "show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when datepicker panel is shown."
                        },
                        {
                            "name": "today-click",
                            "parameters": [
                                {
                                    "name": "date",
                                    "optional": false,
                                    "type": "Date",
                                    "description": "Today as a date instance."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when today button is clicked."
                        },
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "undefined | string | string[] | Date | Date[]",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "year-change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "CalendarYearChangeEvent",
                                    "description": "Custom year change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a year is changed using the navigators."
                        }
                    ]
                },
                "CalendarMonthChangeEvent": {
                    "description": "Custom Calendar month change event.",
                    "relatedProp": "CalendarEmits['month-change']]",
                    "props": [
                        {
                            "name": "month",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "New month."
                        },
                        {
                            "name": "year",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "New year."
                        }
                    ],
                    "methods": []
                },
                "CalendarProps": {
                    "description": "Defines valid properties in Calendar component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "string | HTMLElement",
                            "default": "body",
                            "description": "A valid query selector or an HTMLElement to specify where the overlay gets attached."
                        },
                        {
                            "name": "aria-label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes a string value that labels the component."
                        },
                        {
                            "name": "aria-labelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "autoZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to automatically manage layering."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "dateFormat",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Format of the date. Defaults to PrimeVue Locale configuration."
                        },
                        {
                            "name": "decrementIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "pi pi-chevron-down",
                            "description": "Icon to show in each of the decrement buttons."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "disabledDates",
                            "optional": true,
                            "readonly": false,
                            "type": "Date[]",
                            "default": "",
                            "description": "Array with dates to disable."
                        },
                        {
                            "name": "disabledDays",
                            "optional": true,
                            "readonly": false,
                            "type": "number[]",
                            "default": "",
                            "description": "Array with disabled weekday numbers."
                        },
                        {
                            "name": "hideOnDateTimeSelect",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to hide the overlay on date selection when showTime is enabled."
                        },
                        {
                            "name": "hideOnRangeSelection",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to hide the overlay on date selection is completed when selectionMode is range."
                        },
                        {
                            "name": "hourFormat",
                            "optional": true,
                            "readonly": false,
                            "type": "\"12\" | \"24\"",
                            "default": "24",
                            "description": "Specifies hour format."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "pi pi-calendar",
                            "description": "Icon of the calendar button."
                        },
                        {
                            "name": "id",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the element."
                        },
                        {
                            "name": "incrementIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "pi pi-chevron-up",
                            "description": "Icon to show in each of the increment buttons."
                        },
                        {
                            "name": "inline",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, displays the calendar as inline instead of an overlay."
                        },
                        {
                            "name": "inputClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Style class of the input field."
                        },
                        {
                            "name": "inputId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "inputProps",
                            "optional": true,
                            "readonly": false,
                            "type": "InputHTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLInputElement to the focusable input element inside the component."
                        },
                        {
                            "name": "inputStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Inline style of the input field."
                        },
                        {
                            "name": "manualInput",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Wheter to allow prevents entering the date manually via typing."
                        },
                        {
                            "name": "maxDate",
                            "optional": true,
                            "readonly": false,
                            "type": "Date",
                            "default": "",
                            "description": "The maximum selectable date."
                        },
                        {
                            "name": "maxDateCount",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Maximum number of selectable dates in multiple mode."
                        },
                        {
                            "name": "minDate",
                            "optional": true,
                            "readonly": false,
                            "type": "Date",
                            "default": "",
                            "description": "The minimum selectable date."
                        },
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "null | string | string[] | Date | Date[]",
                            "default": "null",
                            "description": "Value of the component."
                        },
                        {
                            "name": "monthNavigator",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the month should be rendered as a dropdown instead of text."
                        },
                        {
                            "name": "nextIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "pi pi-chevron-right",
                            "description": "Icon to show in the next button."
                        },
                        {
                            "name": "numberOfMonths",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Number of months to display."
                        },
                        {
                            "name": "panelClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Style class of the overlay panel."
                        },
                        {
                            "name": "panelProps",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLDivElement to the overlay panel inside the component."
                        },
                        {
                            "name": "panelStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Inline style of the overlay panel."
                        },
                        {
                            "name": "placeholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Placeholder text for the input."
                        },
                        {
                            "name": "previousIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "pi pi-chevron-left",
                            "description": "Icon to show in the previous button."
                        },
                        {
                            "name": "readonly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that an input field is read-only."
                        },
                        {
                            "name": "responsiveOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarResponsiveOptions[]",
                            "default": "",
                            "description": "An array of options for responsive design."
                        },
                        {
                            "name": "selectOtherMonths",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether days in other months shown before or after the current month are selectable. This only applies if the showOtherMonths option is set to true."
                        },
                        {
                            "name": "selectionMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"multiple\" | \"range\" | \"single\"",
                            "default": "single",
                            "description": "Defines the quantity of the selection."
                        },
                        {
                            "name": "shortYearCutoff",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "+10",
                            "description": "The cutoff year for determining the century for a date."
                        },
                        {
                            "name": "showButtonBar",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display today and clear buttons at the footer."
                        },
                        {
                            "name": "showIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, displays a button with icon next to input."
                        },
                        {
                            "name": "showOnFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "When disabled, datepicker will not be visible with input focus."
                        },
                        {
                            "name": "showOtherMonths",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to display dates in other months (non-selectable) at the start or end of the current month. To make these days selectable use the selectOtherMonths option."
                        },
                        {
                            "name": "showSeconds",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to show the seconds in time picker."
                        },
                        {
                            "name": "showTime",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display timepicker."
                        },
                        {
                            "name": "showWeek",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, calendar will show week numbers."
                        },
                        {
                            "name": "stepHour",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Hours to change per step."
                        },
                        {
                            "name": "stepMinute",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Minutes to change per step."
                        },
                        {
                            "name": "stepSecond",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Seconds to change per step."
                        },
                        {
                            "name": "timeOnly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display timepicker only."
                        },
                        {
                            "name": "timeSeparator",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ":",
                            "description": "Separator of time selector."
                        },
                        {
                            "name": "touchUI",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, calendar overlay is displayed as optimized for touch devices."
                        },
                        {
                            "name": "view",
                            "optional": true,
                            "readonly": false,
                            "type": "\"month\" | \"year\" | \"date\"",
                            "default": "date",
                            "description": "Type of view to display."
                        },
                        {
                            "name": "yearNavigator",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the year should be rendered as a dropdown instead of text."
                        },
                        {
                            "name": "yearRange",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "false",
                            "description": "The range of years displayed in the year drop-down in (nnnn:nnnn) format such as (2000:2020)."
                        }
                    ],
                    "methods": []
                },
                "CalendarResponsiveOptions": {
                    "description": "Custom Calendar responsive options metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "breakpoint",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Breakpoint for responsive mode. Exp;"
                        },
                        {
                            "name": "numMonths",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "The number of visible months on breakpoint."
                        }
                    ],
                    "methods": []
                },
                "CalendarSlots": {
                    "description": "Defines valid slots in Calendar component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "date",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>date</b>: undefined, // Value of the component.\n  }"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom date template."
                        },
                        {
                            "name": "decade",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>years</b>: undefined, // An array containing the start and and year of a decade to display at header of the year picker.\n  }"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom decade template."
                        },
                        {
                            "name": "footer",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom footer template of panel."
                        },
                        {
                            "name": "header",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header template of panel."
                        }
                    ]
                },
                "CalendarYearChangeEvent": {
                    "description": "Custom Calendar year change event.",
                    "relatedProp": "CalendarEmits['year-change']]",
                    "props": [
                        {
                            "name": "month",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "New month."
                        },
                        {
                            "name": "year",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "New year."
                        }
                    ],
                    "methods": []
                }
            }
        }
    },
    "card": {
        "description": "Card is a flexible container component.\n\n[Live Demo](https://www.primevue.org/card/)",
        "components": {
            "default": {
                "description": "Card is a flexible container component.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "CardEmits": {
                    "description": "Defines valid emits in Card component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "CardProps": {
                    "description": "Defines valid properties in Card component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "CardSlots": {
                    "description": "Defines valid slots in Card component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "content",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content template."
                        },
                        {
                            "name": "footer",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom footer template."
                        },
                        {
                            "name": "header",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header template."
                        },
                        {
                            "name": "subtitle",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom subtitle template."
                        },
                        {
                            "name": "title",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom title template."
                        }
                    ]
                }
            }
        }
    },
    "carousel": {
        "description": "Carousel is a content slider featuring various customization options.\n\n[Live Demo](https://www.primevue.org/carousel/)",
        "components": {
            "default": {
                "description": "Carousel is a content slider featuring various customization options.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "CarouselEmits": {
                    "description": "Defines valid emits in Carousel component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:page",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "number",
                                    "description": "New page value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the page changes."
                        }
                    ]
                },
                "CarouselProps": {
                    "description": "Defines valid properties in Carousel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "autoplayInterval",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Time in milliseconds to scroll items automatically."
                        },
                        {
                            "name": "circular",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if scrolling would be infinite."
                        },
                        {
                            "name": "containerClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the viewport container."
                        },
                        {
                            "name": "contentClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of main content."
                        },
                        {
                            "name": "indicatorsContentClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the indicator items."
                        },
                        {
                            "name": "nextButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLButtonElement to the next navigation button."
                        },
                        {
                            "name": "numScroll",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Number of items to scroll."
                        },
                        {
                            "name": "numVisible",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Number of items per page."
                        },
                        {
                            "name": "orientation",
                            "optional": true,
                            "readonly": false,
                            "type": "\"horizontal\" | \"vertical\"",
                            "default": "horizontal",
                            "description": "Specifies the layout of the component, valid values are 'horizontal' and 'vertical'."
                        },
                        {
                            "name": "page",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Index of the first item."
                        },
                        {
                            "name": "prevButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLButtonElement to the previous navigation button."
                        },
                        {
                            "name": "responsiveOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "CarouselResponsiveOptions[]",
                            "default": "",
                            "description": "An array of options for responsive design."
                        },
                        {
                            "name": "showIndicators",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to display indicator container."
                        },
                        {
                            "name": "showNavigators",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to display navigation buttons in container."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "An array of objects to display."
                        },
                        {
                            "name": "verticalViewPortHeight",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "300px",
                            "description": "Height of the viewport in vertical layout."
                        }
                    ],
                    "methods": []
                },
                "CarouselResponsiveOptions": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "breakpoint",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Breakpoint for responsive mode. Exp;"
                        },
                        {
                            "name": "numScroll",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "The number of scrolled items on breakpoint."
                        },
                        {
                            "name": "numVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "The number of visible items on breakpoint."
                        }
                    ],
                    "methods": []
                },
                "CarouselSlots": {
                    "description": "Defines valid slots in Carousel slots.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "footer",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom footer template."
                        },
                        {
                            "name": "header",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header template."
                        },
                        {
                            "name": "item",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>data</b>: any, // Data of the component\n  \t <b>index</b>: number, // Index of the item\n  }",
                                    "description": "item slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content for each item."
                        }
                    ]
                }
            }
        }
    },
    "cascadeselect": {
        "description": "CascadeSelect is a form component to select a value from a nested structure of options.\n\n[Live Demo](https://www.primevue.org/cascadeselect/)",
        "components": {
            "default": {
                "description": "CascadeSelect is a form component to select a value from a nested structure of options.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "CascadeSelectChangeEvent": {
                    "description": "Custom change event",
                    "relatedProp": "CascadeSelectEmits.change",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Original event."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Selected option value."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "CascadeSelectGroupChangeEvent"
                },
                "CascadeSelectEmits": {
                    "description": "Defines valid emits in CascadeSelect component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "before-hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke before the overlay is hidden."
                        },
                        {
                            "name": "before-show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke before the overlay is shown."
                        },
                        {
                            "name": "blur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component loses focus."
                        },
                        {
                            "name": "change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "CascadeSelectChangeEvent",
                                    "description": "Custom change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on value change."
                        },
                        {
                            "name": "click",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on click."
                        },
                        {
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component receives focus."
                        },
                        {
                            "name": "group-change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "CascadeSelectGroupChangeEvent",
                                    "description": "Custom change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a group changes."
                        },
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when the overlay is hidden."
                        },
                        {
                            "name": "show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when the overlay is shown."
                        },
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        }
                    ]
                },
                "CascadeSelectGroupChangeEvent": {
                    "description": "",
                    "relatedProp": "CascadeSelectEmits.change",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Original event."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Selected option value."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "CascadeSelectChangeEvent"
                },
                "CascadeSelectProps": {
                    "description": "Defines valid properties in CascadeSelect component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "string | HTMLElement",
                            "default": "body",
                            "description": "A valid query selector or an HTMLElement to specify where the overlay gets attached. Special keywords are 'body' for document body and 'self' for the element itself."
                        },
                        {
                            "name": "aria-label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes a string value that labels the component."
                        },
                        {
                            "name": "aria-labelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "autoOptionFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to focus on the first visible or selected element when the overlay panel is shown."
                        },
                        {
                            "name": "dataKey",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "A property to uniquely identify an option."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "dropdownIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "pi pi-chevron-down",
                            "description": "Icon to display in the dropdown."
                        },
                        {
                            "name": "emptyMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "No available options",
                            "description": "Text to be displayed when there are no options available. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "emptySearchMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "No results found",
                            "description": "Text to display when filtering does not return any results. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "emptySelectionMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "No selected item",
                            "description": "Text to be displayed in hidden accessible field when any option is not selected. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "inputClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Style class of the input field."
                        },
                        {
                            "name": "inputId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "inputProps",
                            "optional": true,
                            "readonly": false,
                            "type": "InputHTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLInputElement to the focusable input element inside the component."
                        },
                        {
                            "name": "inputStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Inline style of the input field."
                        },
                        {
                            "name": "loading",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the dropdown is in loading state."
                        },
                        {
                            "name": "loadingIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "pi pi-spinner pi-spin",
                            "description": "Icon to display in loading state."
                        },
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Value of the component."
                        },
                        {
                            "name": "optionDisabled",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the disabled flag of an option, defaults to false when not defined."
                        },
                        {
                            "name": "optionGroupChildren",
                            "optional": true,
                            "readonly": false,
                            "type": "string | string[] | Function",
                            "default": "",
                            "description": "Property name or getter function to retrieve the items of a group."
                        },
                        {
                            "name": "optionGroupIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "pi pi-angle-right",
                            "description": "Icon to display in the option group."
                        },
                        {
                            "name": "optionGroupLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the label of an option group."
                        },
                        {
                            "name": "optionLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the label of an option."
                        },
                        {
                            "name": "optionValue",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the value of an option, defaults to the option itself when not defined."
                        },
                        {
                            "name": "options",
                            "optional": true,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "An array of selectitems to display as the available options."
                        },
                        {
                            "name": "panelClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Style class of the overlay panel."
                        },
                        {
                            "name": "panelProps",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLDivElement to the overlay panel inside the component."
                        },
                        {
                            "name": "panelStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Inline style of the overlay panel."
                        },
                        {
                            "name": "placeholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Default text to display when no option is selected."
                        },
                        {
                            "name": "searchLocale",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Locale to use in searching. The default locale is the host environment's current locale."
                        },
                        {
                            "name": "searchMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "'{0} results are available'",
                            "description": "Text to be displayed in hidden accessible field when filtering returns any results. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "selectOnFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, the focused option is selected/opened."
                        },
                        {
                            "name": "selectionMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "'{0} items selected'",
                            "description": "Text to be displayed in hidden accessible field when options are selected. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        }
                    ],
                    "methods": []
                },
                "CascadeSelectSlots": {
                    "description": "Defines valid slots in CascadeSelect component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "indicator",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom indicator template."
                        },
                        {
                            "name": "option",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>option</b>: any, // Option instance\n  }",
                                    "description": "option slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content for each option."
                        },
                        {
                            "name": "value",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>placeholder</b>: string, // Placeholder text to show\n  \t <b>value</b>: any, // Value of the component\n  }",
                                    "description": "value slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom value template."
                        }
                    ]
                }
            }
        }
    },
    "chart": {
        "description": "Chart groups a collection of contents in tabs.\n\n[Live Demo](https://www.primevue.org/chart/)",
        "components": {
            "default": {
                "description": "Chart groups a collection of contents in tabs.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "generateLegend",
                            "parameters": [],
                            "returnType": "any",
                            "description": "Returns an HTML string of a legend for that chart. The legend is generated from the legendCallback in the options."
                        },
                        {
                            "name": "getChart",
                            "parameters": [],
                            "returnType": "any",
                            "description": "Returns Chart instance."
                        },
                        {
                            "name": "refresh",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Redraws the graph."
                        },
                        {
                            "name": "reinit",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Destroys the graph first and then creates it again."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ChartEmits": {
                    "description": "Defines valid emits in Chart component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "loaded",
                            "parameters": [
                                {
                                    "name": "chart",
                                    "optional": false,
                                    "type": "any",
                                    "description": "Chart instance."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when chart is loaded."
                        },
                        {
                            "name": "select",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "ChartSelectEvent",
                                    "description": "Custom select event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a tab gets expanded."
                        }
                    ]
                },
                "ChartProps": {
                    "description": "Defines valid properties in Chart component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "canvasProps",
                            "optional": true,
                            "readonly": false,
                            "type": "CanvasHTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the CanvasHTMLAttributes to canvas element inside the component."
                        },
                        {
                            "name": "data",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Data to display."
                        },
                        {
                            "name": "height",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "150",
                            "description": "Height of the chart in non-responsive mode."
                        },
                        {
                            "name": "options",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Options to customize the chart."
                        },
                        {
                            "name": "plugins",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to custom plugins of the chart."
                        },
                        {
                            "name": "type",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Type of the chart."
                        },
                        {
                            "name": "width",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "300",
                            "description": "Width of the chart in non-responsive mode."
                        }
                    ],
                    "methods": []
                },
                "ChartSelectEvent": {
                    "description": "Custom select event.",
                    "relatedProp": "ChartEmits.select",
                    "props": [
                        {
                            "name": "dataset",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Selected dataset."
                        },
                        {
                            "name": "element",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Selected element."
                        },
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        }
                    ],
                    "methods": []
                },
                "ChartSlots": {
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        }
    },
    "checkbox": {
        "description": "Checkbox is an extension to standard checkbox element with theming.\n\n[Live Demo](https://www.primevue.org/checkbox/)",
        "components": {
            "default": {
                "description": "Accordion groups a collection of contents in tabs.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "CheckboxEmits": {
                    "description": "Defines valid emits in Checkbox component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on value change."
                        },
                        {
                            "name": "click",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "MouseEvent",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on value click."
                        },
                        {
                            "name": "input",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "boolean",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on value change."
                        },
                        {
                            "name": "update:page",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any",
                                    "description": "New page value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the page changes."
                        }
                    ]
                },
                "CheckboxProps": {
                    "description": "Defines valid properties in Checkbox component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "aria-label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes a string value that labels the component."
                        },
                        {
                            "name": "aria-labelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "binary",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Allows to select a boolean value instead of multiple values."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "When present, it specifies that the element should be disabled."
                        },
                        {
                            "name": "falseValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Value in unchecked state."
                        },
                        {
                            "name": "inputClass",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Style class of the input field."
                        },
                        {
                            "name": "inputId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "inputProps",
                            "optional": true,
                            "readonly": false,
                            "type": "InputHTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLInputElement to the focusable input element inside the component."
                        },
                        {
                            "name": "inputStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Inline style of the input field."
                        },
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Value binding of the checkbox."
                        },
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Name of the input element."
                        },
                        {
                            "name": "readonly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "When present, it specifies that an input field is read-only."
                        },
                        {
                            "name": "required",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "When present, it specifies that the element is required."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "trueValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Value in checked state."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Value of the checkbox."
                        }
                    ],
                    "methods": []
                },
                "CheckboxSlots": {
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        }
    },
    "chip": {
        "description": "Chip represents people using icons, labels and images.\n\n[Live Demo](https://www.primevue.org/chip)",
        "components": {
            "default": {
                "description": "Chip represents people using icons, labels and images.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ChipEmits": {
                    "description": "Defines valid properties in Chip component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "remove",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a chip is removed."
                        }
                    ]
                },
                "ChipProps": {
                    "description": "Defines valid properties in Chip component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines the icon to display."
                        },
                        {
                            "name": "image",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines the image to display."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines the text to display."
                        },
                        {
                            "name": "removable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display a remove icon."
                        },
                        {
                            "name": "removeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "pi pi-times-circle",
                            "description": "Icon of the remove element."
                        }
                    ],
                    "methods": []
                },
                "ChipSlots": {
                    "description": "Defines valid slots in Chip component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Content can easily be customized with the default slot instead of using the built-in modes."
                        }
                    ]
                }
            }
        }
    },
    "chips": {
        "description": "Chips groups a collection of contents in tabs.\n\n[Live Demo](https://www.primevue.org/chips/)",
        "components": {
            "default": {
                "description": "Chips is used to enter multiple values on an input field.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ChipsAddEvent": {
                    "description": "Custom add event.",
                    "relatedProp": "ChipsEmits.add",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Added/Removed item value."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "ChipsRemoveEvent"
                },
                "ChipsEmits": {
                    "description": "Defines valid emits in Chips component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "add",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "ChipsAddEvent",
                                    "description": "Custom add event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a chip is added."
                        },
                        {
                            "name": "remove",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "ChipsRemoveEvent",
                                    "description": "Custom remove event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a chip is removed."
                        },
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any[]",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        }
                    ]
                },
                "ChipsProps": {
                    "description": "Defines valid properties in Chips component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "addOnBlur",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to add an item when the input loses focus."
                        },
                        {
                            "name": "allowDuplicate",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to allow duplicate values or not."
                        },
                        {
                            "name": "aria-label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes a string value that labels the component."
                        },
                        {
                            "name": "aria-labelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "When present, it specifies that the element should be disabled."
                        },
                        {
                            "name": "inputClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Style class of the input field."
                        },
                        {
                            "name": "inputId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the focus input to match a label defined for the chips."
                        },
                        {
                            "name": "inputProps",
                            "optional": true,
                            "readonly": false,
                            "type": "InputHTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLInputElement to the focusable input element inside the component."
                        },
                        {
                            "name": "inputStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Inline style of the input field."
                        },
                        {
                            "name": "max",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Maximum number of entries allowed."
                        },
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Value of the component."
                        },
                        {
                            "name": "placeholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Placeholder text for the input."
                        },
                        {
                            "name": "removeTokenIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "pi pi-times-circle",
                            "description": "Icon to display in chip remove action."
                        },
                        {
                            "name": "separator",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Separator char to add an item when pressed in addition to the enter key."
                        }
                    ],
                    "methods": []
                },
                "ChipsRemoveEvent": {
                    "description": "Custom remove event.",
                    "relatedProp": "ChipsEmits.remove",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Added/Removed item value."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "ChipsAddEvent"
                },
                "ChipsSlots": {
                    "description": "Defines valid slots in Chips slots.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "chip",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>value</b>: any, // Value of the component\n  }",
                                    "description": "chip slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom chip template."
                        }
                    ]
                }
            }
        }
    },
    "colorpicker": {
        "description": "ColorPicker groups a collection of contents in tabs.\n\n[Live Demo](https://www.primevue.org/colorpicker/)",
        "components": {
            "default": {
                "description": "ColorPicker groups a collection of contents in tabs.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ColorPickerChangeEvent": {
                    "description": "Custom change event.",
                    "relatedProp": "ColorPickerEmits.change",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Selected color value."
                        }
                    ],
                    "methods": []
                },
                "ColorPickerEmits": {
                    "description": "Defines valid emits in ColorPicker component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "ColorPickerChangeEvent",
                                    "description": "Custom add event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a chip is added."
                        },
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when input is cleared by the user."
                        },
                        {
                            "name": "show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when input is cleared by the user."
                        },
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        }
                    ]
                },
                "ColorPickerProps": {
                    "description": "Defines valid properties in ColorPicker component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "string | HTMLElement",
                            "default": "body",
                            "description": "A valid query selector or an HTMLElement to specify where the overlay gets attached. Special keywords are 'body' for document body and 'self' for the element itself."
                        },
                        {
                            "name": "autoZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to automatically manage layering."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "defaultColor",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "ff0000",
                            "description": "Initial color to display when value is not defined."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "format",
                            "optional": true,
                            "readonly": false,
                            "type": "\"rgb\" | \"hex\" | \"hsb\"",
                            "default": "hex",
                            "description": "Format to use in value binding, supported formats are 'hex', 'rgb' and 'hsb'."
                        },
                        {
                            "name": "inline",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display as an overlay or not."
                        },
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Value of the component."
                        },
                        {
                            "name": "panelClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the overlay panel."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        }
                    ],
                    "methods": []
                },
                "ColorPickerSlots": {
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        }
    },
    "column": {
        "description": "Column component defines various options to specify corresponding features.\nIt is a helper component for DataTable and TreeTable.\n\n[Live Demo](https://www.primevue.org/datatable/)",
        "components": {
            "default": {
                "description": "Column is a helper component for DataTable and TreeTable.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ColumnEmits": {
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "ColumnFilterMatchModeOptions": {
                    "description": "Filter match modes for specific columns.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "string"
                        }
                    ],
                    "methods": []
                },
                "ColumnFilterModelType": {
                    "description": "Filter model metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "matchMode",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Match mode of filterModel."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Value of filterModel."
                        }
                    ],
                    "methods": []
                },
                "ColumnLoadingOptions": {
                    "description": "Custom column loading metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "cellEven",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the cell is even."
                        },
                        {
                            "name": "cellFirst",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the cell is first."
                        },
                        {
                            "name": "cellIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Cell index"
                        },
                        {
                            "name": "cellLast",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the cell is last."
                        },
                        {
                            "name": "cellOdd",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the item is odd."
                        },
                        {
                            "name": "column",
                            "optional": false,
                            "readonly": false,
                            "type": "default",
                            "default": "",
                            "description": "Column instance"
                        },
                        {
                            "name": "count",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Items count"
                        },
                        {
                            "name": "even",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the item is even."
                        },
                        {
                            "name": "field",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Column field"
                        },
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the item is first."
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Item index"
                        },
                        {
                            "name": "last",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the item is last."
                        },
                        {
                            "name": "odd",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the item is odd."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "VirtualScrollerLoaderOptions"
                },
                "ColumnProps": {
                    "description": "Defines valid properties in Column component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "alignFrozen",
                            "optional": true,
                            "readonly": false,
                            "type": "\"left\" | \"right\"",
                            "default": "left",
                            "description": "Position of a frozen column, valid values are left and right."
                        },
                        {
                            "name": "bodyClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the column body."
                        },
                        {
                            "name": "bodyStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the column body."
                        },
                        {
                            "name": "class",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of header, body and footer cells."
                        },
                        {
                            "name": "colspan",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Number of columns to span for grouping."
                        },
                        {
                            "name": "columnKey",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of a column if field property is not defined."
                        },
                        {
                            "name": "dataType",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Type of data. It's value is related to PrimeVue.filterMatchModeOptions config."
                        },
                        {
                            "name": "excludeGlobalFilter",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to exclude from global filtering or not."
                        },
                        {
                            "name": "expander",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Displays an icon to toggle row expansion."
                        },
                        {
                            "name": "exportFooter",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Custom export footer of the column to be exported as CSV."
                        },
                        {
                            "name": "exportHeader",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Custom export header of the column to be exported as CSV."
                        },
                        {
                            "name": "exportable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the column is included in data export."
                        },
                        {
                            "name": "field",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property represented by the column."
                        },
                        {
                            "name": "filterField",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name to use in filtering, defaults to field."
                        },
                        {
                            "name": "filterHeaderClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the column filter header in row filter display."
                        },
                        {
                            "name": "filterHeaderStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the column filter header in row filter display."
                        },
                        {
                            "name": "filterMatchMode",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines the filtering algorithm to use when searching the options."
                        },
                        {
                            "name": "filterMatchModeOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnFilterMatchModeOptions[]",
                            "default": "",
                            "description": "An array of label-value pairs to override the global match mode options."
                        },
                        {
                            "name": "filterMenuClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the column filter overlay."
                        },
                        {
                            "name": "filterMenuStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the column filter overlay."
                        },
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Footer content of the column."
                        },
                        {
                            "name": "footerClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the column footer."
                        },
                        {
                            "name": "footerStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the column footer."
                        },
                        {
                            "name": "frozen",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the column is fixed in horizontal scrolling."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Header content of the column."
                        },
                        {
                            "name": "headerClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the column header."
                        },
                        {
                            "name": "headerStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the column header."
                        },
                        {
                            "name": "hidden",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the column is rendered."
                        },
                        {
                            "name": "maxConstraints",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "2",
                            "description": "Maximum number of constraints for a column filter."
                        },
                        {
                            "name": "reorderableColumn",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if the column itself can be reordered with dragging."
                        },
                        {
                            "name": "rowEditor",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, column displays row editor controls."
                        },
                        {
                            "name": "rowReorder",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether this column displays an icon to reorder the rows."
                        },
                        {
                            "name": "rowReorderIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "pi pi-bars",
                            "description": "Icon of the drag handle to reorder rows."
                        },
                        {
                            "name": "rowspan",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Number of rows to span for grouping."
                        },
                        {
                            "name": "selectionMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"multiple\" | \"single\"",
                            "default": "",
                            "description": "Defines column based selection mode."
                        },
                        {
                            "name": "showAddButton",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "When enabled, a button is displayed to add more rules."
                        },
                        {
                            "name": "showApplyButton",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Displays a button to apply the column filtering."
                        },
                        {
                            "name": "showClearButton",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Displays a button to clear the column filtering."
                        },
                        {
                            "name": "showFilterMatchModes",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show the match modes selector."
                        },
                        {
                            "name": "showFilterMenu",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to display the filter overlay."
                        },
                        {
                            "name": "showFilterOperator",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "When enabled, match all and match any operator selector is displayed."
                        },
                        {
                            "name": "sortField",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name to use in sorting, defaults to field."
                        },
                        {
                            "name": "sortable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if a column is sortable."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of header, body and footer cells."
                        }
                    ],
                    "methods": []
                },
                "ColumnSlots": {
                    "description": "Defines valid slots in Column component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "body",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>column</b>: Column, // Column node.\n  \t <b>data</b>: any, // Row data.\n  \t <b>field</b>: string, // Column field.\n  \t <b>frozenRow</b>: boolean, // Whether the row is frozen.\n  \t <b>index</b>: number, // Row index.\n  \t <b>node</b>: any, // Row node data.\n  \t <b>editorInitCallback()</b>: void, // Callback function\n  }",
                                    "description": "body slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom body template."
                        },
                        {
                            "name": "editor",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>column</b>: Column, // Column node.\n  \t <b>data</b>: any, // Row data.\n  \t <b>field</b>: string, // Column field.\n  \t <b>frozenRow</b>: boolean, // Whether the row is frozen.\n  \t <b>index</b>: number, // Row index.\n  \t <b>editorCancelCallback()</b>: void, // Callback function\n  \t <b>editorSaveCallback()</b>: void, // Callback function\n  }",
                                    "description": "editor slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom editor template."
                        },
                        {
                            "name": "filter",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>field</b>: string, // Column field.\n  \t <b>filterModel</b>: ColumnFilterModelType, // Filter metadata\n  \t <b>filterCallback()</b>: void, // Callback function\n  }",
                                    "description": "filter slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom filter template."
                        },
                        {
                            "name": "filterapply",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>field</b>: string, // Column field.\n  \t <b>filterModel</b>: ColumnFilterModelType, // Filter metadata\n  \t <b>filterCallback()</b>: void, // Callback function\n  }",
                                    "description": "filter apply slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom filter apply template."
                        },
                        {
                            "name": "filterclear",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>field</b>: string, // Column field.\n  \t <b>filterModel</b>: ColumnFilterModelType, // Filter metadata\n  \t <b>filterCallback()</b>: void, // Callback function\n  }",
                                    "description": "filter clear slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom filter clear template."
                        },
                        {
                            "name": "filterfooter",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>field</b>: string, // Column field.\n  \t <b>filterModel</b>: ColumnFilterModelType, // Filter metadata\n  \t <b>filterCallback()</b>: void, // Callback function\n  }",
                                    "description": "filter footer slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom filter footer template."
                        },
                        {
                            "name": "filterheader",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>field</b>: string, // Column field.\n  \t <b>filterModel</b>: ColumnFilterModelType, // Filter metadata\n  \t <b>filterCallback()</b>: void, // Callback function\n  }",
                                    "description": "filter header slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom filter header template."
                        },
                        {
                            "name": "footer",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>column</b>: Column, // Column node.\n  }",
                                    "description": "footer slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom footer template."
                        },
                        {
                            "name": "header",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>column</b>: Column, // Column node.\n  }",
                                    "description": "header slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header template."
                        },
                        {
                            "name": "loading",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>column</b>: Column, // Column node.\n  \t <b>data</b>: any, // Row data.\n  \t <b>field</b>: string, // Column field.\n  \t <b>frozenRow</b>: boolean, // Whether the row is frozen.\n  \t <b>index</b>: number, // Row index.\n  \t <b>loadingOptions</b>: ColumnLoadingOptions, // Loading options.\n  }",
                                    "description": "loading slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom loading template."
                        }
                    ]
                }
            }
        }
    },
    "columngroup": {
        "description": "Columns can be grouped at header and footer sections by defining a ColumnGroup component.\nIt is a helper component for DataTable.\n\n[Live Demo](https://www.primevue.org/datatable/)",
        "components": {
            "default": {
                "description": "It is a helper component for DataTable.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ColumnGroupEmits": {
                    "description": "Defines valid emits in ColumnGroup component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "ColumnGroupProps": {
                    "description": "Defines valid properties in ColumnGroup component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "type",
                            "optional": true,
                            "readonly": false,
                            "type": "\"footer\" | \"header\"",
                            "default": "",
                            "description": "Type of column group"
                        }
                    ],
                    "methods": []
                },
                "ColumnGroupSlots": {
                    "description": "Defines valid slots in ColumnGroup component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        }
    },
    "config/PrimeVue": {
        "functions": {
            "description": "Defines the custom functions used by the module.",
            "values": {
                "usePrimeVue": {
                    "name": "usePrimeVue",
                    "parameters": [],
                    "returnType": "Object"
                }
            }
        }
    },
    "confirmationoptions": {
        "description": "[Live Demo](https://www.primevue.org/confirmdialog/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ConfirmationOptions": {
                    "description": "Confirmation Service options.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "accept",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "acceptClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the accept button."
                        },
                        {
                            "name": "acceptIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon of the accept button."
                        },
                        {
                            "name": "acceptLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Label of the accept button. Defaults to PrimeVue Locale configuration."
                        },
                        {
                            "name": "blockScroll",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether background scroll should be blocked when dialog is visible."
                        },
                        {
                            "name": "defaultFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Element to receive the focus when the dialog gets visible, valid values are \"accept\" and \"reject\"."
                        },
                        {
                            "name": "group",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Optional key to match the key of the confirmation, useful to target a specific confirm dialog instance."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Header text of the dialog."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display next to the message."
                        },
                        {
                            "name": "message",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Message of the confirmation."
                        },
                        {
                            "name": "onHide",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "position",
                            "optional": true,
                            "readonly": false,
                            "type": "\"center\" | \"left\" | \"top\" | \"bottom\" | \"right\" | \"topleft\" | \"topright\" | \"bottomleft\" | \"bottomright\"",
                            "default": "center",
                            "description": "Position of the dialog."
                        },
                        {
                            "name": "rejectClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the reject button."
                        },
                        {
                            "name": "rejectIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon of the reject button."
                        },
                        {
                            "name": "rejectLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Label of the reject button. Defaults to PrimeVue Locale configuration."
                        },
                        {
                            "name": "target",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLElement",
                            "default": "",
                            "description": "Element to align the overlay."
                        }
                    ],
                    "methods": [
                        {
                            "name": "reject",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to execute when action is rejected."
                        }
                    ]
                }
            }
        }
    },
    "confirmationservice-useconfirm": {
        "description": "[Live Demo](https://www.primevue.org/confirmdialog/)",
        "model": {
            "ConfirmationServiceMethods": {
                "description": "Confirmation Service methods.",
                "props": {
                    "description": "",
                    "values": []
                },
                "methods": {
                    "description": "",
                    "values": [
                        {
                            "name": "close",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Hides the dialog without invoking accept or reject callbacks."
                        },
                        {
                            "name": "require",
                            "parameters": [
                                {
                                    "name": "options",
                                    "optional": false,
                                    "type": "ConfirmationOptions",
                                    "description": "Confirmation Object"
                                }
                            ],
                            "returnType": "void",
                            "description": "Displays the dialog using the confirmation object options."
                        }
                    ]
                }
            }
        }
    },
    "confirmdialog": {
        "description": "ConfirmDialog uses a Dialog UI with confirmDialog method or <ConfirmDialog> tag.\n\n[Live Demo](https://www.primevue.org/confirmdialog)",
        "components": {
            "default": {
                "description": "ConfirmDialog uses a Dialog UI with confirmDialog method or <ConfirmDialog> tag.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ConfirmDialogBreakpoints": {
                    "description": "Breakpoint metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "string"
                        }
                    ],
                    "methods": []
                },
                "ConfirmDialogEmits": {
                    "description": "Defines valid emits in ConfirmDialog component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "ConfirmDialogProps": {
                    "description": "Defines valid properties in ConfirmDialog component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "breakpoints",
                            "optional": true,
                            "readonly": false,
                            "type": "ConfirmDialogBreakpoints",
                            "default": "",
                            "description": "Object literal to define widths per screen size."
                        },
                        {
                            "name": "draggable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Enables dragging to change the position using header."
                        },
                        {
                            "name": "group",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Optional key to match the key of the confirmation, useful to target a specific confirm dialog instance."
                        }
                    ],
                    "methods": []
                },
                "ConfirmDialogSlots": {
                    "description": "Defines valid slots in ConfirmDialog component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "message",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>message</b>: ConfirmationOptions, // undefined\n  }",
                                    "description": "message slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom message template."
                        }
                    ]
                }
            }
        }
    },
    "confirmpopup": {
        "description": "ConfirmPopup displays a confirmation overlay displayed relatively to its target.\n\n[Live Demo](https://www.primevue.org/confirmpopup)",
        "components": {
            "default": {
                "description": "ConfirmPopup displays a confirmation overlay displayed relatively to its target.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ConfirmPopupEmits": {
                    "description": "Defines valid emits in ConfirmPopup component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "ConfirmPopupProps": {
                    "description": "Defines valid properties in ConfirmPopup component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "group",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Optional key to match the key of the confirmation, useful to target a specific confirm dialog instance."
                        }
                    ],
                    "methods": []
                },
                "ConfirmPopupSlots": {
                    "description": "Defines valid slots in ConfirmPopup component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "message",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>message</b>: ConfirmationOptions, // undefined\n  }",
                                    "description": "message slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom message template."
                        }
                    ]
                }
            }
        }
    },
    "contextmenu": {
        "description": "ContextMenu displays an overlay menu on right click of its target. Note that components like DataTable has special integration with ContextMenu.\nRefer to documentation of the individual documentation of the with context menu support.\n\n[Live Demo](https://www.primevue.org/contextmenu/)",
        "components": {
            "default": {
                "description": "ContextMenu displays an overlay menu on right click of its target. Note that components like DataTable has special integration with ContextMenu.\nRefer to documentation of the individual documentation of the with context menu support.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Hides the menu."
                        },
                        {
                            "name": "show",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Shows the menu."
                        },
                        {
                            "name": "toggle",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Toggles the visibility of the menu."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ContextMenuEmits": {
                    "description": "Defines valid emits in ContextMenu component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "before-hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke before the popup is hidden."
                        },
                        {
                            "name": "before-show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke before the popup is shown."
                        },
                        {
                            "name": "blur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component loses focus."
                        },
                        {
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component receives focus."
                        },
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when the popup is hidden."
                        },
                        {
                            "name": "show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when the popup is shown."
                        }
                    ]
                },
                "ContextMenuProps": {
                    "description": "Defines valid properties in ContextMenu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "string | HTMLElement",
                            "default": "body",
                            "description": "A valid query selector or an HTMLElement to specify where the overlay gets attached."
                        },
                        {
                            "name": "aria-label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a string value that labels an interactive element."
                        },
                        {
                            "name": "aria-labelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying menu element."
                        },
                        {
                            "name": "autoZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to automatically manage layering."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "exact",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to apply 'router-link-active-exact' class if route exactly matches the item path."
                        },
                        {
                            "name": "global",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Attaches the menu to document instead of a particular item."
                        },
                        {
                            "name": "model",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuItem[]",
                            "default": "",
                            "description": "An array of menuitems."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        }
                    ],
                    "methods": []
                },
                "ContextMenuSlots": {
                    "description": "Defines valid slots in ContextMenu component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "item",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>item</b>: MenuItem, // Menuitem instance\n  }",
                                    "description": "item slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom item template."
                        }
                    ]
                }
            }
        }
    },
    "datatable": {
        "description": "DataTable displays data in tabular format.\n\n[Live Demo](https://www.primevue.org/datatable/)",
        "components": {
            "default": {
                "description": "DataTable displays data in tabular format.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "exportCSV",
                            "parameters": [
                                {
                                    "name": "options",
                                    "type": "DataTableExportCSVOptions",
                                    "description": "Export options."
                                },
                                {
                                    "name": "data",
                                    "type": "any[]",
                                    "description": "Custom exportable data. This param can be used on lazy dataTable."
                                }
                            ],
                            "returnType": "void",
                            "description": "Exports the data to CSV format."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "DataTableCellEditCancelEvent": {
                    "description": "Custom cell edit cancel event.",
                    "relatedProp": "DataTableEmits['cell-edit-cancel']",
                    "props": [
                        {
                            "name": "data",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Row data to edit."
                        },
                        {
                            "name": "field",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Field name of the row data."
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the row data to edit."
                        },
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "DataTableCellEditInitEvent"
                },
                "DataTableCellEditCompleteEvent": {
                    "description": "Custom cell edit complete event.",
                    "relatedProp": "DataTableEmits['cell-edit-complete']",
                    "props": [
                        {
                            "name": "data",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Row data to edit."
                        },
                        {
                            "name": "field",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Field name of the row data."
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the row data to edit."
                        },
                        {
                            "name": "newData",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "New row data after editing."
                        },
                        {
                            "name": "newValue",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Field value of new row data after editing."
                        },
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "type",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Type of completion such as 'enter', 'outside' or 'tab'."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Field value of row data to edit."
                        }
                    ],
                    "methods": []
                },
                "DataTableCellEditInitEvent": {
                    "description": "Custom cell edit init event.",
                    "relatedProp": "DataTableEmits['cell-edit-init']",
                    "props": [
                        {
                            "name": "data",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Row data to edit."
                        },
                        {
                            "name": "field",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Field name of the row data."
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the row data to edit."
                        },
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        }
                    ],
                    "methods": [],
                    "extendedBy": "DataTableCellEditCancelEvent"
                },
                "DataTableColumnReorderEvent": {
                    "description": "Custom row column reorder event.",
                    "relatedProp": "DataTableEmits['column-reorder']",
                    "props": [
                        {
                            "name": "dragIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the dragged column"
                        },
                        {
                            "name": "dropIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the dropped column"
                        },
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        }
                    ],
                    "methods": []
                },
                "DataTableColumnResizeEndEvent": {
                    "description": "Custom column resize end event.",
                    "relatedProp": "DataTableEmits['column-resize-end']",
                    "props": [
                        {
                            "name": "delta",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Change in column width"
                        },
                        {
                            "name": "element",
                            "optional": false,
                            "readonly": false,
                            "type": "HTMLElement",
                            "default": "",
                            "description": "DOM element of the resized column."
                        }
                    ],
                    "methods": []
                },
                "DataTableEditingRows": {
                    "description": "Custom datatable editing rows.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean"
                        }
                    ],
                    "methods": []
                },
                "DataTableEmits": {
                    "description": "Defines valid emits in Datatable component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "cell-edit-cancel",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableCellEditCancelEvent",
                                    "description": "Custom cell edit cancel event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when cell edit is cancelled with escape key."
                        },
                        {
                            "name": "cell-edit-complete",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableCellEditCompleteEvent",
                                    "description": "Custom cell edit complete event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when cell edit is completed."
                        },
                        {
                            "name": "cell-edit-init",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableCellEditInitEvent",
                                    "description": "Custom cell edit init."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when cell edit is initiated."
                        },
                        {
                            "name": "column-reorder",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableColumnReorderEvent",
                                    "description": "Custom column reorder event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a column is reordered."
                        },
                        {
                            "name": "column-resize-end",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableColumnResizeEndEvent"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a column is resized."
                        },
                        {
                            "name": "filter",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableFilterEvent",
                                    "description": "Custom filter event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Event to emit after filtering, not triggered in lazy mode."
                        },
                        {
                            "name": "page",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTablePageEvent",
                                    "description": "Custom page event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on pagination. Sort and Filter information is also available for lazy loading implementation."
                        },
                        {
                            "name": "row-click",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableRowClickEvent",
                                    "description": "Custom row click event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a row is clicked."
                        },
                        {
                            "name": "row-collapse",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableRowCollapseEvent",
                                    "description": "Custom row collapse event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a row is collapsed."
                        },
                        {
                            "name": "row-contextmenu",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableRowContextMenuEvent",
                                    "description": "Custom row context menu event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a row is selected with a ContextMenu."
                        },
                        {
                            "name": "row-dblclick",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableRowDoubleClickEvent",
                                    "description": "Custom row double click event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a row is double clicked."
                        },
                        {
                            "name": "row-edit-cancel",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableRowEditCancelEvent",
                                    "description": "Custom row edit cancel event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when row edit is cancelled."
                        },
                        {
                            "name": "row-edit-init",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableRowEditInitEvent",
                                    "description": "Custom row edit init event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when row edit is initiated."
                        },
                        {
                            "name": "row-edit-save",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableRowEditSaveEvent",
                                    "description": "Custom row edit save event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when row edit is saved."
                        },
                        {
                            "name": "row-expand",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableRowExpandEvent",
                                    "description": "Custom row expand event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a row is expanded."
                        },
                        {
                            "name": "row-reorder",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableRowReorderEvent",
                                    "description": "Custom row reorder event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a row is reordered."
                        },
                        {
                            "name": "row-select",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableRowSelectEvent",
                                    "description": "Custom row select event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a row is selected."
                        },
                        {
                            "name": "row-select-all",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableRowSelectAllEvent",
                                    "description": "Custom row select all event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Fired when header checkbox is checked."
                        },
                        {
                            "name": "row-unselect",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableRowUnselectEvent",
                                    "description": "Custom row unselect event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a row is unselected."
                        },
                        {
                            "name": "row-unselect-all",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableRowUnselectAllEvent",
                                    "description": "Custom row unselect all event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Fired when header checkbox is unchecked."
                        },
                        {
                            "name": "rowgroup-collapse",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableRowCollapseEvent",
                                    "description": "Custom row collapse event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a row group is collapsed."
                        },
                        {
                            "name": "rowgroup-expand",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableRowExpandEvent",
                                    "description": "Custom row expand event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a row group is expanded."
                        },
                        {
                            "name": "select-all-change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableSelectAllChangeEvent",
                                    "description": "Custom select all change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when all data is selected."
                        },
                        {
                            "name": "sort",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableSortEvent",
                                    "description": "Custom sort event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on sort. Page and Filter information is also available for lazy loading implementation."
                        },
                        {
                            "name": "state-restore",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableStateEvent",
                                    "description": "Custom state event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Invoked when a stateful table saves the state."
                        },
                        {
                            "name": "state-save",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableStateEvent",
                                    "description": "Custom state event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Invoked when a stateful table restores the state."
                        },
                        {
                            "name": "update:contextMenuSelection",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the contextMenuSelection changes."
                        },
                        {
                            "name": "update:editingRows",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any[] | DataTableEditingRows",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the editingRows changes."
                        },
                        {
                            "name": "update:expandedRowGroups",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any[] | DataTableExpandedRows",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the expandedRowGroups changes."
                        },
                        {
                            "name": "update:expandedRows",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any[] | DataTableExpandedRows",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the expandedRows changes."
                        },
                        {
                            "name": "update:filters",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "DataTableFilterMeta",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the filters changes."
                        },
                        {
                            "name": "update:first",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "number",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the first changes."
                        },
                        {
                            "name": "update:multiSortMeta",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "undefined | null | DataTableSortMeta[]",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the multiSortMeta changes."
                        },
                        {
                            "name": "update:rows",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "number",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the rows changes."
                        },
                        {
                            "name": "update:selection",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the selection changes."
                        },
                        {
                            "name": "update:sortField",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "string",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the sortField changes."
                        },
                        {
                            "name": "update:sortOrder",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "undefined | number",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the sortOrder changes."
                        },
                        {
                            "name": "value-change",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any[]",
                                    "description": "Value displayed by the table."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke after filtering, sorting, pagination and cell editing to pass the rendered value."
                        }
                    ]
                },
                "DataTableExpandedRows": {
                    "description": "Custom datatable expanded rows.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean"
                        }
                    ],
                    "methods": []
                },
                "DataTableExportCSVOptions": {
                    "description": "Custom datatable export csv metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "selectionOnly",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether to export only selection data."
                        }
                    ],
                    "methods": []
                },
                "DataTableExportFunctionOptions": {
                    "description": "Custom datatable export metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "data",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Row data"
                        },
                        {
                            "name": "field",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Column Field"
                        }
                    ],
                    "methods": []
                },
                "DataTableFilterEvent": {
                    "description": "Custom filter event.",
                    "relatedProp": "DataTableEmits.filter",
                    "props": [
                        {
                            "name": "filterMatchModes",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | \"endsWith\" | \"startsWith\" | \"contains\" | \"in\" | \"notContains\" | \"equals\" | \"notEquals\" | \"lt\" | \"lte\" | \"gt\" | \"gte\" | \"between\" | \"dateIs\" | \"dateIsNot\" | \"dateBefore\" | \"dateAfter\"",
                            "default": "",
                            "description": "Match modes per field"
                        },
                        {
                            "name": "filteredValue",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Filtered collection (non-lazy only)"
                        },
                        {
                            "name": "filters",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableFilterMeta",
                            "default": "",
                            "description": "Collection of active filters"
                        },
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of first record"
                        },
                        {
                            "name": "multiSortMeta",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | DataTableSortMeta[]",
                            "default": "",
                            "description": "MultiSort metadata"
                        },
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        },
                        {
                            "name": "rows",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Number of rows to display in new page"
                        },
                        {
                            "name": "sortField",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | string | Function",
                            "default": "",
                            "description": "Field to sort against"
                        },
                        {
                            "name": "sortOrder",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | null | 0 | 1 | -1",
                            "default": "",
                            "description": "Sort order as integer"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "DataTableSortEvent"
                },
                "DataTableFilterMeta": {
                    "description": "Custom datatable filter metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "string | DataTableFilterMetaData | DataTableOperatorFilterMetaData"
                        }
                    ],
                    "methods": []
                },
                "DataTableFilterMetaData": {
                    "description": "Custom datatable filter metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "matchMode",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | \"endsWith\" | \"startsWith\" | \"contains\" | \"in\" | \"notContains\" | \"equals\" | \"notEquals\" | \"lt\" | \"lte\" | \"gt\" | \"gte\" | \"between\" | \"dateIs\" | \"dateIsNot\" | \"dateBefore\" | \"dateAfter\"",
                            "default": "",
                            "description": "Filter match mode"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Filter value"
                        }
                    ],
                    "methods": []
                },
                "DataTableOperatorFilterMetaData": {
                    "description": "Custom datatable operator filter metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "constraints",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableFilterMetaData[]",
                            "default": "",
                            "description": "Array of filter meta datas."
                        },
                        {
                            "name": "operator",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Filter operator"
                        }
                    ],
                    "methods": []
                },
                "DataTablePageEvent": {
                    "description": "Custom pagination event.",
                    "relatedProp": "DataTableEmits.page",
                    "props": [
                        {
                            "name": "filterMatchModes",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | \"endsWith\" | \"startsWith\" | \"contains\" | \"in\" | \"notContains\" | \"equals\" | \"notEquals\" | \"lt\" | \"lte\" | \"gt\" | \"gte\" | \"between\" | \"dateIs\" | \"dateIsNot\" | \"dateBefore\" | \"dateAfter\"",
                            "default": "",
                            "description": "Match modes per field"
                        },
                        {
                            "name": "filters",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableFilterMeta",
                            "default": "",
                            "description": "Collection of active filters"
                        },
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of first record"
                        },
                        {
                            "name": "multiSortMeta",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | DataTableSortMeta[]",
                            "default": "",
                            "description": "MultiSort metadata"
                        },
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        },
                        {
                            "name": "page",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "New page number"
                        },
                        {
                            "name": "pageCount",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Total page count"
                        },
                        {
                            "name": "rows",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Number of rows to display in new page"
                        },
                        {
                            "name": "sortField",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | string | Function",
                            "default": "",
                            "description": "Field to sort against"
                        },
                        {
                            "name": "sortOrder",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | null | 0 | 1 | -1",
                            "default": "",
                            "description": "Sort order as integer"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "DataTableSortEvent"
                },
                "DataTableProps": {
                    "description": "Defines valid properties in DataTable component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "alwaysShowPaginator",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show it even there is only one page."
                        },
                        {
                            "name": "breakpoint",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "960px",
                            "description": "The breakpoint to define the maximum width boundary when using stack responsive layout."
                        },
                        {
                            "name": "collapsedRowIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "pi-chevron-right",
                            "description": "Icon of the row toggler to display the row as collapsed."
                        },
                        {
                            "name": "columnResizeMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"fit\" | \"expand\"",
                            "default": "fit",
                            "description": "Defines whether the overall table width."
                        },
                        {
                            "name": "compareSelectionBy",
                            "optional": true,
                            "readonly": false,
                            "type": "\"equals\" | \"deepEquals\"",
                            "default": "deepEquals",
                            "description": "Algorithm to define if a row is selected."
                        },
                        {
                            "name": "contextMenu",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Enables context menu integration."
                        },
                        {
                            "name": "contextMenuSelection",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Selected row instance with the ContextMenu."
                        },
                        {
                            "name": "csvSeparator",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ",",
                            "description": "Character to use as the csv separator."
                        },
                        {
                            "name": "currentPageReportTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "'({currentPage} of {totalPages})'",
                            "description": "Template of the current page report element. It displays information about the pagination state. Available placeholders are the following;\n\n- {currentPage}\n- {totalPages}\n- {rows}\n- {first}\n- {last}\n- {totalRecords}"
                        },
                        {
                            "name": "dataKey",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Name of the field that uniquely identifies the a record in the data."
                        },
                        {
                            "name": "defaultSortOrder",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Default sort order of an unsorted column."
                        },
                        {
                            "name": "editMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"cell\" | \"row\"",
                            "default": "",
                            "description": "Defines the incell editing mode."
                        },
                        {
                            "name": "editingRows",
                            "optional": true,
                            "readonly": false,
                            "type": "any[] | DataTableEditingRows",
                            "default": "",
                            "description": "A collection of rows to represent the current editing data in row edit mode."
                        },
                        {
                            "name": "expandableRowGroups",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the row groups can be expandable."
                        },
                        {
                            "name": "expandedRowGroups",
                            "optional": true,
                            "readonly": false,
                            "type": "any[] | DataTableExpandedRows",
                            "default": "",
                            "description": "An array of group field values whose groups would be rendered as expanded."
                        },
                        {
                            "name": "expandedRowIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "pi-chevron-down",
                            "description": "Icon of the row toggler to display the row as expanded."
                        },
                        {
                            "name": "expandedRows",
                            "optional": true,
                            "readonly": false,
                            "type": "null | any[] | DataTableExpandedRows",
                            "default": "",
                            "description": "A collection of row data display as expanded."
                        },
                        {
                            "name": "exportFilename",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "download",
                            "description": "Name of the exported file."
                        },
                        {
                            "name": "filterDisplay",
                            "optional": true,
                            "readonly": false,
                            "type": "\"menu\" | \"row\"",
                            "default": "",
                            "description": "Layout of the filter elements."
                        },
                        {
                            "name": "filterInputProps",
                            "optional": true,
                            "readonly": false,
                            "type": "InputHTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLInputElement to the focusable filter input element inside the component."
                        },
                        {
                            "name": "filterLocale",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Locale to use in filtering. The default locale is the host environment's current locale."
                        },
                        {
                            "name": "filters",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTableFilterMeta",
                            "default": "",
                            "description": "Filters object with key-value pairs to define the filters."
                        },
                        {
                            "name": "first",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Index of the first row to be displayed."
                        },
                        {
                            "name": "frozenValue",
                            "optional": true,
                            "readonly": false,
                            "type": "null | any[]",
                            "default": "",
                            "description": "Items of the frozen part in scrollable DataTable."
                        },
                        {
                            "name": "globalFilterFields",
                            "optional": true,
                            "readonly": false,
                            "type": "string[]",
                            "default": "",
                            "description": "Fields for global filter"
                        },
                        {
                            "name": "groupRowsBy",
                            "optional": true,
                            "readonly": false,
                            "type": "string | string[] | Function",
                            "default": "",
                            "description": "One or more field names to use in row grouping."
                        },
                        {
                            "name": "lazy",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if data is loaded and interacted with in lazy manner."
                        },
                        {
                            "name": "loading",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Displays a loader to indicate data load is in progress."
                        },
                        {
                            "name": "loadingIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "pi pi-spinner",
                            "description": "The icon to show while indicating data load is in progress."
                        },
                        {
                            "name": "metaKeySelection",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Defines whether metaKey is requred or not for the selection. When true metaKey needs to be pressed to select or unselect an item and\nwhen set to false selection of each item can be toggled individually. On touch enabled devices, metaKeySelection is turned off automatically."
                        },
                        {
                            "name": "multiSortMeta",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTableSortMeta[]",
                            "default": "",
                            "description": "An array of SortMeta objects to sort the data."
                        },
                        {
                            "name": "pageLinkSize",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "5",
                            "description": "Number of page links to display."
                        },
                        {
                            "name": "paginator",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified as true, enables the pagination."
                        },
                        {
                            "name": "paginatorPosition",
                            "optional": true,
                            "readonly": false,
                            "type": "\"both\" | \"top\" | \"bottom\"",
                            "default": "bottom",
                            "description": "Position of the paginator, options are 'top','bottom' or 'both'."
                        },
                        {
                            "name": "paginatorTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown",
                            "description": "Template of the paginator. It can be customized using the template property using the predefined keys.\n\n- FirstPageLink\n- PrevPageLink\n- PageLinks\n- NextPageLink\n- LastPageLink\n- RowsPerPageDropdown\n- JumpToPageDropdown\n- JumpToPageInput\n- CurrentPageReport"
                        },
                        {
                            "name": "removableSort",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, columns can have an un-sorted state."
                        },
                        {
                            "name": "reorderableColumns",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, columns can be reordered using drag and drop."
                        },
                        {
                            "name": "resizableColumns",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, columns can be resized using drag and drop."
                        },
                        {
                            "name": "rowClass",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "rowGroupMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"rowspan\" | \"subheader\"",
                            "default": "",
                            "description": "Defines the row group mode."
                        },
                        {
                            "name": "rowHover",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, background of the rows change on hover."
                        },
                        {
                            "name": "rowStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "rows",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Number of rows to display per page."
                        },
                        {
                            "name": "rowsPerPageOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "number[]",
                            "default": "",
                            "description": "Array of integer values to display inside rows per page dropdown."
                        },
                        {
                            "name": "scrollHeight",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Height of the scroll viewport in fixed pixels or the 'flex' keyword for a dynamic size."
                        },
                        {
                            "name": "scrollable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified, enables horizontal and/or vertical scrolling."
                        },
                        {
                            "name": "selectAll",
                            "optional": true,
                            "readonly": false,
                            "type": "Nullable<boolean>",
                            "default": "",
                            "description": "Whether all data is selected."
                        },
                        {
                            "name": "selection",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Selected row in single mode or an array of values in multiple mode."
                        },
                        {
                            "name": "selectionMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"multiple\" | \"single\"",
                            "default": "",
                            "description": "Specifies the selection mode."
                        },
                        {
                            "name": "showGridlines",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to show grid lines between cells."
                        },
                        {
                            "name": "sortField",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or a getter function of a row data used for sorting by default"
                        },
                        {
                            "name": "sortMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"multiple\" | \"single\"",
                            "default": "single",
                            "description": "Defines whether sorting works on single column or on multiple columns."
                        },
                        {
                            "name": "sortOrder",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Order to sort the data by default."
                        },
                        {
                            "name": "stateKey",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Unique identifier of a stateful table to use in state storage."
                        },
                        {
                            "name": "stateStorage",
                            "optional": true,
                            "readonly": false,
                            "type": "\"local\" | \"session\"",
                            "default": "session",
                            "description": "Defines where a stateful table keeps its state."
                        },
                        {
                            "name": "stripedRows",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to displays rows with alternating colors."
                        },
                        {
                            "name": "tableClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the table element."
                        },
                        {
                            "name": "tableProps",
                            "optional": true,
                            "readonly": false,
                            "type": "TableHTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the TableHTMLAttributes to table element inside the component."
                        },
                        {
                            "name": "tableStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the table element."
                        },
                        {
                            "name": "totalRecords",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Number of total records, defaults to length of value when not defined."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "null | any[]",
                            "default": "",
                            "description": "An array of objects to display."
                        },
                        {
                            "name": "virtualScrollerOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "VirtualScrollerProps",
                            "default": "",
                            "description": "Whether to use the virtualScroller feature. The properties of VirtualScroller component can be used like an object in it.\nNote: Currently only vertical orientation mode is supported."
                        }
                    ],
                    "methods": [
                        {
                            "name": "exportFunction",
                            "parameters": [
                                {
                                    "name": "options",
                                    "optional": false,
                                    "type": "DataTableExportFunctionOptions"
                                }
                            ],
                            "returnType": "any",
                            "description": "Custom function to export data."
                        }
                    ]
                },
                "DataTableRowClickEvent": {
                    "description": "Custom row click event.",
                    "relatedProp": "DataTableEmits['row-click']",
                    "props": [
                        {
                            "name": "data",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Selected row data."
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Row index."
                        },
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "DataTableRowDoubleClickEvent,DataTableRowContextMenuEvent"
                },
                "DataTableRowCollapseEvent": {
                    "description": "Custom row collapse event.",
                    "relatedProp": "DataTableEmits['row-expand']",
                    "props": [
                        {
                            "name": "data",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Expanded row data"
                        },
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "DataTableRowExpandEvent"
                },
                "DataTableRowContextMenuEvent": {
                    "description": "Custom row context menu event.",
                    "relatedProp": "DataTableEmits['row-contextmenu']",
                    "props": [
                        {
                            "name": "data",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Selected row data."
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Row index."
                        },
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "DataTableRowClickEvent"
                },
                "DataTableRowDoubleClickEvent": {
                    "description": "Custom row double click event.",
                    "relatedProp": "DataTableEmits['row-dblclick']]",
                    "props": [
                        {
                            "name": "data",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Selected row data."
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Row index."
                        },
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "DataTableRowClickEvent"
                },
                "DataTableRowEditCancelEvent": {
                    "description": "Custom row edit cancel event.",
                    "relatedProp": "DataTableEmits['row-edit-cancel']",
                    "props": [
                        {
                            "name": "data",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Row data to edit."
                        },
                        {
                            "name": "field",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Field name of the row data."
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the row data to edit."
                        },
                        {
                            "name": "newData",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "New row data after editing."
                        },
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "DataTableRowEditInitEvent"
                },
                "DataTableRowEditInitEvent": {
                    "description": "Custom row edit init event.",
                    "relatedProp": "DataTableEmits['row-edit-init']",
                    "props": [
                        {
                            "name": "data",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Row data to edit."
                        },
                        {
                            "name": "field",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Field name of the row data."
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the row data to edit."
                        },
                        {
                            "name": "newData",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "New row data after editing."
                        },
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        }
                    ],
                    "methods": [],
                    "extendedBy": "DataTableRowEditSaveEvent,DataTableRowEditCancelEvent"
                },
                "DataTableRowEditSaveEvent": {
                    "description": "Custom row edit save event.",
                    "relatedProp": "DataTableEmits['row-edit-save']",
                    "props": [
                        {
                            "name": "data",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Row data to edit."
                        },
                        {
                            "name": "field",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Field name of the row data."
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the row data to edit."
                        },
                        {
                            "name": "newData",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "New row data after editing."
                        },
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "DataTableRowEditInitEvent"
                },
                "DataTableRowExpandEvent": {
                    "description": "Custom row expand event.",
                    "relatedProp": "DataTableEmits['row-expand']",
                    "props": [
                        {
                            "name": "data",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Expanded row data"
                        },
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        }
                    ],
                    "methods": [],
                    "extendedBy": "DataTableRowCollapseEvent"
                },
                "DataTableRowReorderEvent": {
                    "description": "Custom row reorder event.",
                    "relatedProp": "DataTableEmits['row-reorder']",
                    "props": [
                        {
                            "name": "dragIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the dragged row"
                        },
                        {
                            "name": "dropIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the dropped row"
                        },
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Reordered value"
                        }
                    ],
                    "methods": []
                },
                "DataTableRowSelectAllEvent": {
                    "description": "Custom row select all event.",
                    "relatedProp": "DataTableEmits['row-select-all']",
                    "props": [
                        {
                            "name": "data",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Selected dataset"
                        },
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        }
                    ],
                    "methods": []
                },
                "DataTableRowSelectEvent": {
                    "description": "Custom row select event.",
                    "relatedProp": "DataTableEmits['row-select']",
                    "props": [
                        {
                            "name": "data",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Selected row data"
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Row index"
                        },
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "type",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Type of the selection, valid values are 'row', 'radio' or 'checkbox'."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "DataTableRowUnselectEvent"
                },
                "DataTableRowUnselectAllEvent": {
                    "description": "Custom row unselect all event.",
                    "relatedProp": "DataTableEmits['row-unselect-all']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        }
                    ],
                    "methods": []
                },
                "DataTableRowUnselectEvent": {
                    "description": "Custom row unselect event.",
                    "relatedProp": "DataTableEmits['row-unselect']",
                    "props": [
                        {
                            "name": "data",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Selected row data"
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Row index"
                        },
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "type",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Type of the selection, valid values are 'row', 'radio' or 'checkbox'."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "DataTableRowSelectEvent"
                },
                "DataTableSelectAllChangeEvent": {
                    "description": "Custom row select all change event.",
                    "relatedProp": "DataTableEmits['select-all-change']",
                    "props": [
                        {
                            "name": "checked",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether all data is selected."
                        },
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        }
                    ],
                    "methods": []
                },
                "DataTableSlots": {
                    "description": "Defines valid slots in DataTable component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "empty",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom empty template."
                        },
                        {
                            "name": "expansion",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>data</b>: any, // Row data\n  \t <b>index</b>: number, // Row index\n  }",
                                    "description": "expansion slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom expansion template."
                        },
                        {
                            "name": "footer",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom footer template."
                        },
                        {
                            "name": "groupfooter",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>data</b>: any, // Row data\n  \t <b>index</b>: number, // Row index\n  }",
                                    "description": "group footer slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom group footer template."
                        },
                        {
                            "name": "groupheader",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>data</b>: any, // Row data\n  \t <b>index</b>: number, // Row index\n  }"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom group header template."
                        },
                        {
                            "name": "header",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header template."
                        },
                        {
                            "name": "loading",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom loading template."
                        },
                        {
                            "name": "paginatorend",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom paginator end template."
                        },
                        {
                            "name": "paginatorstart",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom paginator start template."
                        }
                    ]
                },
                "DataTableSortEvent": {
                    "description": "Custom sort event.",
                    "relatedProp": "DataTableEmits.sort",
                    "props": [
                        {
                            "name": "filterMatchModes",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | \"endsWith\" | \"startsWith\" | \"contains\" | \"in\" | \"notContains\" | \"equals\" | \"notEquals\" | \"lt\" | \"lte\" | \"gt\" | \"gte\" | \"between\" | \"dateIs\" | \"dateIsNot\" | \"dateBefore\" | \"dateAfter\"",
                            "default": "",
                            "description": "Match modes per field"
                        },
                        {
                            "name": "filters",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableFilterMeta",
                            "default": "",
                            "description": "Collection of active filters"
                        },
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of first record"
                        },
                        {
                            "name": "multiSortMeta",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | DataTableSortMeta[]",
                            "default": "",
                            "description": "MultiSort metadata"
                        },
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        },
                        {
                            "name": "rows",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Number of rows to display in new page"
                        },
                        {
                            "name": "sortField",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | string | Function",
                            "default": "",
                            "description": "Field to sort against"
                        },
                        {
                            "name": "sortOrder",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | null | 0 | 1 | -1",
                            "default": "",
                            "description": "Sort order as integer"
                        }
                    ],
                    "methods": [],
                    "extendedBy": "DataTablePageEvent,DataTableFilterEvent"
                },
                "DataTableSortMeta": {
                    "description": "Custom datatable sort meta.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "field",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Column field"
                        },
                        {
                            "name": "order",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | null | 0 | 1 | -1",
                            "default": "",
                            "description": "Column sort order"
                        }
                    ],
                    "methods": []
                },
                "DataTableStateEvent": {
                    "description": "Custom state event.",
                    "relatedProp": "DataTableEmits['state-save']",
                    "props": [
                        {
                            "name": "columWidths",
                            "optional": false,
                            "readonly": false,
                            "type": "string[]",
                            "default": "",
                            "description": "Comma separated list of column widths"
                        },
                        {
                            "name": "columnOrder",
                            "optional": false,
                            "readonly": false,
                            "type": "string[]",
                            "default": "",
                            "description": "Order of the columns"
                        },
                        {
                            "name": "expandedRowGroups",
                            "optional": false,
                            "readonly": false,
                            "type": "any[] | DataTableExpandedRows",
                            "default": "",
                            "description": "Instances of rows in expanded state"
                        },
                        {
                            "name": "expandedRowKeys",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Keys of rows in expanded state"
                        },
                        {
                            "name": "expandedRows",
                            "optional": false,
                            "readonly": false,
                            "type": "any[] | DataTableExpandedRows",
                            "default": "",
                            "description": "Instances of rows in expanded state"
                        },
                        {
                            "name": "filters",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableFilterMeta",
                            "default": "",
                            "description": "Collection of active filters"
                        },
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of first record"
                        },
                        {
                            "name": "multiSortMeta",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | DataTableSortMeta[]",
                            "default": "",
                            "description": "MultiSort metadata"
                        },
                        {
                            "name": "rows",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Number of rows to display in new page"
                        },
                        {
                            "name": "selection",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Selected rows"
                        },
                        {
                            "name": "selectionKeys",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Keys of selected rows"
                        },
                        {
                            "name": "sortField",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Field to sort against"
                        },
                        {
                            "name": "sortOrder",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | null | 0 | 1 | -1",
                            "default": "",
                            "description": "Sort order as integer"
                        }
                    ],
                    "methods": []
                }
            }
        }
    },
    "dataview": {
        "description": "DataView displays data in grid or list layout with pagination and sorting features.\n\n[Live Demo](https://www.primevue.org/dataview/)",
        "components": {
            "default": {
                "description": "DataView displays data in grid or list layout with pagination and sorting features.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "DataViewEmits": {
                    "description": "Defines valid slots in DataView component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "page",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataViewPageEvent",
                                    "description": "Custom page event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when page changes, the event object contains information about the new state."
                        },
                        {
                            "name": "update:first",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "number",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the first changes."
                        },
                        {
                            "name": "update:rows",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "number",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the rows changes."
                        }
                    ]
                },
                "DataViewPageEvent": {
                    "description": "Custom page event.",
                    "relatedProp": "DataViewEmits.page",
                    "props": [
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of first record"
                        },
                        {
                            "name": "page",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "New page number"
                        },
                        {
                            "name": "pageCount",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Total number of pages"
                        },
                        {
                            "name": "rows",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Number of rows to display in new page"
                        }
                    ],
                    "methods": []
                },
                "DataViewProps": {
                    "description": "Defines valid properties in DataView component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "alwaysShowPaginator",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show it even there is only one page."
                        },
                        {
                            "name": "currentPageReportTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "'({currentPage} of {totalPages})'",
                            "description": "Template of the current page report element. It displays information about the pagination state.\n\n- {currentPage}\n- {totalPages}\n- {rows}\n- {first}\n- {last}\n- {totalRecords}"
                        },
                        {
                            "name": "dataKey",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | string",
                            "default": "",
                            "description": "Name of the data that uniquely identifies the a record in the data."
                        },
                        {
                            "name": "first",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Index of the first record to render."
                        },
                        {
                            "name": "layout",
                            "optional": true,
                            "readonly": false,
                            "type": "\"grid\" | \"list\"",
                            "default": "list",
                            "description": "Layout of the items, valid values are 'list' and 'grid'."
                        },
                        {
                            "name": "lazy",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if data is loaded and interacted with in lazy manner."
                        },
                        {
                            "name": "pageLinkSize",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "5",
                            "description": "Number of page links to display."
                        },
                        {
                            "name": "paginator",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified as true, enables the pagination."
                        },
                        {
                            "name": "paginatorPosition",
                            "optional": true,
                            "readonly": false,
                            "type": "\"both\" | \"top\" | \"bottom\"",
                            "default": "bottom",
                            "description": "Position of the paginator, options are 'top','bottom' or 'both'."
                        },
                        {
                            "name": "paginatorTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown",
                            "description": "Template of the paginator. It can be customized using the template property using the predefined keys,\n\n- FirstPageLink\n- PrevPageLink\n- PageLinks\n- NextPageLink\n- LastPageLink\n- RowsPerPageDropdown\n- JumpToPageDropdown\n- JumpToPageInput\n- CurrentPageReport"
                        },
                        {
                            "name": "rows",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Number of rows to display per page."
                        },
                        {
                            "name": "rowsPerPageOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "number[]",
                            "default": "",
                            "description": "Array of integer values to display inside rows per page dropdown."
                        },
                        {
                            "name": "sortField",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or a getter function of data to use in sorting by default."
                        },
                        {
                            "name": "sortOrder",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Order to sort the data by default."
                        },
                        {
                            "name": "totalRecords",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Number of total records, defaults to length of value when not defined."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "An array of objects to display."
                        }
                    ],
                    "methods": []
                },
                "DataViewSlots": {
                    "description": "Defines valid slots in DataView component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "empty",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom empty template."
                        },
                        {
                            "name": "footer",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom footer template."
                        },
                        {
                            "name": "grid",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>data</b>: any, // Value of the component\n  \t <b>index</b>: number, // Index of the grid\n  }",
                                    "description": "list slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom list template."
                        },
                        {
                            "name": "header",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header template."
                        },
                        {
                            "name": "list",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>data</b>: any, // Value of the component\n  \t <b>index</b>: number, // Index of the grid\n  }",
                                    "description": "list slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom list template."
                        },
                        {
                            "name": "paginatorend",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom paginator end template."
                        },
                        {
                            "name": "paginatorstart",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom paginator start template."
                        }
                    ]
                }
            }
        }
    },
    "dataviewlayoutoptions": {
        "description": "The helper DataViewLayoutOptions component can be used to switch between the modes however this component is optional and you may use your own UI to switch modes as well.\n\n[Live Demo](https://www.primevue.org/dataview/)",
        "components": {
            "default": {
                "description": "The helper DataViewLayoutOptions component can be used to switch between the modes however this component is optional and you may use your own UI to switch modes as well.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "DataViewLayoutOptionsEmits": {
                    "description": "Defines valid emits in DataViewLayoutOptions component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "string",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        }
                    ]
                },
                "DataViewLayoutOptionsProps": {
                    "description": "Defines valid properties in DataViewLayoutOptions component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Value of the component."
                        }
                    ],
                    "methods": []
                },
                "DataViewLayoutOptionsSlots": {
                    "description": "Defines valid propslotserties in DataViewLayoutOptions component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        }
    },
    "deferredcontent": {
        "description": "DeferredContent postpones the loading the content that is initially not in the viewport until it becomes visible on scroll.\n\n[Live Demo](https://www.primevue.org/deferredcontent/)",
        "components": {
            "default": {
                "description": "DeferredContent postpones the loading the content that is initially not in the viewport until it becomes visible on scroll.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "DeferredContentEmits": {
                    "description": "Defines valid emits in DeferredContent component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "load",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when deferred content is loaded."
                        }
                    ]
                },
                "DeferredContentProps": {
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "DeferredContentSlots": {
                    "description": "Defines valid slots in DeferredContent component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Default content slot."
                        }
                    ]
                }
            }
        }
    },
    "dialog": {
        "description": "Dialog is a container to display content in an overlay window.\n\n[Live Demo](https://www.primevue.org/dialog)",
        "components": {
            "default": {
                "description": "Dialog is a container to display content in an overlay window.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "DialogBreakpoints": {
                    "description": "Custom breakpoint metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "string"
                        }
                    ],
                    "methods": []
                },
                "DialogEmits": {
                    "description": "Defines valid emits in Dialog component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "after-hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke after dialog is hidden."
                        },
                        {
                            "name": "dragend",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Fired when a dialog drag completes."
                        },
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when dialog is hidden."
                        },
                        {
                            "name": "maximize",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Fired when a dialog gets maximized."
                        },
                        {
                            "name": "show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when dialog is shown."
                        },
                        {
                            "name": "unmaximize",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Fired when a dialog gets unmaximized."
                        },
                        {
                            "name": "update:visible",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "boolean",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the visible changes."
                        }
                    ]
                },
                "DialogProps": {
                    "description": "Defines valid properties in Dialog component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "string | HTMLElement",
                            "default": "body",
                            "description": "A valid query selector or an HTMLElement to specify where the dialog gets attached."
                        },
                        {
                            "name": "autoZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to automatically manage layering."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "breakpoints",
                            "optional": true,
                            "readonly": false,
                            "type": "DialogBreakpoints",
                            "default": "",
                            "description": "Object literal to define widths per screen size."
                        },
                        {
                            "name": "closable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Adds a close icon to the header to hide the dialog."
                        },
                        {
                            "name": "closeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "pi pi-times",
                            "description": "Icon to display in the dialog close button."
                        },
                        {
                            "name": "closeOnEscape",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Specifies if pressing escape key should hide the dialog."
                        },
                        {
                            "name": "contentClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the content section."
                        },
                        {
                            "name": "contentProps",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLDivElement to the overlay panel inside the component."
                        },
                        {
                            "name": "contentStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style of the content section."
                        },
                        {
                            "name": "dismissableMask",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Specifies if clicking the modal background should hide the dialog."
                        },
                        {
                            "name": "draggable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Enables dragging to change the position using header."
                        },
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Footer content of the dialog."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Title content of the dialog."
                        },
                        {
                            "name": "keepInViewPort",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Keeps dialog in the viewport when dragging."
                        },
                        {
                            "name": "maximizable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the dialog can be displayed full screen."
                        },
                        {
                            "name": "maximizeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "pi pi-window-maximize",
                            "description": "Icon to display in the dialog maximize button when dialog is not maximized."
                        },
                        {
                            "name": "minX",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0.",
                            "description": "Minimum value for the left coordinate of dialog in dragging."
                        },
                        {
                            "name": "minY",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Minimum value for the top coordinate of dialog in dragging."
                        },
                        {
                            "name": "minimizeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "pi pi-window-minimize",
                            "description": "Icon to display in the dialog maximize button when dialog is maximized."
                        },
                        {
                            "name": "modal",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if background should be blocked when dialog is displayed."
                        },
                        {
                            "name": "position",
                            "optional": true,
                            "readonly": false,
                            "type": "\"center\" | \"left\" | \"top\" | \"bottom\" | \"right\" | \"topleft\" | \"topright\" | \"bottomleft\" | \"bottomright\"",
                            "default": "center",
                            "description": "Position of the dialog."
                        },
                        {
                            "name": "rtl",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled dialog is displayed in RTL direction."
                        },
                        {
                            "name": "showHeader",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show the header or not."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style of the dynamic dialog."
                        },
                        {
                            "name": "visible",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Specifies the visibility of the dialog."
                        }
                    ],
                    "methods": []
                },
                "DialogSlots": {
                    "description": "Defines valid slots in Dialog component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Default content slot."
                        },
                        {
                            "name": "footer",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom footer template."
                        },
                        {
                            "name": "header",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header template."
                        }
                    ]
                }
            }
        }
    },
    "dialogservice-usedialog": {
        "description": "[Live Demo](https://www.primevue.org/dynamicdialog/)",
        "model": {
            "DialogServiceMethods": {
                "description": "Dynamic Dialog components methods.",
                "props": {
                    "description": "",
                    "values": []
                },
                "methods": {
                    "description": "",
                    "values": [
                        {
                            "name": "open",
                            "parameters": [
                                {
                                    "name": "content",
                                    "optional": false,
                                    "type": "any",
                                    "description": "Dynamic component for content template"
                                },
                                {
                                    "name": "options",
                                    "optional": true,
                                    "type": "DynamicDialogOptions",
                                    "description": "DynamicDialog Object"
                                }
                            ],
                            "returnType": "DynamicDialogInstance",
                            "description": "Displays the dialog using the dynamic dialog object options."
                        }
                    ]
                }
            }
        }
    },
    "divider": {
        "description": "Divider is used to separate contents.\n\n[Live Demo](https://primevue.org/divider)",
        "components": {
            "default": {
                "description": "Divider is used to separate contents.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "DividerEmits": {
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "DividerProps": {
                    "description": "Defines valid properties in Divider component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "align",
                            "optional": true,
                            "readonly": false,
                            "type": "\"center\" | \"left\" | \"top\" | \"bottom\" | \"right\"",
                            "default": "",
                            "description": "Alignment of the content."
                        },
                        {
                            "name": "layout",
                            "optional": true,
                            "readonly": false,
                            "type": "\"horizontal\" | \"vertical\"",
                            "default": "horizontal",
                            "description": "Specifies the orientation, valid values are 'horizontal' and 'vertical'."
                        },
                        {
                            "name": "type",
                            "optional": true,
                            "readonly": false,
                            "type": "\"dashed\" | \"dotted\" | \"solid\"",
                            "default": "solid",
                            "description": "Border style type."
                        }
                    ],
                    "methods": []
                },
                "DividerSlots": {
                    "description": "Defines valid slots in Divider slots.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Default content slot."
                        }
                    ]
                }
            }
        }
    },
    "dock": {
        "description": "Dock is a navigation component consisting of menuitems.\n\n[Live Demo](https://www.primevue.org/dock/)",
        "components": {
            "default": {
                "description": "Dock is a navigation component consisting of menuitems.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "DockEmits": {
                    "description": "Defines valid emits in Dock component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "blur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component loses focus."
                        },
                        {
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component receives focus."
                        }
                    ]
                },
                "DockProps": {
                    "description": "Defines valid properties in Dock component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "aria-label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes a string value that labels the component."
                        },
                        {
                            "name": "aria-labelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "class",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the element."
                        },
                        {
                            "name": "exact",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to apply 'router-link-active-exact' class if route exactly matches the item path."
                        },
                        {
                            "name": "menuId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Unique identifier of the menu."
                        },
                        {
                            "name": "model",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuItem[]",
                            "default": "",
                            "description": "MenuModel instance to define the action items."
                        },
                        {
                            "name": "position",
                            "optional": true,
                            "readonly": false,
                            "type": "\"left\" | \"top\" | \"bottom\" | \"right\"",
                            "default": "bottom",
                            "description": "Position of element."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the element."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "tooltipOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "DockTooltipOptions",
                            "default": "",
                            "description": "Whether to display the tooltip on items. The modifiers of Tooltip can be used like an object in it. Valid keys are 'event' and 'position'."
                        }
                    ],
                    "methods": []
                },
                "DockSlots": {
                    "description": "Defines valid slots in Dock component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "icon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>item</b>: MenuItem, // Custom content for icon.\n  }",
                                    "description": "icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom icon content."
                        },
                        {
                            "name": "item",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>index</b>: number, // Index of the menuitem\n  \t <b>item</b>: MenuItem, // Custom content for item.\n  }",
                                    "description": "item slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom item content."
                        }
                    ]
                },
                "DockTooltipOptions": {
                    "description": "Defines tooltip options",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "event",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | \"focus\" | \"hover\"",
                            "default": "",
                            "description": "Event to show the tooltip, valid values are hover and focus."
                        },
                        {
                            "name": "position",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | \"left\" | \"top\" | \"bottom\" | \"right\"",
                            "default": "bottom",
                            "description": "Position of element."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                }
            }
        }
    },
    "dropdown": {
        "description": "Dropdown also known as Select, is used to choose an item from a collection of options.\n\n[Live Demo](https://www.primevue.org/dropdown/)",
        "components": {
            "default": {
                "description": "Dropdown also known as Select, is used to choose an item from a collection of options.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "DropdownChangeEvent": {
                    "description": "Custom change event.",
                    "relatedProp": "DropdownEmits.change",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Selected option value"
                        }
                    ],
                    "methods": []
                },
                "DropdownEmits": {
                    "description": "Defines valid emits in Dropdown component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "before-hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke before the overlay is hidden."
                        },
                        {
                            "name": "before-show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke before the overlay is shown."
                        },
                        {
                            "name": "blur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component loses focus."
                        },
                        {
                            "name": "change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DropdownChangeEvent",
                                    "description": "Custom change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on value change."
                        },
                        {
                            "name": "filter",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DropdownFilterEvent",
                                    "description": "Custom filter event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on filter input."
                        },
                        {
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component receives focus."
                        },
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when the overlay is hidden."
                        },
                        {
                            "name": "show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when the overlay is shown."
                        },
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        }
                    ]
                },
                "DropdownFilterEvent": {
                    "description": "Custom filter event.",
                    "relatedProp": "DropdownEmits.filter",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Filter value"
                        }
                    ],
                    "methods": []
                },
                "DropdownProps": {
                    "description": "Defines valid properties in Dropdown component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "string | HTMLElement",
                            "default": "body",
                            "description": "A valid query selector or an HTMLElement to specify where the overlay gets attached."
                        },
                        {
                            "name": "aria-label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a string value that labels an interactive element."
                        },
                        {
                            "name": "aria-labelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "autoFilterFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to focus on the filter element when the overlay panel is shown."
                        },
                        {
                            "name": "autoOptionFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to focus on the first visible or selected element when the overlay panel is shown."
                        },
                        {
                            "name": "clearIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "pi pi-times",
                            "description": "Icon to display in clear button."
                        },
                        {
                            "name": "clearIconProps",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLElement to the clear icon inside the component."
                        },
                        {
                            "name": "dataKey",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "A property to uniquely identify an option."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "dropdownIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "pi pi-chevron-down",
                            "description": "Icon to display in the dropdown."
                        },
                        {
                            "name": "editable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, custom value instead of predefined options can be entered using the editable input field."
                        },
                        {
                            "name": "emptyFilterMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "No results found",
                            "description": "Text to display when filtering does not return any results. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "emptyMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "No results foun",
                            "description": "Text to display when there are no options available. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "emptySelectionMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "No selected item",
                            "description": "Text to be displayed in hidden accessible field when any option is not selected. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "filter",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified, displays a filter input at header."
                        },
                        {
                            "name": "filterFields",
                            "optional": true,
                            "readonly": false,
                            "type": "string[]",
                            "default": "",
                            "description": "Fields used when filtering the options, defaults to optionLabel."
                        },
                        {
                            "name": "filterIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "pi pi-search",
                            "description": "Icon to display in filter input."
                        },
                        {
                            "name": "filterInputProps",
                            "optional": true,
                            "readonly": false,
                            "type": "InputHTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLInputElement to the filter input inside the component."
                        },
                        {
                            "name": "filterLocale",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Locale to use in filtering. The default locale is the host environment's current locale."
                        },
                        {
                            "name": "filterMatchMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"endsWith\" | \"startsWith\" | \"contains\"",
                            "default": "contains",
                            "description": "Defines the filtering algorithm to use when searching the options."
                        },
                        {
                            "name": "filterMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "'{0} results are available'",
                            "description": "Text to be displayed in hidden accessible field when filtering returns any results. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "filterPlaceholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Placeholder text to show when filter input is empty."
                        },
                        {
                            "name": "inputClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Style class of the input field."
                        },
                        {
                            "name": "inputId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "inputProps",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLAttributes | InputHTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLInputElement/HTMLSpanElement to the focusable input element inside the component."
                        },
                        {
                            "name": "inputStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Inline style of the input field."
                        },
                        {
                            "name": "loading",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the dropdown is in loading state."
                        },
                        {
                            "name": "loadingIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "pi pi-spinner pi-spin",
                            "description": "Icon to display in loading state."
                        },
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Value of the component."
                        },
                        {
                            "name": "optionDisabled",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the disabled flag of an option, defaults to false when not defined."
                        },
                        {
                            "name": "optionGroupChildren",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function that refers to the children options of option group."
                        },
                        {
                            "name": "optionGroupLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the label of an option group."
                        },
                        {
                            "name": "optionLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the label of an option."
                        },
                        {
                            "name": "optionValue",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the value of an option, defaults to the option itself when not defined."
                        },
                        {
                            "name": "options",
                            "optional": true,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "An array of selectitems to display as the available options."
                        },
                        {
                            "name": "panelClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Style class of the overlay panel."
                        },
                        {
                            "name": "panelProps",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLDivElement to the overlay panel inside the component."
                        },
                        {
                            "name": "panelStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Inline style of the overlay panel."
                        },
                        {
                            "name": "placeholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Default text to display when no option is selected."
                        },
                        {
                            "name": "resetFilterOnHide",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Clears the filter value when hiding the dropdown."
                        },
                        {
                            "name": "scrollHeight",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "200px",
                            "description": "Height of the viewport, a scrollbar is defined if height of list exceeds this value."
                        },
                        {
                            "name": "selectOnFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, the focused option is selected."
                        },
                        {
                            "name": "selectionMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "'{0} items selected'",
                            "description": "Text to be displayed in hidden accessible field when options are selected. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "showClear",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, a clear icon is displayed to clear the value."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "virtualScrollerOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "VirtualScrollerProps",
                            "default": "",
                            "description": "Whether to use the virtualScroller feature. The properties of VirtualScroller component can be used like an object in it."
                        }
                    ],
                    "methods": []
                },
                "DropdownSlots": {
                    "description": "Defines valid slots in Dropdown component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "content",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>items</b>: any, // An array of objects to display for virtualscroller\n  \t <b>styleClass</b>: string, // Style class of the component\n  \t <b>contentRef(el: any)</b>: void, // Referance of the content\n  \t <b>getItemOptions(index: number)</b>: VirtualScrollerItemOptions, // Options of the items\n  }",
                                    "description": "content slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content template."
                        },
                        {
                            "name": "empty",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom empty template."
                        },
                        {
                            "name": "emptyfilter",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom empty filter template."
                        },
                        {
                            "name": "footer",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>options</b>: any, // Displayed options\n  \t <b>value</b>: any, // Value of the component\n  }",
                                    "description": "footer slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom footer template of panel."
                        },
                        {
                            "name": "header",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>options</b>: any, // Displayed options\n  \t <b>value</b>: any, // Value of the component\n  }",
                                    "description": "header slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header template of panel."
                        },
                        {
                            "name": "indicator",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom indicator template."
                        },
                        {
                            "name": "loader",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>options</b>: any, // Options of the loader items for virtualscroller\n  }",
                                    "description": "loader slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom loader template."
                        },
                        {
                            "name": "option",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>index</b>: number, // Index of the option\n  \t <b>option</b>: any, // Option instance\n  }",
                                    "description": "option slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom option template."
                        },
                        {
                            "name": "optiongroup",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>index</b>: number, // Index of the option\n  \t <b>option</b>: any, // Option instance\n  }",
                                    "description": "option group slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom option group template."
                        },
                        {
                            "name": "value",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>placeholder</b>: string, // Placeholder prop value\n  \t <b>value</b>: any, // Value of the component\n  }",
                                    "description": "value slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom value template."
                        }
                    ]
                }
            }
        }
    },
    "dynamicdialog": {
        "description": "DynamicDialogs can be created dynamically with any component as the content using a DialogService.\n\n[Live Demo](https://primevue.org/dynamicdialog)",
        "components": {
            "default": {
                "description": "DynamicDialogs can be created dynamically with any component as the content using a DialogService.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "DynamicDialogEmits": {
                    "description": "Defines valid emits in DynamicDialog component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "DynamicDialogProps": {
                    "description": "Defines valid properties in DynamicDialog component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "DynamicDialogSlots": {
                    "description": "Defines valid slots in DynamicDialog component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        }
    },
    "dynamicdialogoptions": {
        "description": "[Live Demo](https://www.primevue.org/dynamicdialog/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "DynamicDialogCloseOptions": {
                    "description": "Dynamic Dialog close method options.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "data",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Custom data object"
                        },
                        {
                            "name": "type",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | \"config-close\" | \"dialog-close\"",
                            "default": "",
                            "description": "Close type"
                        }
                    ],
                    "methods": []
                },
                "DynamicDialogInstance": {
                    "description": "Custom Dynamic Dialog options.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "close",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "content",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Dynamic component for content template"
                        },
                        {
                            "name": "data",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Custom data object"
                        },
                        {
                            "name": "options",
                            "optional": false,
                            "readonly": false,
                            "type": "DynamicDialogOptions",
                            "default": "",
                            "description": "Instance options"
                        }
                    ],
                    "methods": []
                },
                "DynamicDialogOptions": {
                    "description": "Custom Dynamic Dialog options.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "data",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Custom data object"
                        },
                        {
                            "name": "props",
                            "optional": true,
                            "readonly": false,
                            "type": "DialogProps",
                            "default": "",
                            "description": "Dialog Props"
                        },
                        {
                            "name": "templates",
                            "optional": true,
                            "readonly": false,
                            "type": "DynamicDialogTemplates",
                            "default": "",
                            "description": "Dialog Slots"
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [
                        {
                            "name": "onClose",
                            "parameters": [
                                {
                                    "name": "options",
                                    "optional": true,
                                    "type": "DynamicDialogCloseOptions"
                                }
                            ],
                            "returnType": "void",
                            "description": "Closes the dialog."
                        }
                    ]
                },
                "DynamicDialogTemplates": {
                    "description": "Custom dialog templates.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Custom footer template."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Custom header template."
                        }
                    ],
                    "methods": []
                }
            }
        }
    },
    "editor": {
        "description": "Editor groups a collection of contents in tabs.\n\n[Live Demo](https://www.primevue.org/editor/)",
        "components": {
            "default": {
                "description": "Editor groups a collection of contents in tabs.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "EditorEmits": {
                    "description": "Defines valid emits in Editor component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "load",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "EditorLoadEvent",
                                    "description": "Custom load event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the quill modules are loaded."
                        },
                        {
                            "name": "selection-change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "EditorSelectionChangeEvent",
                                    "description": "Custom selection change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when selection of the text changes."
                        },
                        {
                            "name": "text-change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "EditorTextChangeEvent",
                                    "description": "Custom text change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when text of editor changes."
                        },
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "string",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        }
                    ]
                },
                "EditorLoadEvent": {
                    "description": "Custom load event.",
                    "relatedProp": "EditorEmits.load",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Text editor instance."
                        }
                    ],
                    "methods": []
                },
                "EditorProps": {
                    "description": "Defines valid properties in Editor component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "editorStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the container."
                        },
                        {
                            "name": "formats",
                            "optional": true,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Whitelist of formats to display, see [here](https://quilljs.com/docs/formats/) for available options."
                        },
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Value of the content."
                        },
                        {
                            "name": "modules",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Modules configuration, see [here](https://quilljs.com/docs/modules/) for available options."
                        },
                        {
                            "name": "placeholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Placeholder text to show when editor is empty."
                        },
                        {
                            "name": "readonly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to instantiate the editor to readonly mode."
                        }
                    ],
                    "methods": []
                },
                "EditorSelectionChangeEvent": {
                    "description": "Custom selection change event.",
                    "relatedProp": "EditorEmits['selection-change']",
                    "props": [
                        {
                            "name": "htmlValue",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current value as html."
                        },
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Text editor instance."
                        },
                        {
                            "name": "oldRange",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Representation of the previous selection boundaries."
                        },
                        {
                            "name": "range",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Representation of the selection boundaries."
                        },
                        {
                            "name": "source",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Source of change. Will be either 'user' or 'api'."
                        },
                        {
                            "name": "textValue",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Current value as text."
                        }
                    ],
                    "methods": []
                },
                "EditorSlots": {
                    "description": "Defines valid slots in Editor slots.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "toolbar",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": []
                },
                "EditorTextChangeEvent": {
                    "description": "Custom text change event.",
                    "relatedProp": "EditorEmits['text-change']",
                    "props": [
                        {
                            "name": "delta",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Representation of the change."
                        },
                        {
                            "name": "htmlValue",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current value as html."
                        },
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Text editor instance."
                        },
                        {
                            "name": "source",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Source of change. Will be either 'user' or 'api'."
                        },
                        {
                            "name": "textValue",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Current value as text."
                        }
                    ],
                    "methods": []
                }
            }
        }
    },
    "fieldset": {
        "description": "Fieldset is a grouping component with the optional content toggle feature.\n\n[Live Demo](https://www.primevue.org/fieldset/)",
        "components": {
            "default": {
                "description": "Fieldset is a grouping component with the optional content toggle feature.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "FieldsetEmits": {
                    "description": "Defines valid emits in Fildset component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "toggle",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FieldsetToggleEvent",
                                    "description": "Custom toggle event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a tab gets expanded or collapsed."
                        },
                        {
                            "name": "update:collapsed",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "boolean",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the collapsed changes."
                        }
                    ]
                },
                "FieldsetProps": {
                    "description": "Defines valid properties in Fieldset component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "collapsed",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines the default visibility state of the content."
                        },
                        {
                            "name": "legend",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Header text of the fieldset."
                        },
                        {
                            "name": "toggleButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "AnchorHTMLAttributes",
                            "default": "",
                            "description": "Uses to pass the custom value to read for the AnchorHTMLAttributes inside the component."
                        },
                        {
                            "name": "toggleable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified, content can toggled by clicking the legend."
                        }
                    ],
                    "methods": []
                },
                "FieldsetSlots": {
                    "description": "Defines valid slots in Fieldset slots.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "default",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "legend",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": []
                },
                "FieldsetToggleEvent": {
                    "description": "Custom toggle event.",
                    "relatedProp": "FieldsetEmits.toggle",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Collapsed state as a boolean"
                        }
                    ],
                    "methods": []
                }
            }
        }
    },
    "fileupload": {
        "description": "FileUpload is an advanced uploader with dragdrop support, multi file uploads, auto uploading, progress tracking and validations.\n\n[Live Demo](https://www.primevue.org/fileupload/)",
        "components": {
            "default": {
                "description": "FileUpload is an advanced uploader with dragdrop support, multi file uploads, auto uploading, progress tracking and validations.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "FileUploadBeforeSendEvent": {
                    "description": "Custom before send event.",
                    "relatedProp": "FileUploadEmits['before-send']",
                    "props": [
                        {
                            "name": "formData",
                            "optional": false,
                            "readonly": false,
                            "type": "FormData",
                            "default": "",
                            "description": "FormData object."
                        },
                        {
                            "name": "xhr",
                            "optional": false,
                            "readonly": false,
                            "type": "XMLHttpRequest",
                            "default": "",
                            "description": "XmlHttpRequest instance."
                        }
                    ],
                    "methods": []
                },
                "FileUploadBeforeUploadEvent": {
                    "description": "Custom before upload event.",
                    "relatedProp": "FileUploadEmits['before-upload']",
                    "props": [
                        {
                            "name": "formData",
                            "optional": false,
                            "readonly": false,
                            "type": "FormData",
                            "default": "",
                            "description": "FormData object."
                        },
                        {
                            "name": "xhr",
                            "optional": false,
                            "readonly": false,
                            "type": "XMLHttpRequest",
                            "default": "",
                            "description": "XmlHttpRequest instance."
                        }
                    ],
                    "methods": []
                },
                "FileUploadEmits": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "before-send",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FileUploadBeforeSendEvent",
                                    "description": "Custom before send event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke before file send begins to customize the request such as adding headers."
                        },
                        {
                            "name": "before-upload",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FileUploadBeforeUploadEvent",
                                    "description": "Custom before upload event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke before file upload begins to customize the request such as post parameters before the files."
                        },
                        {
                            "name": "clear",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when files in queue are removed without uploading."
                        },
                        {
                            "name": "error",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FileUploadErrorEvent",
                                    "description": "Custom error event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke if file upload fails."
                        },
                        {
                            "name": "progress",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FileUploadProgressEvent",
                                    "description": "Custom progress event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when files are being uploaded."
                        },
                        {
                            "name": "remove",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FileUploadRemoveEvent",
                                    "description": "Custom remove event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a singe file is removed from the list."
                        },
                        {
                            "name": "removeUploadedFile",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FileUploadRemoveUploadedFile",
                                    "description": "Custom uploaded file remove event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a single uploaded file is removed from the uploaded file list."
                        },
                        {
                            "name": "select",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FileUploadSelectEvent",
                                    "description": "Custom select event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when files are selected."
                        },
                        {
                            "name": "upload",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FileUploadUploadEvent",
                                    "description": "Custom upload event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when file upload is complete."
                        },
                        {
                            "name": "uploader",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FileUploadUploaderEvent",
                                    "description": "Custom uploader event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke to implement a custom upload."
                        }
                    ]
                },
                "FileUploadErrorEvent": {
                    "description": "Custom error event.",
                    "relatedProp": "FileUploadEmits.error",
                    "props": [
                        {
                            "name": "files",
                            "optional": false,
                            "readonly": false,
                            "type": "File | File[]",
                            "default": "",
                            "description": "Files that are not uploaded."
                        },
                        {
                            "name": "xhr",
                            "optional": false,
                            "readonly": false,
                            "type": "XMLHttpRequest",
                            "default": "",
                            "description": "XmlHttpRequest instance."
                        }
                    ],
                    "methods": []
                },
                "FileUploadProgressEvent": {
                    "description": "Custom progress event.",
                    "relatedProp": "FileUploadEmits.progress",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        },
                        {
                            "name": "progress",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Calculated progress value."
                        }
                    ],
                    "methods": []
                },
                "FileUploadProps": {
                    "description": "Defines valid properties in FileUpload component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "accept",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Pattern to restrict the allowed file types such as 'image/*'."
                        },
                        {
                            "name": "auto",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, upload begins automatically after selection is completed."
                        },
                        {
                            "name": "cancelIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "pi pi-fw pi-times",
                            "description": "Icon of the cancel button."
                        },
                        {
                            "name": "cancelLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "Cancel",
                            "description": "Label of the cancel button. Defaults to PrimeVue Locale configuration."
                        },
                        {
                            "name": "chooseIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "pi pi-fw pi-plus",
                            "description": "Icon of the choose button."
                        },
                        {
                            "name": "chooseLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Label of the choose button. Defaults to PrimeVue Locale configuration."
                        },
                        {
                            "name": "class",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "customUpload",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether to use the default upload or a manual implementation defined in uploadHandler callback. Defaults to PrimeVue Locale configuration."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Disables the upload functionality."
                        },
                        {
                            "name": "fileLimit",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Maximum number of files that can be uploaded."
                        },
                        {
                            "name": "invalidFileLimitMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "Maximum number of files to be uploaded is {0.}",
                            "description": "Message to display when number of files to be uploaded exceeeds the limit."
                        },
                        {
                            "name": "invalidFileSizeMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ": Invalid file size, file size should be smaller than {1.}",
                            "description": "Message of the invalid fize size."
                        },
                        {
                            "name": "invalidFileTypeMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "'{0}: Invalid file type.'",
                            "description": "Message of the invalid fize type."
                        },
                        {
                            "name": "maxFileSize",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Maximum file size allowed in bytes."
                        },
                        {
                            "name": "mode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"basic\" | \"advanced\"",
                            "default": "advanced",
                            "description": "Defines the UI of the component, possible values are 'advanced' and 'basic'."
                        },
                        {
                            "name": "multiple",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Used to select multiple files at once from file dialog."
                        },
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Name of the request parameter to identify the files at backend."
                        },
                        {
                            "name": "previewWidth",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "50",
                            "description": "Width of the image thumbnail in pixels."
                        },
                        {
                            "name": "showCancelButton",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show the cancel button."
                        },
                        {
                            "name": "showUploadButton",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show the upload button."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "uploadIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "pi pi-fw pi-upload",
                            "description": "Icon of the upload button."
                        },
                        {
                            "name": "uploadLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Label of the upload button. Defaults to PrimeVue Locale configuration."
                        },
                        {
                            "name": "url",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Remote url to upload the files."
                        },
                        {
                            "name": "withCredentials",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Cross-site Access-Control requests should be made using credentials such as cookies, authorization headers or TLS client certificates."
                        }
                    ],
                    "methods": []
                },
                "FileUploadRemoveEvent": {
                    "description": "Custom remove event.",
                    "relatedProp": "FileUploadEmits.remove",
                    "props": [
                        {
                            "name": "file",
                            "optional": false,
                            "readonly": false,
                            "type": "File",
                            "default": "",
                            "description": "Removed file."
                        },
                        {
                            "name": "files",
                            "optional": false,
                            "readonly": false,
                            "type": "File[]",
                            "default": "",
                            "description": "Remaining files to be uploaded."
                        }
                    ],
                    "methods": []
                },
                "FileUploadRemoveUploadedFile": {
                    "description": "Custom remove upload file event.",
                    "relatedProp": "FileUploadEmits['remove-uploaded-file']",
                    "props": [
                        {
                            "name": "file",
                            "optional": false,
                            "readonly": false,
                            "type": "File",
                            "default": "",
                            "description": "Removed file."
                        },
                        {
                            "name": "files",
                            "optional": false,
                            "readonly": false,
                            "type": "File[]",
                            "default": "",
                            "description": "Remaining files to be uploaded."
                        }
                    ],
                    "methods": []
                },
                "FileUploadSelectEvent": {
                    "description": "Custom select event.",
                    "relatedProp": "FileUploadEmits.select",
                    "props": [
                        {
                            "name": "files",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "List of selected files."
                        },
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        }
                    ],
                    "methods": []
                },
                "FileUploadSlots": {
                    "description": "Defines valid slots in FileUpload slots.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "content",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>files</b>: File, // Files to upload.\n  \t <b>messages</b>: undefined, // Status messages about upload process.\n  \t <b>progress</b>: number, // Uploaded progress as number.\n  \t <b>uploadedFiles</b>: File, // Uploaded files.\n  \t <b>removeFileCallback(index: number)</b>: void, // Function to remove a file.\n  \t <b>removeUploadedFileCallback(index: number)</b>: void, // Function to remove an uploaded file.\n  }"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom uploaded content template."
                        },
                        {
                            "name": "empty",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content when there is no selected file."
                        },
                        {
                            "name": "header",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>files</b>: File, // Files to upload.\n  \t <b>uploadedFiles</b>: File, // Uploaded files.\n  \t <b>chooseCallback()</b>: void, // Choose function\n  \t <b>clearCallback()</b>: void, // Clear function\n  \t <b>uploadCallback()</b>: void, // Upload function\n  }"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header content template."
                        }
                    ]
                },
                "FileUploadUploadEvent": {
                    "description": "Custom upload event.",
                    "relatedProp": "FileUploadEmits.upload",
                    "props": [
                        {
                            "name": "files",
                            "optional": false,
                            "readonly": false,
                            "type": "File | File[]",
                            "default": "",
                            "description": "Files that are not uploaded."
                        },
                        {
                            "name": "xhr",
                            "optional": false,
                            "readonly": false,
                            "type": "XMLHttpRequest",
                            "default": "",
                            "description": "XmlHttpRequest instance."
                        }
                    ],
                    "methods": []
                },
                "FileUploadUploaderEvent": {
                    "description": "Custom uploader event.",
                    "relatedProp": "FileUploadEmits.uploader",
                    "props": [
                        {
                            "name": "files",
                            "optional": false,
                            "readonly": false,
                            "type": "File | File[]",
                            "default": "",
                            "description": "List of selected files."
                        }
                    ],
                    "methods": []
                }
            }
        }
    },
    "focustrap": {
        "description": "Focus Trap keeps focus within a certain DOM element while tabbing.\n\n[Live Demo](https://primevue.org/focustrap)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "FocusTrapDirectiveBinding": {
                    "description": "Binding of FocusTrap directive.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "FocusTrapOptions",
                            "default": "",
                            "description": "Value of the FocusTrap."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "Omit<DirectiveBinding, \"modifiers\" | \"value\">"
                },
                "FocusTrapOptions": {
                    "description": "Defines options of FocusTrap.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the directive should be disabled."
                        }
                    ],
                    "methods": []
                }
            }
        }
    },
    "fullcalendar/FullCalendar": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "FullCalendarProps": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "events",
                            "optional": true,
                            "readonly": false,
                            "type": "any[]",
                            "default": ""
                        },
                        {
                            "name": "options",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        }
                    ],
                    "methods": []
                },
                "FullCalendarSlots": {
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "FullCalendarEmits": {
                    "values": "{}"
                }
            }
        }
    },
    "galleria": {
        "description": "Galleria is an advanced content gallery component.\n\n[Live Demo](https://www.primevue.org/galleria/)",
        "components": {
            "default": {
                "description": "Galleria is an advanced content gallery component.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "GalleriaEmits": {
                    "description": "Defines valid emits in Galleria component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:activeIndex",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "number",
                                    "description": "Index of new active item."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the active index changes."
                        },
                        {
                            "name": "update:visible",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "boolean",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the visible changes."
                        }
                    ]
                },
                "GalleriaProps": {
                    "description": "Defines valid properties in Galleria component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "activeIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Index of the first item."
                        },
                        {
                            "name": "autoPlay",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Items are displayed with a slideshow in autoPlay mode."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "changeItemOnIndicatorHover",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, item is changed on indicator hover."
                        },
                        {
                            "name": "circular",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if scrolling would be infinite."
                        },
                        {
                            "name": "containerClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the component on fullscreen mode. Otherwise, the 'class' property can be used."
                        },
                        {
                            "name": "containerProps",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLDivElement to the container element on fullscreen mode."
                        },
                        {
                            "name": "containerStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the component on fullscreen mode. Otherwise, the 'style' property can be used."
                        },
                        {
                            "name": "fullScreen",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display the component on fullscreen."
                        },
                        {
                            "name": "id",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Unique identifier of the element."
                        },
                        {
                            "name": "indicatorsPosition",
                            "optional": true,
                            "readonly": false,
                            "type": "\"left\" | \"top\" | \"bottom\" | \"right\"",
                            "default": "bottom",
                            "description": "Position of indicators."
                        },
                        {
                            "name": "maskClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the mask on fullscreen mode."
                        },
                        {
                            "name": "nextButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLButtonElement to the next navigation button."
                        },
                        {
                            "name": "numVisible",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "3",
                            "description": "Number of items per page."
                        },
                        {
                            "name": "prevButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLButtonElement to the previous navigation button."
                        },
                        {
                            "name": "responsiveOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaResponsiveOptions[]",
                            "default": "",
                            "description": "An array of options for responsive design."
                        },
                        {
                            "name": "showIndicators",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display indicator container."
                        },
                        {
                            "name": "showIndicatorsOnItem",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, indicator container is displayed on item container."
                        },
                        {
                            "name": "showItemNavigators",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display navigation buttons in item section."
                        },
                        {
                            "name": "showItemNavigatorsOnHover",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display navigation buttons on item hover."
                        },
                        {
                            "name": "showThumbnailNavigators",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to display navigation buttons in thumbnail container."
                        },
                        {
                            "name": "showThumbnails",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to display thumbnail container."
                        },
                        {
                            "name": "thumbnailsPosition",
                            "optional": true,
                            "readonly": false,
                            "type": "\"left\" | \"top\" | \"bottom\" | \"right\"",
                            "default": "bottom",
                            "description": "Position of thumbnails."
                        },
                        {
                            "name": "transitionInterval",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "4000",
                            "description": "Time in milliseconds to scroll items."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "An array of objects to display."
                        },
                        {
                            "name": "verticalThumbnailViewPortHeight",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "300px",
                            "description": "Height of the viewport in vertical thumbnail."
                        },
                        {
                            "name": "visible",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Specifies the visibility of the mask on fullscreen mode."
                        }
                    ],
                    "methods": []
                },
                "GalleriaResponsiveOptions": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "breakpoint",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Breakpoint for responsive mode. Exp;"
                        },
                        {
                            "name": "numVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "The number of visible items on breakpoint."
                        }
                    ],
                    "methods": []
                },
                "GalleriaSlots": {
                    "description": "Defines valid slots in Galleria slots.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "caption",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>item</b>: any, // Item instance\n  }",
                                    "description": "caption slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom caption template."
                        },
                        {
                            "name": "footer",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom footer template."
                        },
                        {
                            "name": "header",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header template."
                        },
                        {
                            "name": "indicator",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>index</b>: number, // Index of the indicator item\n  }",
                                    "description": "indicator slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom indicator template."
                        },
                        {
                            "name": "item",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>item</b>: any, // Item instance\n  }",
                                    "description": "item slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom item template."
                        },
                        {
                            "name": "thumbnail",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>item</b>: any, // Item instance\n  }",
                                    "description": "thumbnail slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom thumbnail template."
                        }
                    ]
                }
            }
        }
    },
    "image": {
        "description": "Displays an image with preview and tranformation options. For multiple image, see Galleria.\n\n[Live Demo](https://www.primevue.org/image/)",
        "components": {
            "default": {
                "description": "Displays an image with preview and tranformation options. For multiple image, see Galleria.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "error",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Triggered when an error occurs while loading an image file."
                        },
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Triggered when the preview overlay is hidden."
                        },
                        {
                            "name": "show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Triggered when the preview overlay is shown."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ImageEmits": {
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "ImageProps": {
                    "description": "Defines valid properties in Image component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "imageClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the image element."
                        },
                        {
                            "name": "imageStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the image element."
                        },
                        {
                            "name": "preview",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Controls the preview functionality."
                        }
                    ],
                    "methods": []
                },
                "ImageSlots": {
                    "description": "Defines valid slots in Image slots.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "indicator",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom indicator template."
                        }
                    ]
                }
            }
        }
    },
    "inlinemessage": {
        "description": "InlineMessage component is useful in cases where a single message needs to be displayed related to an element such as forms. It has one property, severity of the message.\n\n[Live Demo](https://www.primevue.org/inlinemessage/)",
        "components": {
            "default": {
                "description": "InlineMessage component is useful in cases where a single message needs to be displayed related to an element such as forms. It has one property, severity of the message.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InlineMessageEmits": {
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "InlineMessageProps": {
                    "description": "Defines valid properties in InlineMessage component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "severity",
                            "optional": true,
                            "readonly": false,
                            "type": "\"error\" | \"success\" | \"info\" | \"warn\"",
                            "default": "info",
                            "description": "Severity level of the message."
                        }
                    ],
                    "methods": []
                },
                "InlineMessageSlots": {
                    "description": "Defines valid slots in InlineMessage slots.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Default custom slot."
                        }
                    ]
                }
            }
        }
    },
    "inplace": {
        "description": "Inplace provides an easy to do editing and display at the same time where clicking the output displays the actual content.\n\n[Live Demo](https://www.primevue.org/inplace)",
        "components": {
            "default": {
                "description": "Inplace provides an easy to do editing and display at the same time where clicking the output displays the actual content.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InplaceEmits": {
                    "description": "Defines valid emits in Inplace component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "close",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when inplace is closed."
                        },
                        {
                            "name": "open",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when inplace is opened."
                        },
                        {
                            "name": "update:active",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "boolean",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the active changes."
                        }
                    ]
                },
                "InplaceProps": {
                    "description": "Defines valid properties in Inplace component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "active",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the content is displayed or not."
                        },
                        {
                            "name": "closable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Displays a button to switch back to display mode."
                        },
                        {
                            "name": "closeButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLButtonElement to the close button."
                        },
                        {
                            "name": "closeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "pi pi-times",
                            "description": "Icon to display in the close button."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the element should be disabled."
                        },
                        {
                            "name": "displayProps",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLDivElement to display container."
                        }
                    ],
                    "methods": []
                },
                "InplaceSlots": {
                    "description": "Defines valid slots in Inplace component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "content",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content template."
                        },
                        {
                            "name": "display",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom display template."
                        }
                    ]
                }
            }
        }
    },
    "inputmask": {
        "description": "InputMask component is used to enter input in a certain format such as numeric, date, currency, email and phone.\n\n[Live Demo](https://www.primevue.org/inputmask/)",
        "components": {
            "default": {
                "description": "InputMask component is used to enter input in a certain format such as numeric, date, currency, email and phone.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InputMaskEmits": {
                    "description": "Defines valid emits in InputMask component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "complete",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "keypress",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "paste",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [
                        {
                            "name": "blur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component loses focus."
                        },
                        {
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component receives focus."
                        },
                        {
                            "name": "keydown",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a key is pressed."
                        },
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "string",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        }
                    ]
                },
                "InputMaskProps": {
                    "description": "Defines valid properties in InputMask component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "autoClear",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Clears the incomplete value on blur."
                        },
                        {
                            "name": "mask",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Mask pattern."
                        },
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Value of the component."
                        },
                        {
                            "name": "readonly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the items are clickable or not."
                        },
                        {
                            "name": "slotChar",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "_",
                            "description": "Placeholder character in mask, default is underscore."
                        },
                        {
                            "name": "unmask",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if model sets the raw unmasked value to bound value or the formatted mask value."
                        }
                    ],
                    "methods": []
                },
                "InputMaskSlots": {
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        }
    },
    "inputnumber": {
        "description": "InputNumber is an input component to provide numerical input.\n\n[Live Demo](https://www.primevue.org/inputnumber/)",
        "components": {
            "default": {
                "description": "InputNumber is an input component to provide numerical input.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InputNumberBlurEvent": {
                    "description": "Custom blur event.",
                    "relatedProp": "InputNumberEmits.blur",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Input value"
                        }
                    ],
                    "methods": []
                },
                "InputNumberEmits": {
                    "description": "Defines valid emits in InputNumber component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "blur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "InputNumberBlurEvent",
                                    "description": "Blur event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on blur of input field."
                        },
                        {
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Focus event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on focus of input field."
                        },
                        {
                            "name": "input",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "InputNumberInputEvent",
                                    "description": "Custom input event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the value is entered."
                        },
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "number",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        }
                    ]
                },
                "InputNumberInputEvent": {
                    "description": "Custom input event.",
                    "relatedProp": "InputNumberEmits.input",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | string | number",
                            "default": "",
                            "description": "New value"
                        }
                    ],
                    "methods": []
                },
                "InputNumberProps": {
                    "description": "Defines valid properties in InputNumber component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "allowEmpty",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Determines whether the input field is empty."
                        },
                        {
                            "name": "aria-label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes a string value that labels the component."
                        },
                        {
                            "name": "aria-labelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "buttonLayout",
                            "optional": true,
                            "readonly": false,
                            "type": "\"horizontal\" | \"vertical\" | \"stacked\"",
                            "default": "stacked",
                            "description": "Layout of the buttons."
                        },
                        {
                            "name": "currency",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "The currency to use in currency formatting. Possible values are the [ISO 4217 currency codes](https://www.six-group.com/en/products-services/financial-information/data-standards.html#scrollTo=maintenance-agency), such as 'USD' for the US dollar, 'EUR' for the euro, or 'CNY' for the Chinese RMB.\nThere is no default value; if the style is 'currency', the currency property must be provided."
                        },
                        {
                            "name": "currencyDisplay",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "symbol",
                            "description": "How to display the currency in currency formatting. Possible values are 'symbol' to use a localized currency symbol such as €, 'code' to use the ISO currency code, 'name' to use a localized currency name such as 'dollar'."
                        },
                        {
                            "name": "decrementButtonClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the decrement button."
                        },
                        {
                            "name": "decrementButtonIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "pi pi-angle-down",
                            "description": "Style class of the decrement button."
                        },
                        {
                            "name": "decrementButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLButtonElement to decrement button inside the component."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "format",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to format the value."
                        },
                        {
                            "name": "highlightOnFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Highlights automatically the input value."
                        },
                        {
                            "name": "incrementButtonClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the increment button."
                        },
                        {
                            "name": "incrementButtonIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "pi pi-angle-up",
                            "description": "Style class of the increment button."
                        },
                        {
                            "name": "incrementButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLButtonElement to increment button inside the component."
                        },
                        {
                            "name": "inputClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Style class of the input field."
                        },
                        {
                            "name": "inputId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the focus input to match a label defined for the chips."
                        },
                        {
                            "name": "inputProps",
                            "optional": true,
                            "readonly": false,
                            "type": "InputHTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLInputElement to the focusable input element inside the component."
                        },
                        {
                            "name": "inputStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Inline style of the input field."
                        },
                        {
                            "name": "locale",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Locale to be used in formatting."
                        },
                        {
                            "name": "localeMatcher",
                            "optional": true,
                            "readonly": false,
                            "type": "\"best fit\" | \"lookup\"",
                            "default": "best fit",
                            "description": "The locale matching algorithm to use. Possible values are 'lookup' and 'best fit'; the default is 'best fit'.\nSee [Locale Negotation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_negotiation) for details."
                        },
                        {
                            "name": "max",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Maximum boundary value."
                        },
                        {
                            "name": "maxFractionDigits",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "The maximum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number formatting is the larger of minimumFractionDigits and 3;\nthe default for currency formatting is the larger of minimumFractionDigits and the number of minor unit digits provided by the [ISO 4217 currency code](https://www.six-group.com/en/products-services/financial-information/data-standards.html#scrollTo=maintenance-agency) list (2 if the list doesn't provide that information)."
                        },
                        {
                            "name": "min",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Mininum boundary value."
                        },
                        {
                            "name": "minFractionDigits",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "The minimum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number and percent formatting is 0;\nthe default for currency formatting is the number of minor unit digits provided by the [ISO 4217 currency code](https://www.six-group.com/en/products-services/financial-information/data-standards.html#scrollTo=maintenance-agency) list (2 if the list doesn't provide that information)."
                        },
                        {
                            "name": "mode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"decimal\" | \"currency\"",
                            "default": "decimal",
                            "description": "Defines the behavior of the component."
                        },
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "Nullable<number>",
                            "default": "",
                            "description": "Value of the component."
                        },
                        {
                            "name": "placeholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Placeholder text for the input."
                        },
                        {
                            "name": "prefix",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Text to display before the value."
                        },
                        {
                            "name": "readonly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that an input field is read-only."
                        },
                        {
                            "name": "showButtons",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Displays spinner buttons."
                        },
                        {
                            "name": "step",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Step factor to increment/decrement the value."
                        },
                        {
                            "name": "suffix",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Text to display after the value."
                        },
                        {
                            "name": "useGrouping",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to use grouping separators, such as thousands separators or thousand/lakh/crore separators."
                        }
                    ],
                    "methods": []
                },
                "InputNumberSlots": {
                    "description": "Defines valid slots in InputNumber component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        }
    },
    "inputswitch": {
        "description": "InputSwitch is used to select a boolean value.\n\n[Live Demo](https://www.primevue.org/inputswitch/)",
        "components": {
            "default": {
                "description": "InputSwitch is used to select a boolean value.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InputSwitchEmits": {
                    "description": "Defines valid emits in InputSwitch component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on value change."
                        },
                        {
                            "name": "click",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on click."
                        },
                        {
                            "name": "input",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "boolean",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on value change."
                        },
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "boolean",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        }
                    ]
                },
                "InputSwitchProps": {
                    "description": "Defines valid properties in InputSwitch component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "aria-label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes a string value that labels the component."
                        },
                        {
                            "name": "aria-labelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "falseValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "false",
                            "description": "Value in unchecked state."
                        },
                        {
                            "name": "inputClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Style class of the input field."
                        },
                        {
                            "name": "inputId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "inputProps",
                            "optional": true,
                            "readonly": false,
                            "type": "InputHTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLInputElement to the focusable input element inside the component."
                        },
                        {
                            "name": "inputStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Inline style of the input field."
                        },
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "string | boolean",
                            "default": "false",
                            "description": "Specifies whether a inputswitch should be checked or not."
                        },
                        {
                            "name": "trueValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "true",
                            "description": "Value in checked state."
                        }
                    ],
                    "methods": []
                },
                "InputSwitchSlots": {
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        }
    },
    "inputtext": {
        "description": "InputText renders a text field to enter data.\n\n[Live Demo](https://www.primevue.org/inputtext/)",
        "components": {
            "default": {
                "description": "InputText renders a text field to enter data.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InputTextEmits": {
                    "description": "Defines valid emits in InputText component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "undefined | string",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        }
                    ]
                },
                "InputTextProps": {
                    "description": "Defines valid properties in InputText component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "Nullable<string>",
                            "default": "",
                            "description": "Value of the component."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "InputHTMLAttributes"
                },
                "InputTextSlots": {
                    "description": "Defines valid slots in InputText component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        }
    },
    "knob": {
        "description": "Knob is a form component to define number inputs with a dial.\n\n[Live Demo](https://www.primevue.org/knob/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "KnobEmits": {
                    "description": "Defines valid emits in Knob component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "change",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "number"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the value changes."
                        },
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "number"
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        }
                    ]
                },
                "KnobProps": {
                    "description": "Defines valid properties in Knob component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "aria-label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Used to define a string that labels the element."
                        },
                        {
                            "name": "aria-labelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "max",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "100",
                            "description": "Maximum boundary value."
                        },
                        {
                            "name": "min",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Mininum boundary value."
                        },
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Value of the component."
                        },
                        {
                            "name": "rangeColor",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "var(--surface-border, LightGray)",
                            "description": "Background color of the range."
                        },
                        {
                            "name": "readonly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component value cannot be edited."
                        },
                        {
                            "name": "showValue",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the show the value inside the knob."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "100",
                            "description": "Size of the component in pixels."
                        },
                        {
                            "name": "step",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Step factor to increment/decrement the value."
                        },
                        {
                            "name": "strokeWidth",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "14",
                            "description": "Width of the knob stroke."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "textColor",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "var(--text-color-secondary, Black)",
                            "description": "Color of the value text."
                        },
                        {
                            "name": "valueColor",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "var(--primary-color, Black)",
                            "description": "Background of the value."
                        },
                        {
                            "name": "valueTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "'{value}'",
                            "description": "Template string of the value."
                        }
                    ],
                    "methods": []
                },
                "KnobSlots": {
                    "description": "Defines valid slots in Knob component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        }
    },
    "listbox": {
        "description": "ListBox is used to select one or more values from a list of items.\n\n[Live Demo](https://www.primevue.org/listbox/)",
        "components": {
            "default": {
                "description": "ListBox is used to select one or more values from a list of items.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ListboxChangeEvent": {
                    "description": "Custom change event.",
                    "relatedProp": "ListboxEmits.change",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Original event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Selected option value"
                        }
                    ],
                    "methods": []
                },
                "ListboxEmits": {
                    "description": "Defines valid emits in Listbox component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "blur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component loses focus."
                        },
                        {
                            "name": "change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "ListboxChangeEvent",
                                    "description": "Custom change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on value change."
                        },
                        {
                            "name": "filter",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "ListboxFilterEvent",
                                    "description": "Custom filter event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on filter input."
                        },
                        {
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component receives focus."
                        },
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        }
                    ]
                },
                "ListboxFilterEvent": {
                    "description": "Custom filter event.",
                    "relatedProp": "ListboxEmits.filter",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Original event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Filter value"
                        }
                    ],
                    "methods": []
                },
                "ListboxProps": {
                    "description": "Defines valid properties in Listbox component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "aria-label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a string value that labels an interactive element."
                        },
                        {
                            "name": "aria-labelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "autoOptionFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to focus on the first visible or selected element."
                        },
                        {
                            "name": "dataKey",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "A property to uniquely identify an option."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified, disables the component."
                        },
                        {
                            "name": "emptyFilterMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "No results found",
                            "description": "Text to display when filtering does not return any results. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "emptyMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "No results found",
                            "description": "Text to display when there are no options available. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "emptySelectionMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "No selected item",
                            "description": "Text to be displayed in hidden accessible field when any option is not selected. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "filter",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified, displays a filter input at header."
                        },
                        {
                            "name": "filterFields",
                            "optional": true,
                            "readonly": false,
                            "type": "string[]",
                            "default": "",
                            "description": "Fields used when filtering the options, defaults to optionLabel."
                        },
                        {
                            "name": "filterIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "ß",
                            "description": "Icon to display in filter input."
                        },
                        {
                            "name": "filterInputProps",
                            "optional": true,
                            "readonly": false,
                            "type": "InputHTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLInputElement to the filter input inside the component."
                        },
                        {
                            "name": "filterLocale",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Locale to use in filtering. The default locale is the host environment's current locale."
                        },
                        {
                            "name": "filterMatchMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"endsWith\" | \"startsWith\" | \"contains\"",
                            "default": "contains",
                            "description": "Defines the filtering algorithm to use when searching the options."
                        },
                        {
                            "name": "filterMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "'{0} results are available'",
                            "description": "Text to be displayed in hidden accessible field when filtering returns any results. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "filterPlaceholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Placeholder text to show when filter input is empty."
                        },
                        {
                            "name": "listStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Inline style of inner list element."
                        },
                        {
                            "name": "metaKeySelection",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Defines how multiple items can be selected, when true metaKey needs to be pressed to select or unselect an item and when set to false selection of each item can be toggled individually.\nOn touch enabled devices, metaKeySelection is turned off automatically."
                        },
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Value of the component."
                        },
                        {
                            "name": "multiple",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified, allows selecting multiple values."
                        },
                        {
                            "name": "optionDisabled",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the disabled flag of an option, defaults to false when not defined."
                        },
                        {
                            "name": "optionGroupChildren",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function that refers to the children options of option group."
                        },
                        {
                            "name": "optionGroupLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the label of an option group."
                        },
                        {
                            "name": "optionLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the label of an option."
                        },
                        {
                            "name": "optionValue",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the value of an option, defaults to the option itself when not defined."
                        },
                        {
                            "name": "options",
                            "optional": true,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "An array of selectitems to display as the available options."
                        },
                        {
                            "name": "selectOnFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, the focused option is selected."
                        },
                        {
                            "name": "selectionMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "'{0} items selected'",
                            "description": "Text to be displayed in hidden accessible field when options are selected. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "virtualScrollerOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "VirtualScrollerProps",
                            "default": "",
                            "description": "Whether to use the virtualScroller feature. The properties of VirtualScroller component can be used like an object in it."
                        }
                    ],
                    "methods": []
                },
                "ListboxSlots": {
                    "description": "Defines valid slots in Listbox component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "content",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>items</b>: any, // An array of objects to display for virtualscroller\n  \t <b>styleClass</b>: string, // Style class of the component\n  \t <b>contentRef(el: any)</b>: void, // Referance of the content\n  \t <b>getItemOptions(index: number)</b>: VirtualScrollerItemOptions, // Options of the items\n  }",
                                    "description": "content slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content template."
                        },
                        {
                            "name": "empty",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom empty template."
                        },
                        {
                            "name": "emptyfilter",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom emptyfilter template."
                        },
                        {
                            "name": "footer",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>options</b>: any, // Displayed options\n  \t <b>value</b>: any, // Value of the component\n  }",
                                    "description": "footer slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom footer template."
                        },
                        {
                            "name": "header",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>options</b>: any, // Displayed options\n  \t <b>value</b>: any, // Value of the component\n  }",
                                    "description": "header slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header template."
                        },
                        {
                            "name": "loader",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>options</b>: any, // Options of the loader items for virtualscroller\n  }",
                                    "description": "loader slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom loader template."
                        },
                        {
                            "name": "option",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>index</b>: number, // Index of the option\n  \t <b>option</b>: any, // Option instance\n  }",
                                    "description": "option slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom option template."
                        },
                        {
                            "name": "optiongroup",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>index</b>: number, // Index of the option\n  \t <b>option</b>: any, // Option instance\n  }",
                                    "description": "optiongroup slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom optiongroup template."
                        }
                    ]
                }
            }
        }
    },
    "megamenu": {
        "description": "MegaMenu is navigation component that displays submenus together.\n\n[Live Demo](https://www.primevue.org/megamenu/)",
        "components": {
            "default": {
                "description": "MegaMenu is navigation component that displays submenus together.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MegaMenuEmits": {
                    "description": "Defines valid emits in MegaMenu component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "blur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component loses focus."
                        },
                        {
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component receives focus."
                        }
                    ]
                },
                "MegaMenuProps": {
                    "description": "Defines valid properties in MegaMenu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "aria-label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a string value that labels an interactive element."
                        },
                        {
                            "name": "aria-labelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying menu element."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "exact",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to apply 'router-link-active-exact' class if route exactly matches the item path."
                        },
                        {
                            "name": "model",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuItem[]",
                            "default": "",
                            "description": "An array of menuitems."
                        },
                        {
                            "name": "orientation",
                            "optional": true,
                            "readonly": false,
                            "type": "\"horizontal\" | \"vertical\"",
                            "default": "horizontal",
                            "description": "Defines the orientation."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        }
                    ],
                    "methods": []
                },
                "MegaMenuSlots": {
                    "description": "Defines valid slots in MegaMenu component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "end",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom end template."
                        },
                        {
                            "name": "item",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>item</b>: MenuItem, // Menuitem instance\n  }",
                                    "description": "item slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom item template."
                        },
                        {
                            "name": "start",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom start template."
                        }
                    ]
                }
            }
        }
    },
    "menu": {
        "description": "Menu is a navigation / command component that supports dynamic and static positioning.\n\n[Live Demo](https://www.primevue.org/menu/)",
        "components": {
            "default": {
                "description": "Menu is a navigation / command component that supports dynamic and static positioning.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Hides the overlay."
                        },
                        {
                            "name": "show",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "Event",
                                    "description": "Browser event."
                                },
                                {
                                    "name": "target",
                                    "type": "any",
                                    "description": "Target element"
                                }
                            ],
                            "returnType": "void",
                            "description": "Shows the overlay."
                        },
                        {
                            "name": "toggle",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Toggles the visibility of the overlay."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MenuEmits": {
                    "description": "Defines valid emits in Menu component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "blur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component loses focus."
                        },
                        {
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component receives focus."
                        }
                    ]
                },
                "MenuProps": {
                    "description": "Defines valid properties in Menu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "string | HTMLElement",
                            "default": "body",
                            "description": "A valid query selector or an HTMLElement to specify where the overlay gets attached."
                        },
                        {
                            "name": "aria-label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a string value that labels an interactive element."
                        },
                        {
                            "name": "aria-labelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "autoZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to automatically manage layering."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "exact",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to apply 'router-link-active-exact' class if route exactly matches the item path."
                        },
                        {
                            "name": "model",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuItem[]",
                            "default": "",
                            "description": "An array of menuitems."
                        },
                        {
                            "name": "popup",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if menu would displayed as a popup."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        }
                    ],
                    "methods": []
                },
                "MenuSlots": {
                    "description": "Defines valid slots in Menu component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "end",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom end template."
                        },
                        {
                            "name": "item",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>item</b>: MenuItem, // Menuitem instance\n  }",
                                    "description": "item slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom item template."
                        },
                        {
                            "name": "start",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom start template."
                        }
                    ]
                }
            }
        }
    },
    "menubar": {
        "description": "Menubar is a horizontal menu component.\n\n[Live Demo](https://www.primevue.org/menubar/)",
        "components": {
            "default": {
                "description": "Menubar is a horizontal menu component.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MenubarEmits": {
                    "description": "Defines valid emits in Menubar component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "MenubarProps": {
                    "description": "Defines valid properties in Menubar component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "aria-label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a string value that labels an interactive element."
                        },
                        {
                            "name": "aria-labelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "buttonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLButtonElement to the menu button."
                        },
                        {
                            "name": "exact",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to apply 'router-link-active-exact' class if route exactly matches the item path."
                        },
                        {
                            "name": "model",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuItem[]",
                            "default": "",
                            "description": "An array of menuitems."
                        }
                    ],
                    "methods": []
                },
                "MenubarSlots": {
                    "description": "Defines valid slots in Menubar component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "end",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom end template."
                        },
                        {
                            "name": "item",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>item</b>: MenuItem, // Menuitem instance\n  }",
                                    "description": "item slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom item template."
                        },
                        {
                            "name": "start",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom start template."
                        }
                    ]
                }
            }
        }
    },
    "menuitem": {
        "description": "PrimeVue menu components share a common api to specify the menuitems and submenus.",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MenuItem": {
                    "description": "Defines model of MenuItem API.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "class",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the menuitem."
                        },
                        {
                            "name": "command",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean | Function",
                            "default": "false",
                            "description": "A boolean or a function to return a boolean to specify if the item is disabled."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon of the item."
                        },
                        {
                            "name": "items",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuItem[]",
                            "default": "",
                            "description": "An array of children menuitems."
                        },
                        {
                            "name": "key",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Unique identifier of an item."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the label of an item."
                        },
                        {
                            "name": "separator",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines the item as a separator."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the menuitem."
                        },
                        {
                            "name": "target",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Specifies where to open the linked document."
                        },
                        {
                            "name": "to",
                            "optional": true,
                            "readonly": false,
                            "type": "RouteLocationRaw",
                            "default": "",
                            "description": "Route configuration such as path, name and parameters."
                        },
                        {
                            "name": "url",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "External link to navigate when item is clicked."
                        },
                        {
                            "name": "visible",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean | Function",
                            "default": "true",
                            "description": "A boolean or a function to return a boolean to specify if the item is visible."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "MenuItemCommandEvent": {
                    "description": "Custom command event.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "item",
                            "optional": false,
                            "readonly": false,
                            "type": "MenuItem",
                            "default": "",
                            "description": "Menuitem instance."
                        },
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                }
            }
        }
    },
    "message": {
        "description": "Message groups a collection of contents in tabs.\n\n[Live Demo](https://www.primevue.org/message/)",
        "components": {
            "default": {
                "description": "Messages is used to display inline messages with various severities.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MessageEmits": {
                    "description": "Defines valid emits in Message component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "close",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a message is closed."
                        }
                    ]
                },
                "MessageProps": {
                    "description": "Defines valid properties in Message component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "closable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the message can be closed manually using the close icon."
                        },
                        {
                            "name": "closeButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLButtonElement to the close button."
                        },
                        {
                            "name": "closeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "pi pi-times",
                            "description": "Icon to display in the message close button."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Display a custom icon for the message."
                        },
                        {
                            "name": "life",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "3000",
                            "description": "Delay in milliseconds to close the message automatically."
                        },
                        {
                            "name": "severity",
                            "optional": true,
                            "readonly": false,
                            "type": "\"error\" | \"success\" | \"info\" | \"warn\"",
                            "default": "info",
                            "description": "Severity level of the message."
                        },
                        {
                            "name": "sticky",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "When enabled, message is not removed automatically."
                        }
                    ],
                    "methods": []
                },
                "MessageSlots": {
                    "description": "Defines valid slots in Message slots.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Default custom slot."
                        }
                    ]
                }
            }
        }
    },
    "multiselect": {
        "description": "MultiSelect is used to select multiple items from a collection.\n\n[Live Demo](https://www.primevue.org/multiselect/)",
        "components": {
            "default": {
                "description": "MultiSelect is used to select multiple items from a collection.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "hide",
                            "parameters": [
                                {
                                    "name": "isFocus",
                                    "type": "boolean",
                                    "description": "Decides whether to focus on the component. Default value is false."
                                }
                            ],
                            "returnType": "void",
                            "description": "Hides the overlay."
                        },
                        {
                            "name": "show",
                            "parameters": [
                                {
                                    "name": "isFocus",
                                    "type": "boolean",
                                    "description": "Decides whether to focus on the component. Default value is false."
                                }
                            ],
                            "returnType": "void",
                            "description": "Shows the overlay."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MultiSelectAllChangeEvent": {
                    "description": "Custom all change event.",
                    "relatedProp": "MultiSelectEmits['selectall-change']",
                    "props": [
                        {
                            "name": "checked",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether all data is selected."
                        },
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        }
                    ],
                    "methods": []
                },
                "MultiSelectChangeEvent": {
                    "description": "Custom change event.",
                    "relatedProp": "MultiSelectEmits.change",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Selected option value"
                        }
                    ],
                    "methods": []
                },
                "MultiSelectEmits": {
                    "description": "Defines valid emits in MultiSelect component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "before-hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke before the overlay is hidden."
                        },
                        {
                            "name": "before-show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke before the overlay is shown."
                        },
                        {
                            "name": "blur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component loses focus."
                        },
                        {
                            "name": "change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "MultiSelectChangeEvent",
                                    "description": "Custom change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on value change."
                        },
                        {
                            "name": "filter",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "MultiSelectFilterEvent",
                                    "description": "Custom filter event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on filter input."
                        },
                        {
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component receives focus."
                        },
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when the overlay is hidden."
                        },
                        {
                            "name": "selectall-change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "MultiSelectAllChangeEvent",
                                    "description": "Custom select all change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when all data is selected."
                        },
                        {
                            "name": "show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when the overlay is shown."
                        },
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        }
                    ]
                },
                "MultiSelectFilterEvent": {
                    "description": "Custom filter event",
                    "relatedProp": "MultiSelectEmits.filter",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Original event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Filter value"
                        }
                    ],
                    "methods": []
                },
                "MultiSelectProps": {
                    "description": "Defines valid properties in MultiSelect component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "string | HTMLElement",
                            "default": "body",
                            "description": "A valid query selector or an HTMLElement to specify where the overlay gets attached. Special keywords are 'body' for document body and 'self' for the element itself."
                        },
                        {
                            "name": "aria-label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a string value that labels an interactive element."
                        },
                        {
                            "name": "aria-labelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "autoFilterFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to focus on the filter element when the overlay panel is shown."
                        },
                        {
                            "name": "autoOptionFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to focus on the first visible or selected element when the overlay panel is shown."
                        },
                        {
                            "name": "checkboxIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "pi pi-check",
                            "description": "Icon to display in the checkboxes."
                        },
                        {
                            "name": "closeButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLButtonElement to the clear button inside the overlay panel."
                        },
                        {
                            "name": "closeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "pi pi-times",
                            "description": "Icon to display in the dropdown close button."
                        },
                        {
                            "name": "dataKey",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "A property to uniquely identify an option."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "display",
                            "optional": true,
                            "readonly": false,
                            "type": "\"comma\" | \"chip\"",
                            "default": "comma",
                            "description": "Defines how the selected items are displayed."
                        },
                        {
                            "name": "dropdownIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "pi pi-chevron-down",
                            "description": "Icon to display in the dropdown."
                        },
                        {
                            "name": "emptyFilterMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "No results found",
                            "description": "Text to display when filtering does not return any results. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "emptyMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "No results found'",
                            "description": "Text to display when there are no options available. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "emptySelectionMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "No selected item",
                            "description": "Text to be displayed in hidden accessible field when any option is not selected. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "filter",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified, displays a filter input at header."
                        },
                        {
                            "name": "filterFields",
                            "optional": true,
                            "readonly": false,
                            "type": "string[]",
                            "default": "",
                            "description": "Fields used when filtering the options, defaults to optionLabel."
                        },
                        {
                            "name": "filterIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "pi pi-search",
                            "description": "Icon to display in filter input."
                        },
                        {
                            "name": "filterInputProps",
                            "optional": true,
                            "readonly": false,
                            "type": "InputHTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLInputElement to the filter input inside the overlay panel."
                        },
                        {
                            "name": "filterLocale",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Locale to use in filtering. The default locale is the host environment's current locale."
                        },
                        {
                            "name": "filterMatchMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"endsWith\" | \"startsWith\" | \"contains\"",
                            "default": "contains",
                            "description": "Defines the filtering algorithm to use when searching the options."
                        },
                        {
                            "name": "filterMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "'{0} results are available'",
                            "description": "Text to be displayed in hidden accessible field when filtering returns any results. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "filterPlaceholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Placeholder text to show when filter input is empty."
                        },
                        {
                            "name": "inputId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "inputProps",
                            "optional": true,
                            "readonly": false,
                            "type": "InputHTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLInputElement to the focusable input element inside the component."
                        },
                        {
                            "name": "loading",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the multiselect is in loading state."
                        },
                        {
                            "name": "loadingIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "pi pi-spinner pi-spin",
                            "description": "Icon to display in loading state."
                        },
                        {
                            "name": "maxSelectedLabels",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Decides how many selected item labels to show at most."
                        },
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Value of the component."
                        },
                        {
                            "name": "optionDisabled",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the disabled flag of an option, defaults to false when not defined."
                        },
                        {
                            "name": "optionGroupChildren",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function that refers to the children options of option group."
                        },
                        {
                            "name": "optionGroupLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the label of an option group."
                        },
                        {
                            "name": "optionLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the label of an option."
                        },
                        {
                            "name": "optionValue",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the value of an option, defaults to the option itself when not defined."
                        },
                        {
                            "name": "options",
                            "optional": true,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "An array of selectitems to display as the available options."
                        },
                        {
                            "name": "panelClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the overlay panel."
                        },
                        {
                            "name": "panelProps",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLDivElement to the overlay panel."
                        },
                        {
                            "name": "panelStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the overlay panel."
                        },
                        {
                            "name": "placeholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Label to display when there are no selections."
                        },
                        {
                            "name": "removeTokenIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "pi pi-times-circle",
                            "description": "Icon to display in chip remove action."
                        },
                        {
                            "name": "resetFilterOnHide",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Clears the filter value when hiding the dropdown."
                        },
                        {
                            "name": "scrollHeight",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "200px",
                            "description": "Height of the viewport, a scrollbar is defined if height of list exceeds this value."
                        },
                        {
                            "name": "selectAll",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether all data is selected."
                        },
                        {
                            "name": "selectedItemsLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "'{0} items selected'",
                            "description": "Label to display after exceeding max selected labels."
                        },
                        {
                            "name": "selectionLimit",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Maximum number of selectable items."
                        },
                        {
                            "name": "selectionMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "'{0} items selected'",
                            "description": "Text to be displayed in hidden accessible field when options are selected. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "showToggleAll",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show the header checkbox to toggle the selection of all items at once."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "virtualScrollerOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "VirtualScrollerProps",
                            "default": "",
                            "description": "Whether to use the virtualScroller feature. The properties of VirtualScroller component can be used like an object in it."
                        }
                    ],
                    "methods": []
                },
                "MultiSelectSlots": {
                    "description": "Defines valid slots in MultiSelect component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "chip",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>value</b>: any, // A value in the selection\n  }",
                                    "description": "chip slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom chip template."
                        },
                        {
                            "name": "content",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>items</b>: any, // An array of objects to display for virtualscroller\n  \t <b>styleClass</b>: string, // Style class of the component\n  \t <b>contentRef(el: any)</b>: void, // Referance of the content\n  \t <b>getItemOptions(index: number)</b>: VirtualScrollerItemOptions, // Options of the items\n  }",
                                    "description": "content slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content template."
                        },
                        {
                            "name": "empty",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom empty template."
                        },
                        {
                            "name": "emptyfilter",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom emptyfilter template."
                        },
                        {
                            "name": "footer",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>options</b>: any, // Displayed options\n  \t <b>value</b>: any, // Value of the component\n  }",
                                    "description": "footer slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom footer template."
                        },
                        {
                            "name": "header",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>options</b>: any, // Displayed options\n  \t <b>value</b>: any, // Value of the component\n  }",
                                    "description": "header slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header template."
                        },
                        {
                            "name": "indicator",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom indicator template."
                        },
                        {
                            "name": "loader",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>options</b>: any, // Options of the loader items for virtualscroller\n  }",
                                    "description": "loader slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom loader template."
                        },
                        {
                            "name": "option",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>index</b>: number, // Index of the option\n  \t <b>option</b>: any, // Option instance\n  }",
                                    "description": "option slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom option template."
                        },
                        {
                            "name": "optiongroup",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>index</b>: number, // Index of the option\n  \t <b>option</b>: any, // Option instance\n  }",
                                    "description": "option group slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom option group template."
                        },
                        {
                            "name": "value",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>placeholder</b>: string, // Placeholder prop value\n  \t <b>value</b>: any, // Value of the component\n  }",
                                    "description": "value slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom value template."
                        }
                    ]
                }
            }
        }
    },
    "orderlist": {
        "description": "OrderList is used to managed the order of a collection.\n\n[Live Demo](https://primevue.org/orderlist)",
        "components": {
            "default": {
                "description": "OrderList is used to sort a collection.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "OrderListEmits": {
                    "description": "Defines valid slots in OrderList component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "reorder",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "OrderListReorderEvent",
                                    "description": "Custom reorder event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the list is reordered."
                        },
                        {
                            "name": "selection-change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "OrderListSelectionChangeEvent",
                                    "description": "Custom selection change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when selection changes."
                        },
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any[]",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "update:selection",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any[]",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the selection changes."
                        }
                    ]
                },
                "OrderListProps": {
                    "description": "Defines valid properties in OrderList component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "aria-label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a string value that labels an interactive list element."
                        },
                        {
                            "name": "aria-labelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying list element."
                        },
                        {
                            "name": "breakpoint",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "960px",
                            "description": "The breakpoint to define the maximum width boundary when responsiveness is enabled."
                        },
                        {
                            "name": "dataKey",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Name of the field that uniquely identifies the a record in the data."
                        },
                        {
                            "name": "listProps",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLAttributes to the list element."
                        },
                        {
                            "name": "listStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the the list element."
                        },
                        {
                            "name": "metaKeySelection",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Defines whether metaKey is requred or not for the selection.\nWhen true metaKey needs to be pressed to select or unselect an item and\nwhen set to false selection of each item can be toggled individually. On touch enabled devices, metaKeySelection is turned off automatically."
                        },
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Value of the component."
                        },
                        {
                            "name": "moveBottomButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLButtonElement to the move bottom button inside the component."
                        },
                        {
                            "name": "moveDownButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLButtonElement to the move down button inside the component."
                        },
                        {
                            "name": "moveTopButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLButtonElement to the move top button inside the component."
                        },
                        {
                            "name": "moveUpButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLButtonElement to the move up button inside the component."
                        },
                        {
                            "name": "responsive",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the list optimizes layout based on screen size."
                        },
                        {
                            "name": "selection",
                            "optional": true,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Selected items in the list."
                        },
                        {
                            "name": "stripedRows",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether to displays rows with alternating colors."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        }
                    ],
                    "methods": []
                },
                "OrderListReorderEvent": {
                    "description": "Custom reorder event",
                    "relatedProp": "OrderListEmits.reorder",
                    "props": [
                        {
                            "name": "direction",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Direction of the change; 'up', 'down', 'bottom', 'top'"
                        },
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Ordered list"
                        }
                    ],
                    "methods": []
                },
                "OrderListSelectionChangeEvent": {
                    "description": "Custom selection change event",
                    "relatedProp": "OrderListEmits['selection-change']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Ordered list"
                        }
                    ],
                    "methods": []
                },
                "OrderListSlots": {
                    "description": "Defines valid slots in OrderList component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "controlsend",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom controls end template."
                        },
                        {
                            "name": "controlsstart",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom controls start template."
                        },
                        {
                            "name": "header",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header template."
                        },
                        {
                            "name": "item",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>index</b>: number, // Index of the item.\n  \t <b>item</b>: any, // Item of the component\n  }",
                                    "description": "item slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom item template."
                        }
                    ]
                }
            }
        }
    },
    "organizationchart": {
        "description": "OrganizationChart visualizes hierarchical organization data.\n\n[Live Demo](https://primevue.org/organizationchart)",
        "components": {
            "default": {
                "description": "OrganizationChart visualizes hierarchical organization data.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "OrganizationChartCollapsedKeys": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "OrganizationChartEmits": {
                    "description": "Defines valid emits in OrganizationChart component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "node-collapsed",
                            "parameters": [
                                {
                                    "name": "node",
                                    "optional": false,
                                    "type": "OrganizationChartNode",
                                    "description": "Node instance."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is collapsed."
                        },
                        {
                            "name": "node-expand",
                            "parameters": [
                                {
                                    "name": "node",
                                    "optional": false,
                                    "type": "OrganizationChartNode",
                                    "description": "Node instance."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is expanded."
                        },
                        {
                            "name": "node-select",
                            "parameters": [
                                {
                                    "name": "node",
                                    "optional": false,
                                    "type": "OrganizationChartNode",
                                    "description": "Node instance."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a suggestion is selected."
                        },
                        {
                            "name": "node-unselect",
                            "parameters": [
                                {
                                    "name": "node",
                                    "optional": false,
                                    "type": "OrganizationChartNode",
                                    "description": "Node instance."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is unselected."
                        },
                        {
                            "name": "update:collapsedKeys",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "boolean",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "update:selectionKeys",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        }
                    ]
                },
                "OrganizationChartNode": {
                    "description": "Defines valid properties in OrganizationChartNode.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "OrganizationChartNode[]",
                            "default": "",
                            "description": "Children nodes array."
                        },
                        {
                            "name": "collapsible",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether node is collapsible when node expansion is enabled."
                        },
                        {
                            "name": "data",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Data represented by the node."
                        },
                        {
                            "name": "key",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Unique identifier of the node. (required)"
                        },
                        {
                            "name": "selectable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether node is selectable when selection is enabled."
                        },
                        {
                            "name": "styleClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the node content."
                        },
                        {
                            "name": "type",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Type of the node to match a template."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "OrganizationChartProps": {
                    "description": "Defines valid properties in OrganizationChart component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "collapsedKeys",
                            "optional": true,
                            "readonly": false,
                            "type": "OrganizationChartCollapsedKeys",
                            "default": "",
                            "description": "A map instance of key-value pairs to represented the collapsed nodes."
                        },
                        {
                            "name": "collapsible",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the nodes can be expanded or toggled."
                        },
                        {
                            "name": "selectionKeys",
                            "optional": true,
                            "readonly": false,
                            "type": "OrganizationChartSelectionKeys",
                            "default": "",
                            "description": "A map instance of key-value pairs to represented the selected nodes."
                        },
                        {
                            "name": "selectionMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"multiple\" | \"single\"",
                            "default": "",
                            "description": "Type of the selection."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "OrganizationChartNode",
                            "default": "",
                            "description": "Value of the component."
                        }
                    ],
                    "methods": []
                },
                "OrganizationChartSelectionKeys": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "OrganizationChartSlots": {
                    "description": "Defines valid slots in OrganizationChart component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "Function"
                        }
                    ],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [
                                {
                                    "name": "node",
                                    "optional": false,
                                    "type": "any"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content template."
                        }
                    ]
                }
            }
        }
    },
    "overlaypanel": {
        "description": "OverlayPanel is a container component positioned as connected to its target.\n\n[Live Demo](https://primevue.org/overlaypanel)",
        "components": {
            "default": {
                "description": "OverlayPanel, also known as Popover, is a container component that can overlay other components on page.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Hides the overlay."
                        },
                        {
                            "name": "show",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "Event",
                                    "description": "Browser event."
                                },
                                {
                                    "name": "target",
                                    "type": "any",
                                    "description": "Optional target if event.currentTarget should not be used."
                                }
                            ],
                            "returnType": "void",
                            "description": "Shows the overlay."
                        },
                        {
                            "name": "toggle",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "Event",
                                    "description": "Browser event."
                                },
                                {
                                    "name": "target",
                                    "type": "any",
                                    "description": "Optional target if event.currentTarget should not be used."
                                }
                            ],
                            "returnType": "void",
                            "description": "Toggles the visibility of the overlay."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "OverlayPanelBreakpoints": {
                    "description": "OverlayPanel breakpoint metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "string"
                        }
                    ],
                    "methods": []
                },
                "OverlayPanelEmits": {
                    "description": "Defines valid emits in OverlayPanel component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when the overlay is hidden."
                        },
                        {
                            "name": "show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when the overlay is shown."
                        }
                    ]
                },
                "OverlayPanelProps": {
                    "description": "Defines valid properties in OverlayPanel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "string | HTMLElement",
                            "default": "body",
                            "description": "A valid query selector or an HTMLElement to specify where the overlay gets attached."
                        },
                        {
                            "name": "autoZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to automatically manage layering."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "breakpoints",
                            "optional": true,
                            "readonly": false,
                            "type": "OverlayPanelBreakpoints",
                            "default": "",
                            "description": "Object literal to define widths per screen size."
                        },
                        {
                            "name": "dismissable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Enables to hide the overlay when outside is clicked."
                        },
                        {
                            "name": "showCloseIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, displays a close icon at top right corner."
                        }
                    ],
                    "methods": []
                },
                "OverlayPanelSlots": {
                    "description": "Defines valid slots in OverlayPanel component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content template."
                        }
                    ]
                }
            }
        }
    },
    "paginator": {
        "description": "Paginator is a generic component to display content in paged format.\n\n- [Paginator](https://primevue.org/paginator)",
        "components": {
            "default": {
                "description": "Paginator is a generic widget to display content in paged format.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PageState": {
                    "description": "Paginator page state metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of first record"
                        },
                        {
                            "name": "page",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "New page number"
                        },
                        {
                            "name": "pageCount",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Total number of pages"
                        },
                        {
                            "name": "rows",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Number of rows to display in new page"
                        }
                    ],
                    "methods": []
                },
                "PaginatorEmits": {
                    "description": "Defines valid emits in Paginator component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "page",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "PageState",
                                    "description": "New page state."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when page changes, the event object contains information about the new state."
                        },
                        {
                            "name": "update:first",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "number",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the first changes."
                        },
                        {
                            "name": "update:rows",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "number",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the rows changes."
                        }
                    ]
                },
                "PaginatorProps": {
                    "description": "Defines valid properties in Paginator component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "alwaysShow",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show the paginator even there is only one page."
                        },
                        {
                            "name": "currentPageReportTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "'({currentPage} of {totalPages})'",
                            "description": "Template of the current page report element. It displays information about the pagination state. Available placeholders are the following;\n\n- {currentPage}\n- {totalPages}\n- {rows}\n- {first}\n- {last}\n- {totalRecords}"
                        },
                        {
                            "name": "first",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Zero-relative number of the first row to be displayed."
                        },
                        {
                            "name": "pageLinkSize",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "5",
                            "description": "Number of page links to display."
                        },
                        {
                            "name": "rows",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Data count to display per page."
                        },
                        {
                            "name": "rowsPerPageOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "number[]",
                            "default": "",
                            "description": "Array of integer values to display inside rows per page dropdown."
                        },
                        {
                            "name": "template",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Template of the paginator, can either be a string or an object with key-value pairs to define templates per breakpoint.\n\n- FirstPageLink\n- PrevPageLink\n- PageLinks\n- NextPageLink\n- LastPageLink\n- RowsPerPageDropdown\n- JumpToPageDropdown\n- JumpToPageInput\n- CurrentPageReport"
                        },
                        {
                            "name": "totalRecords",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Number of total records."
                        }
                    ],
                    "methods": []
                },
                "PaginatorSlots": {
                    "description": "Defines valid slots in Paginator component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "end",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>state</b>: PageState, // Current state\n  }",
                                    "description": "end slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom end template."
                        },
                        {
                            "name": "start",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>state</b>: PageState, // Current state\n  }",
                                    "description": "start slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom start template."
                        }
                    ]
                }
            }
        }
    },
    "panel": {
        "description": "Panel is a container with the optional content toggle feature.\n\n[Live Demo](https://www.primevue.org/panel/)",
        "components": {
            "default": {
                "description": "Panel is a container with the optional content toggle feature.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PanelEmits": {
                    "description": "Defines valid emits in Panel component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "toggle",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "PanelToggleEvent",
                                    "description": "Custom toggle event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a tab toggle."
                        },
                        {
                            "name": "update:collapsed",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "boolean",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the collapsed changes."
                        }
                    ]
                },
                "PanelPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "PanelPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "PanelProps.pt",
                    "props": [
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelPassThroughOptionType",
                            "default": "",
                            "description": "Uses to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelPassThroughOptionType",
                            "default": "",
                            "description": "Uses to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "headericon",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelPassThroughOptionType",
                            "default": "",
                            "description": "Uses to pass attributes to the headericon's DOM element."
                        },
                        {
                            "name": "icons",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelPassThroughOptionType",
                            "default": "",
                            "description": "Uses to pass attributes to the title's DOM element."
                        },
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelPassThroughOptionType",
                            "default": "",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "title",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelPassThroughOptionType",
                            "default": "",
                            "description": "Uses to pass attributes to the title's DOM element."
                        },
                        {
                            "name": "toggleablecontent",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelPassThroughOptionType",
                            "default": "",
                            "description": "Uses to pass attributes to the toggleablecontent's DOM element."
                        },
                        {
                            "name": "toggler",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelPassThroughOptionType",
                            "default": "",
                            "description": "Uses to pass attributes to the toggler's DOM element."
                        }
                    ],
                    "methods": []
                },
                "PanelProps": {
                    "description": "Defines valid properties in Panel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "collapsed",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines the initial state of panel content."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Header text of the panel."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "toggleButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Uses to pass the custom value to read for the button inside the component."
                        },
                        {
                            "name": "toggleable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if content of panel can be expanded and collapsed."
                        }
                    ],
                    "methods": []
                },
                "PanelSlots": {
                    "description": "Defines valid slots in Panel slots.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content template."
                        },
                        {
                            "name": "header",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header template."
                        },
                        {
                            "name": "headericon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>collapsed</b>: boolean, // Collapsed state as a boolean\n  }",
                                    "description": "header icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header icon template of panel."
                        },
                        {
                            "name": "icons",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom icons template."
                        }
                    ]
                },
                "PanelState": {
                    "description": "Defines current inline states in Panel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "d_collapsed",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Current collapsed state as a boolean"
                        }
                    ],
                    "methods": []
                },
                "PanelToggleEvent": {
                    "description": "Custom toggle event.",
                    "relatedProp": "PanelEmits.toggle",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Collapsed state as a boolean"
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "PanelPassThroughOptionType": {
                    "values": "PanelPassThroughAttributes | Function | null | undefined"
                }
            }
        }
    },
    "panelmenu": {
        "description": "PanelMenu is a hybrid of Accordion and Tree components.\n\n[Live Demo](https://www.primevue.org/panelmenu/)",
        "components": {
            "default": {
                "description": "PanelMenu is a hybrid of Accordion and Tree components.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PanelMenuEmits": {
                    "description": "Defines valid emits in PanelMenu component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "panel-close",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "PanelMenuPanelCloseEvent",
                                    "description": "Custom panel close event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when an active panel is collapsed by clicking on the header."
                        },
                        {
                            "name": "panel-open",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "PanelMenuPanelOpenEvent",
                                    "description": "Custom panel open event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a panel gets expanded."
                        },
                        {
                            "name": "update:expandedKeys",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the expandedKeys changes."
                        }
                    ]
                },
                "PanelMenuExpandedKeys": {
                    "description": "Custom expanded keys metadata.",
                    "relatedProp": "PanelMenuProps.expandedKeys",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "PanelMenuPanelCloseEvent": {
                    "description": "Custom panel close event.",
                    "relatedProp": "PanelMenuEmits['panel-close']",
                    "props": [
                        {
                            "name": "item",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Current item."
                        },
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "MouseEvent",
                            "default": "",
                            "description": "Browser mouse event."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "PanelMenuPanelOpenEvent"
                },
                "PanelMenuPanelOpenEvent": {
                    "description": "Custom panel open event.",
                    "relatedProp": "PanelMenuEmits['panel-open']",
                    "props": [
                        {
                            "name": "item",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Current item."
                        },
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "MouseEvent",
                            "default": "",
                            "description": "Browser mouse event."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "PanelMenuPanelCloseEvent"
                },
                "PanelMenuProps": {
                    "description": "Defines valid properties in PanelMenu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "exact",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to apply 'router-link-active-exact' class if route exactly matches the item path."
                        },
                        {
                            "name": "expandedKeys",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelMenuExpandedKeys",
                            "default": "",
                            "description": "A map of keys to represent the expansion state in controlled mode."
                        },
                        {
                            "name": "model",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuItem[]",
                            "default": "",
                            "description": "An array of menuitems."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        }
                    ],
                    "methods": []
                },
                "PanelMenuSlots": {
                    "description": "Defines valid slots in PanelMenu component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "item",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>item</b>: MenuItem, // Menuitem instance\n  }",
                                    "description": "item slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content for each item."
                        }
                    ]
                }
            }
        }
    },
    "password": {
        "description": "Password displays strength indicator for password fields.\n\n[Live Demo](https://www.primevue.org/password/)",
        "components": {
            "default": {
                "description": "Password displays strength indicator for password fields.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PasswordEmits": {
                    "description": "Defines valid emits in Password component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "string",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        }
                    ]
                },
                "PasswordProps": {
                    "description": "Defines valid properties in Password component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "string | HTMLElement",
                            "default": "body",
                            "description": "A valid query selector or an HTMLElement to specify where the overlay gets attached."
                        },
                        {
                            "name": "aria-label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes a string value that labels the component."
                        },
                        {
                            "name": "aria-labelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "feedback",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show the strength indicator or not."
                        },
                        {
                            "name": "hideIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "pi pi-eye-slash",
                            "description": "Icon to hide displaying the password as plain text."
                        },
                        {
                            "name": "inputClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Style class of the input field."
                        },
                        {
                            "name": "inputId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "inputProps",
                            "optional": true,
                            "readonly": false,
                            "type": "InputHTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLInputElement to the focusable input element inside the component."
                        },
                        {
                            "name": "inputStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Inline style of the input field."
                        },
                        {
                            "name": "mediumLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Text for a medium password. Defaults to PrimeVue Locale configuration."
                        },
                        {
                            "name": "mediumRegex",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "^(((?=.*[a-z])(?=.*[A-Z]))|((?=.*[a-z])(?=.*[0-9]))|((?=.*[A-Z])(?=.*[0-9])))(?=.{6,})",
                            "description": "Regex for a medium level password."
                        },
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "Nullable<string>",
                            "default": "",
                            "description": "Value of the component."
                        },
                        {
                            "name": "panelClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Style class of the overlay panel."
                        },
                        {
                            "name": "panelId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying overlay panel element."
                        },
                        {
                            "name": "panelProps",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLDivElement to the overlay panel inside the component."
                        },
                        {
                            "name": "panelStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Inline style of the overlay panel."
                        },
                        {
                            "name": "placeholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Placeholder text for the input."
                        },
                        {
                            "name": "promptLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Text to prompt password entry. Defaults to PrimeVue Locale configuration."
                        },
                        {
                            "name": "required",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that an input field must be filled out before submitting the form."
                        },
                        {
                            "name": "showIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "pi pi-eye",
                            "description": "Icon to show displaying the password as plain text."
                        },
                        {
                            "name": "strongLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Text for a strong password. Defaults to PrimeVue Locale configuration."
                        },
                        {
                            "name": "strongRegex",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})",
                            "description": "Regex for a strong level password."
                        },
                        {
                            "name": "toggleMask",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to show an icon to display the password as plain text."
                        },
                        {
                            "name": "weakLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Text for a weak password. Defaults to PrimeVue Locale configuration."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "InputHTMLAttributes"
                },
                "PasswordSlots": {
                    "description": "Defines valid slots in Password component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "content",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content template."
                        },
                        {
                            "name": "footer",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom footer template."
                        },
                        {
                            "name": "header",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header template."
                        }
                    ]
                }
            }
        }
    },
    "picklist": {
        "description": "PickList is used to reorder items between different lists.\n\n[Live Demo](https://primevue.org/picklist)",
        "components": {
            "default": {
                "description": "PickList is used to reorder items between different lists.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PickListEmits": {
                    "description": "Defines valid emits in PickList component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "move-all-to-source",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "PickListMoveAllToSourceEvent",
                                    "description": "Custom move all to source event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when all items are moved to the source list."
                        },
                        {
                            "name": "move-all-to-target",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "PickListMoveAllToTargetEvent",
                                    "description": "Custom move all to target event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when all items are moved to the target list."
                        },
                        {
                            "name": "move-to-source",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "PickListMoveToSourceEvent",
                                    "description": "Custom move to source event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when one or more items are moved to the source list."
                        },
                        {
                            "name": "move-to-target",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "PickListMoveToTargetEvent",
                                    "description": "Custom move to target event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when one or more items are moved to the target list."
                        },
                        {
                            "name": "reorder",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "PickListReorderEvent",
                                    "description": "Custom reorder event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the list is reordered."
                        },
                        {
                            "name": "selection-change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "PickListSelectionChangeEvent",
                                    "description": "Custom selection change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when one or more items are moved to the other list."
                        },
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any[][]",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "update:selection",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any[][]",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the selection changes."
                        }
                    ]
                },
                "PickListMoveAllToSourceEvent": {
                    "description": "Custom move-all-to-source event.",
                    "relatedProp": "PickListEmits['move-all-to-target']",
                    "props": [
                        {
                            "name": "items",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Moved items"
                        },
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "PickListMoveToTargetEvent"
                },
                "PickListMoveAllToTargetEvent": {
                    "description": "Custom move-all-to-target event.",
                    "relatedProp": "PickListEmits['move-all-to-target']",
                    "props": [
                        {
                            "name": "items",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Moved items"
                        },
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "PickListMoveToTargetEvent"
                },
                "PickListMoveToSourceEvent": {
                    "description": "Custom move-to-source event.",
                    "relatedProp": "PickListEmits['move-all-to-target']",
                    "props": [
                        {
                            "name": "items",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Moved items"
                        },
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "PickListMoveToTargetEvent"
                },
                "PickListMoveToTargetEvent": {
                    "description": "Custom move-to-target event.",
                    "relatedProp": "PickListEmits['move-to-target']",
                    "props": [
                        {
                            "name": "items",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Moved items"
                        },
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        }
                    ],
                    "methods": [],
                    "extendedBy": "PickListMoveAllToTargetEvent,PickListMoveToSourceEvent,PickListMoveAllToSourceEvent"
                },
                "PickListProps": {
                    "description": "Defines valid properties in PickList component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "breakpoint",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "960px",
                            "description": "The breakpoint to define the maximum width boundary when responsiveness is enabled."
                        },
                        {
                            "name": "dataKey",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Name of the field that uniquely identifies the a record in the data."
                        },
                        {
                            "name": "listStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the the list element."
                        },
                        {
                            "name": "metaKeySelection",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Defines whether metaKey is requred or not for the selection.\nWhen true metaKey needs to be pressed to select or unselect an item and\nwhen set to false selection of each item can be toggled individually. On touch enabled devices, metaKeySelection is turned off automatically."
                        },
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any[][]",
                            "default": "",
                            "description": "Value of the component as a multidimensional array."
                        },
                        {
                            "name": "moveAllToSourceProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLButtonElement to the move all to source button inside the component."
                        },
                        {
                            "name": "moveAllToTargetProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLButtonElement to the move all to target button inside the component."
                        },
                        {
                            "name": "moveBottomButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLButtonElement to the move bottom button inside the component."
                        },
                        {
                            "name": "moveDownButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLButtonElement to the move down button inside the component."
                        },
                        {
                            "name": "moveToSourceProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLButtonElement to the move to source button inside the component."
                        },
                        {
                            "name": "moveToTargetProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLButtonElement to the move to target button inside the component."
                        },
                        {
                            "name": "moveTopButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLButtonElement to the move top button inside the component."
                        },
                        {
                            "name": "moveUpButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLButtonElement to the move up button inside the component."
                        },
                        {
                            "name": "responsive",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the list optimizes layout based on screen size."
                        },
                        {
                            "name": "selection",
                            "optional": true,
                            "readonly": false,
                            "type": "any[][]",
                            "default": "",
                            "description": "Selected items in the list as a multidimensional array."
                        },
                        {
                            "name": "showSourceControls",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to show buttons of source list."
                        },
                        {
                            "name": "showTargetControls",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to show buttons of target list."
                        },
                        {
                            "name": "sourceListProps",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLAttributes to the source list element."
                        },
                        {
                            "name": "stripedRows",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to displays rows with alternating colors."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "Index of the list element in tabbing order."
                        },
                        {
                            "name": "targetListProps",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLAttributes to the target list element."
                        }
                    ],
                    "methods": []
                },
                "PickListReorderEvent": {
                    "description": "Custom reorder event.",
                    "relatedProp": "PickListEmits.reorder",
                    "props": [
                        {
                            "name": "direction",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Direction of the change; 'up', 'down', 'bottom', 'top'"
                        },
                        {
                            "name": "listIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the list that is ordered, 0 represents the source and 1 represents the target list."
                        },
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Ordered list"
                        }
                    ],
                    "methods": []
                },
                "PickListSelectionChangeEvent": {
                    "description": "Custom selection change event.",
                    "relatedProp": "PickListEmits['selection-change']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Selected item"
                        }
                    ],
                    "methods": []
                },
                "PickListSlots": {
                    "description": "Defines valid slots in PickList component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "header",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header template."
                        },
                        {
                            "name": "item",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>index</b>: number, // Index of the item\n  \t <b>item</b>: any, // Item of the component\n  }",
                                    "description": "item slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom item template."
                        },
                        {
                            "name": "movecontrolsend",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom move controls end template."
                        },
                        {
                            "name": "movecontrolsstart",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom move controls start template."
                        },
                        {
                            "name": "sourcecontrolsend",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom source controls end template."
                        },
                        {
                            "name": "sourcecontrolsstart",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom source controls start template."
                        },
                        {
                            "name": "sourceheader",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom source header template."
                        },
                        {
                            "name": "targetcontrolsend",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom target controls end template."
                        },
                        {
                            "name": "targetcontrolsstart",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom target controls start template."
                        },
                        {
                            "name": "targetheader",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom target header template."
                        }
                    ]
                }
            }
        }
    },
    "portal/Portal": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PortalProps": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "PortalAppendToType",
                            "default": "",
                            "description": "A valid query selector or an HTMLElement to specify where the dialog gets attached. Special keywords are 'body' for document body and 'self' for the element itself."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "If disabled, the Portal feature is eliminated and the content is displayed directly."
                        }
                    ],
                    "methods": []
                },
                "PortalSlots": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "default",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "PortalEmits": {
                    "values": "{}"
                }
            }
        }
    },
    "progressbar": {
        "description": "ProgressBar is a process status indicator.\n\n[Live Demo](https://www.primevue.org/progressbar)",
        "components": {
            "default": {
                "description": "\n\n[Live Demo](https://www.primevue.org/progressbar/)\n--- ---\n![PrimeVue](https://primefaces.org/cdn/primevue/images/logo-100.png)",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ProgressBarEmits": {
                    "description": "Defines valid emits in ProgressBar component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "ProgressBarProps": {
                    "description": "Defines valid properties in ProgressBar component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "mode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"indeterminate\" | \"determinate\"",
                            "default": "determinate",
                            "description": "Defines the mode of the progress"
                        },
                        {
                            "name": "showValue",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to display the progress bar value."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current value of the progress."
                        }
                    ],
                    "methods": []
                },
                "ProgressBarSlots": {
                    "description": "Defines valid slots in ProgressBar component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content slot."
                        }
                    ]
                }
            }
        }
    },
    "progressspinner": {
        "description": "ProgressSpinner is a process status indicator.\n\n[Live Demo](https://www.primevue.org/progressspinner)",
        "components": {
            "default": {
                "description": "ProgressSpinner is a process status indicator.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ProgressSpinnerEmits": {
                    "description": "Defines valid emits in ProgressSpinner component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "ProgressSpinnerProps": {
                    "description": "Defines valid properties in ProgressSpinner component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "animationDuration",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "2s",
                            "description": "Duration of the rotate animation."
                        },
                        {
                            "name": "fill",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Color for the background of the circle."
                        },
                        {
                            "name": "strokeWidth",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "2",
                            "description": "Width of the circle stroke."
                        }
                    ],
                    "methods": []
                },
                "ProgressSpinnerSlots": {
                    "description": "Defines valid slots in ProgressSpinner component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        }
    },
    "radiobutton": {
        "description": "RadioButton is an extension to standard radio button element with theming.\n\n[Live Demo](https://www.primevue.org/radiobutton/)",
        "components": {
            "default": {
                "description": "RadioButton is an extension to standard radio button element with theming.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "RadioButtonEmits": {
                    "description": "Defines valid emits in RadioButton component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on radio button value change."
                        },
                        {
                            "name": "click",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on radio button click."
                        },
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        }
                    ]
                },
                "RadioButtonProps": {
                    "description": "Defines valid properties in RadioButton component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "aria-label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes a string value that labels the component."
                        },
                        {
                            "name": "aria-labelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "inputClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Style class of the input field."
                        },
                        {
                            "name": "inputId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "inputProps",
                            "optional": true,
                            "readonly": false,
                            "type": "InputHTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLInputElement to the focusable input element inside the component."
                        },
                        {
                            "name": "inputStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Inline style of the input field."
                        },
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Value binding of the checkbox."
                        },
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Name of the input element."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Value of the checkbox."
                        }
                    ],
                    "methods": []
                },
                "RadioButtonSlots": {
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        }
    },
    "rating": {
        "description": "Rating component is a star based selection input.\n\n[Live Demo](https://www.primevue.org/rating/)",
        "components": {
            "default": {
                "description": "Rating component is a star based selection input.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "RatingChangeEvent": {
                    "description": "Custom change event.",
                    "relatedProp": "RatingEmits.change",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Selected option value"
                        }
                    ],
                    "methods": []
                },
                "RatingEmits": {
                    "description": "Defines valid emits in Rating component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "blur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component loses focus."
                        },
                        {
                            "name": "change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "RatingChangeEvent",
                                    "description": "Custom change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a suggestion is selected."
                        },
                        {
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component receives focus."
                        },
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "number",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        }
                    ]
                },
                "RatingProps": {
                    "description": "Defines valid properties in Rating component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "cancel",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "When specified a cancel icon is displayed to allow clearing the value."
                        },
                        {
                            "name": "cancelIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "pi pi-ban",
                            "description": "Icon for the cancelable state."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the element should be disabled."
                        },
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Value of the rating."
                        },
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Name of the element."
                        },
                        {
                            "name": "offIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "pi pi-star-fill",
                            "description": "Icon for the off state."
                        },
                        {
                            "name": "onIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "pi pi-star",
                            "description": "Icon for the on state."
                        },
                        {
                            "name": "readonly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that component is read-only."
                        },
                        {
                            "name": "stars",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "5",
                            "description": "Number of stars."
                        }
                    ],
                    "methods": []
                },
                "RatingSlots": {
                    "description": "Defines valid slots in Rating component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "cancelicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom cancel icon template."
                        },
                        {
                            "name": "officon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>value</b>: number, // Item value\n  }",
                                    "description": "off icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom off icon template."
                        },
                        {
                            "name": "onicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>value</b>: number, // Item value\n  }",
                                    "description": "on icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom on icon template."
                        }
                    ]
                }
            }
        }
    },
    "ripple": {
        "description": "Ripple directive adds ripple effect to the host element.\n\n[Live Demo](https://primevue.org/ripple)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "RippleDirectiveBinding": {
                    "description": "Binding of Ripple directive.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "Omit<DirectiveBinding, \"modifiers\" | \"value\">"
                }
            }
        }
    },
    "row": {
        "description": "Row component is a helper component used to create grouping structures in DataTable.\n\n[Live Demo](https://www.primevue.org/datatable/)",
        "components": {
            "default": {
                "description": "Row component is a helper component used to create grouping structures in DataTable.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "RowEmits": {
                    "description": "Defines valid emits in Row component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "RowProps": {
                    "description": "Defines valid properties in Row component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "RowSlots": {
                    "description": "Defines valid slots in Row component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        }
    },
    "scrollpanel": {
        "description": "ScrollPanel is a cross browser, lightweight and themable alternative to native browser scrollbar.\n\n[Live Demo](https://www.primevue.org/scrollpanel/)",
        "components": {
            "default": {
                "description": "ScrollPanel is a cross browser, lightweight and themable alternative to native browser scrollbar..",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ScrollPanelEmits": {
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "ScrollPanelProps": {
                    "description": "Defines valid properties in ScrollPanel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "step",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "5",
                            "description": "Step factor to scroll the content while pressing the arrow keys."
                        }
                    ],
                    "methods": []
                },
                "ScrollPanelSlots": {
                    "description": "Defines valid slots in Accordion slots.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "default",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": []
                }
            }
        }
    },
    "scrolltop": {
        "description": "ScrollTop gets displayed after a certain scroll position and used to navigates to the top of the page quickly.\n\n[Live Demo](https://www.primevue.org/scrolltop/)",
        "components": {
            "default": {
                "description": "ScrollTop gets displayed after a certain scroll position and used to navigates to the top of the page quickly.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ScrollTopEmits": {
                    "description": "Defines valid emits in ScrollTop component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "ScrollTopProps": {
                    "description": "Defines valid properties in ScrollTop component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "behavior",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "smooth",
                            "description": "Defines the scrolling behaviour, 'smooth' adds an animation and 'auto' scrolls with a jump."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "pi pi-chevron-up",
                            "description": "Icon to display."
                        },
                        {
                            "name": "target",
                            "optional": true,
                            "readonly": false,
                            "type": "\"window\" | \"parent\"",
                            "default": "window",
                            "description": "Target of the ScrollTop."
                        },
                        {
                            "name": "threshold",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "400",
                            "description": "Defines the threshold value of the vertical scroll position of the target to toggle the visibility."
                        }
                    ],
                    "methods": []
                },
                "ScrollTopSlots": {
                    "description": "Defines valid slots in ScrollTop component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        }
    },
    "selectbutton": {
        "description": "SelectButton is used to choose single or multiple items from a list using buttons.\n\n[Live Demo](https://www.primevue.org/selectbutton/)",
        "components": {
            "default": {
                "description": "SelectButton is used to choose single or multiple items from a list using buttons.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "SelectButtonChangeEvent": {
                    "description": "Custom change event.",
                    "relatedProp": "SelectButtonEmits.change",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Single value or an array of values that are selected."
                        }
                    ],
                    "methods": []
                },
                "SelectButtonEmits": {
                    "description": "Defines valid emits in SelectButton component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "blur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on blur."
                        },
                        {
                            "name": "change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "SelectButtonChangeEvent",
                                    "description": "Custom change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on value change."
                        },
                        {
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on focus."
                        },
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        }
                    ]
                },
                "SelectButtonProps": {
                    "description": "Defines valid properties in SelectButton component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "aria-labelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying element."
                        },
                        {
                            "name": "dataKey",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "A property to uniquely identify an option."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the element should be disabled."
                        },
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Value of the component."
                        },
                        {
                            "name": "multiple",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified, allows selecting multiple values."
                        },
                        {
                            "name": "optionDisabled",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the disabled flag of an option, defaults to false when not defined."
                        },
                        {
                            "name": "optionLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the label of an option."
                        },
                        {
                            "name": "optionValue",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the value of an option, defaults to the option itself when not defined."
                        },
                        {
                            "name": "options",
                            "optional": true,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "An array of selectitems to display as the available options."
                        },
                        {
                            "name": "unselectable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether selection can be cleared."
                        }
                    ],
                    "methods": []
                },
                "SelectButtonSlots": {
                    "description": "Defines valid slots in SelectButton component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "option",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>index</b>: number, // Index of the option\n  \t <b>option</b>: any, // Option instance\n  }",
                                    "description": "option slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content for each option."
                        }
                    ]
                }
            }
        }
    },
    "sidebar": {
        "description": "Sidebar is a panel component displayed as an overlay at the edges of the screen.\n\n[Live Demo](https://primevue.org/sidebar)",
        "components": {
            "default": {
                "description": "Sidebar is a panel component displayed as an overlay.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "SidebarEmits": {
                    "description": "Defines valid emits in Sidebar component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when sidebar gets hidden."
                        },
                        {
                            "name": "show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when sidebar gets shown."
                        },
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "boolean",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        }
                    ]
                },
                "SidebarProps": {
                    "description": "Defines valid properties in Sidebar component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "autoZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to automatically manage layering."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "blockScroll",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether background scroll should be blocked when sidebar is visible."
                        },
                        {
                            "name": "closeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "pi pi-times",
                            "description": "Icon to display in the sidebar close button."
                        },
                        {
                            "name": "dismissable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether clicking outside closes the panel."
                        },
                        {
                            "name": "modal",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to a modal layer behind the sidebar."
                        },
                        {
                            "name": "position",
                            "optional": true,
                            "readonly": false,
                            "type": "\"left\" | \"top\" | \"bottom\" | \"right\" | \"full\"",
                            "default": "left",
                            "description": "Specifies the position of the sidebar."
                        },
                        {
                            "name": "showCloseIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to display a close icon inside the panel."
                        },
                        {
                            "name": "visible",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Specifies the visibility of the dialog."
                        }
                    ],
                    "methods": []
                },
                "SidebarSlots": {
                    "description": "Defines valid slots in Sidebar component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content template."
                        },
                        {
                            "name": "header",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header template."
                        }
                    ]
                }
            }
        }
    },
    "skeleton": {
        "description": "Skeleton is a placeholder to display instead of the actual content.\n\n[Live Demo](https://www.primevue.org/skeleton/)",
        "components": {
            "default": {
                "description": "Skeleton is a placeholder to display instead of the actual content.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "SkeletonEmits": {
                    "description": "Defines valid emits in Skeleton component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "SkeletonProps": {
                    "description": "Defines valid properties in Skeleton component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "animation",
                            "optional": true,
                            "readonly": false,
                            "type": "\"none\" | \"wave\"",
                            "default": "wave",
                            "description": "Type of the animation."
                        },
                        {
                            "name": "borderRadius",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Border radius of the element, defaults to value from theme."
                        },
                        {
                            "name": "height",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "1rem",
                            "description": "Height of the element."
                        },
                        {
                            "name": "shape",
                            "optional": true,
                            "readonly": false,
                            "type": "\"circle\" | \"rectangle\"",
                            "default": "rectangle",
                            "description": "Shape of the element."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Size of the Circle or Square."
                        },
                        {
                            "name": "width",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "100%",
                            "description": "Width of the element."
                        }
                    ],
                    "methods": []
                },
                "SkeletonSlots": {
                    "description": "Defines valid slots in Skeleton component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        }
    },
    "slider": {
        "description": "Slider is a component to provide input with a drag handle.\n\n[Live Demo](https://www.primevue.org/slider/)",
        "components": {
            "default": {
                "description": "Slider is a component to provide input with a drag handle.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "SliderEmits": {
                    "description": "Defines valid emits in Slider component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "change",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "number",
                                    "description": "New value"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on value change."
                        },
                        {
                            "name": "slideend",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "SliderSlideEndEvent",
                                    "description": "Custom slide end event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when slide ends."
                        },
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "number | number[]",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        }
                    ]
                },
                "SliderProps": {
                    "description": "Defines valid properties in Slider component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "aria-label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Used to define a string that labels the element."
                        },
                        {
                            "name": "aria-labelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "max",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "100",
                            "description": "Maximum boundary value."
                        },
                        {
                            "name": "min",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Mininum boundary value."
                        },
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "number | number[]",
                            "default": "",
                            "description": "Value of the component."
                        },
                        {
                            "name": "orientation",
                            "optional": true,
                            "readonly": false,
                            "type": "\"horizontal\" | \"vertical\"",
                            "default": "horizontal",
                            "description": "Orientation of the slider."
                        },
                        {
                            "name": "range",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When speficed, allows two boundary values to be picked."
                        },
                        {
                            "name": "step",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Step factor to increment/decrement the value."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        }
                    ],
                    "methods": []
                },
                "SliderSlideEndEvent": {
                    "description": "Custom slide end event.",
                    "relatedProp": "SliderEmits.slideend",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Original event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "New value."
                        }
                    ],
                    "methods": []
                },
                "SliderSlots": {
                    "description": "Defines valid slots in Slider component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        }
    },
    "speeddial": {
        "description": "When pressed, a floating action button can display multiple primary actions that can be performed on a page.\n\n[Live Demo](https://www.primevue.org/speeddial/)",
        "components": {
            "default": {
                "description": "When pressed, a floating action button can display multiple primary actions that can be performed on a page.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "SpeedDialEmits": {
                    "description": "Defines valid emits in SpeedDial component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "blur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component loses focus."
                        },
                        {
                            "name": "click",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Fired when the button element clicked."
                        },
                        {
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component receives focus."
                        },
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Fired when the actions are hidden."
                        },
                        {
                            "name": "show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Fired when the actions are visible."
                        }
                    ]
                },
                "SpeedDialProps": {
                    "description": "Defines valid properties in SpeedDial component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "aria-label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a string value that labels an interactive list element."
                        },
                        {
                            "name": "aria-labelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying list element."
                        },
                        {
                            "name": "buttonClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the button element."
                        },
                        {
                            "name": "class",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the element."
                        },
                        {
                            "name": "direction",
                            "optional": true,
                            "readonly": false,
                            "type": "\"left\" | \"right\" | \"up\" | \"down\" | \"up-left\" | \"up-right\" | \"down-left\" | \"down-right\"",
                            "default": "up",
                            "description": "Specifies the opening direction of actions."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component is disabled."
                        },
                        {
                            "name": "hideIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Hide icon of the button element."
                        },
                        {
                            "name": "hideOnClickOutside",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the actions close when clicked outside."
                        },
                        {
                            "name": "mask",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to show a mask element behind the speeddial."
                        },
                        {
                            "name": "maskClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the mask element."
                        },
                        {
                            "name": "maskStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the mask element."
                        },
                        {
                            "name": "model",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuItem[]",
                            "default": "",
                            "description": "MenuModel instance to define the action items."
                        },
                        {
                            "name": "radius",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Radius for *circle types."
                        },
                        {
                            "name": "rotateAnimation",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Defined to rotate showIcon when hideIcon is not present."
                        },
                        {
                            "name": "showIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "pi pi-plus",
                            "description": "Show icon of the button element."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the element."
                        },
                        {
                            "name": "tooltipOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "SpeedDialTooltipOptions",
                            "default": "",
                            "description": "Whether to display the tooltip on items. The modifiers of Tooltip can be used like an object in it. Valid keys are 'event' and 'position'."
                        },
                        {
                            "name": "transitionDelay",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "30",
                            "description": "Transition delay step for each action item."
                        },
                        {
                            "name": "type",
                            "optional": true,
                            "readonly": false,
                            "type": "\"linear\" | \"circle\" | \"semi-circle\" | \"quarter-circle\"",
                            "default": "linear",
                            "description": "Specifies the opening type of actions."
                        },
                        {
                            "name": "visible",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Specifies the visibility of the overlay."
                        }
                    ],
                    "methods": []
                },
                "SpeedDialSlots": {
                    "description": "Defines valid slots in SpeedDial component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "button",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>toggle()</b>: void, // Toggle metadata\n  }",
                                    "description": "button slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom button template."
                        },
                        {
                            "name": "item",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>item</b>: MenuItem, // Menuitem instance\n  }",
                                    "description": "item slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content for each item."
                        }
                    ]
                },
                "SpeedDialTooltipOptions": {
                    "description": "Defines tooltip options.",
                    "relatedProp": "SpeedDialProps.tooltipOptions",
                    "props": [
                        {
                            "name": "event",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | \"focus\" | \"hover\"",
                            "default": "",
                            "description": "Event to show the tooltip, valid values are hover and focus."
                        },
                        {
                            "name": "position",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | \"left\" | \"top\" | \"bottom\" | \"right\"",
                            "default": "bottom",
                            "description": "Position of element."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                }
            }
        }
    },
    "splitbutton": {
        "description": "SplitButton groups a set of commands in an overlay with a default command.\n\n[Live Demo](https://www.primevue.org/splitbutton/)",
        "components": {
            "default": {
                "description": "SplitButton groups a set of commands in an overlay with a default command.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "SplitButtonEmits": {
                    "description": "Defines valid emits in SplitButton component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "click",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when main button is clicked."
                        }
                    ]
                },
                "SplitButtonProps": {
                    "description": "Defines valid properties in SplitButton component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "string | HTMLElement",
                            "default": "body",
                            "description": "A valid query selector or an HTMLElement to specify where the overlay gets attached.\nSpecial keywords are 'body' for document body and 'self' for the element itself."
                        },
                        {
                            "name": "autoZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to automatically manage layering."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "buttonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLButtonElement to the default button."
                        },
                        {
                            "name": "class",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the element should be disabled."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Name of the icon."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Text of the button."
                        },
                        {
                            "name": "menuButtonIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Name of the menu button icon."
                        },
                        {
                            "name": "menuButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLButtonElement to the menu button."
                        },
                        {
                            "name": "model",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuItem[]",
                            "default": "",
                            "description": "MenuModel instance to define the overlay items."
                        },
                        {
                            "name": "outlined",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Add a border class without a background initially."
                        },
                        {
                            "name": "plain",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Add a plain textual class to the button without a background initially."
                        },
                        {
                            "name": "raised",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Add a shadow to indicate elevation."
                        },
                        {
                            "name": "rounded",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Add a circular border radius to the button."
                        },
                        {
                            "name": "severity",
                            "optional": true,
                            "readonly": false,
                            "type": "\"success\" | \"help\" | \"info\" | \"warning\" | \"danger\" | \"secondary\"",
                            "default": "",
                            "description": "Defines the style of the button."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "\"small\" | \"large\"",
                            "default": "",
                            "description": "Defines the size of the button."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "text",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Add a textual class to the button without a background initially."
                        }
                    ],
                    "methods": []
                },
                "SplitButtonSlots": {
                    "description": "Defines valid slots in SplitButton component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Button part of the content can easily be customized with the default slot instead of using the built-in modes."
                        }
                    ]
                }
            }
        }
    },
    "splitter": {
        "description": "Splitter is utilized to separate and resize panels.\n\n[Live Demo](https://www.primevue.org/splitter/)",
        "components": {
            "default": {
                "description": "Splitter is utilized to separate and resize panels.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "SplitterEmits": {
                    "description": "Defines valid emits in Splitter component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "resizeend",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "SplitterResizeEndEvent",
                                    "description": "Custom resize end event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when resize ends."
                        },
                        {
                            "name": "resizestar",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "SplitterResizeStartEvent",
                                    "description": "Custom resize start event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when resize starts."
                        }
                    ]
                },
                "SplitterProps": {
                    "description": "Defines valid properties in Splitter component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "gutterSize",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "4",
                            "description": "Size of the divider in pixels."
                        },
                        {
                            "name": "layout",
                            "optional": true,
                            "readonly": false,
                            "type": "\"horizontal\" | \"vertical\"",
                            "default": "horizontal",
                            "description": "Orientation of the panels."
                        },
                        {
                            "name": "stateKey",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Storage identifier of a stateful Splitter."
                        },
                        {
                            "name": "stateStorage",
                            "optional": true,
                            "readonly": false,
                            "type": "\"local\" | \"session\"",
                            "default": "session",
                            "description": "Defines where a stateful splitter keeps its state, valid values are 'session' for sessionStorage and 'local' for localStorage."
                        },
                        {
                            "name": "step",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Step factor to increment/decrement the size of the panels while pressing the arrow keys."
                        }
                    ],
                    "methods": []
                },
                "SplitterResizeEndEvent": {
                    "description": "Custom resize end event.",
                    "relatedProp": "undefined.PickListEmits.resizeend",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "sizes",
                            "optional": false,
                            "readonly": false,
                            "type": "number[]",
                            "default": "",
                            "description": "Sizes of the panels"
                        }
                    ],
                    "methods": []
                },
                "SplitterResizeStartEvent": {
                    "description": "Custom resize start event.",
                    "relatedProp": "SplitterEmits.resizestar",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "sizes",
                            "optional": false,
                            "readonly": false,
                            "type": "number[]",
                            "default": "",
                            "description": "Sizes of the panels"
                        }
                    ],
                    "methods": []
                },
                "SplitterSlots": {
                    "description": "Defines valid slots in Splitter slots.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Default slot to detect SplitterPanel components."
                        }
                    ]
                }
            }
        }
    },
    "splitterpanel": {
        "description": "SplitterPanel is a helper component for Splitter component.\n\n[Live Demo](https://www.primevue.org/splitter/)",
        "components": {
            "default": {
                "description": "SplitterPanel is a helper component for Splitter component.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "SplitterPanelEmits": {
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "SplitterPanelProps": {
                    "description": "Defines valid properties in SplitterPanel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "minSize",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Minimum size of the element relative to 100%."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Size of the element relative to 100%."
                        }
                    ],
                    "methods": []
                },
                "SplitterPanelSlots": {
                    "description": "Defines valid slots in SplitterPanel slots.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "default",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": []
                }
            }
        }
    },
    "steps": {
        "description": "Steps components is an indicator for the steps in a wizard workflow. Example below uses nested routes with Steps.\n\n[Live Demo](https://www.primevue.org/steps/)",
        "components": {
            "default": {
                "description": "Steps components is an indicator for the steps in a wizard workflow. Example below uses nested routes with Steps.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "StepsEmits": {
                    "description": "Defines valid emits in Steps component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "StepsProps": {
                    "description": "Defines valid properties in Steps component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "exact",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to apply 'router-link-active-exact' class if route exactly matches the item path."
                        },
                        {
                            "name": "id",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Unique identifier of the element."
                        },
                        {
                            "name": "model",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuItem[]",
                            "default": "",
                            "description": "An array of menuitems."
                        },
                        {
                            "name": "readonly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the items are clickable or not."
                        }
                    ],
                    "methods": []
                },
                "StepsSlots": {
                    "description": "Defines valid slots in Steps component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "item",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>item</b>: MenuItem, // Menuitem instance\n  }",
                                    "description": "item slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom item template."
                        }
                    ]
                }
            }
        }
    },
    "styleclass": {
        "description": "StyleClass manages css classes declaratively to during enter/leave animations or just to toggle classes on an element.\n\n[Live Demo](https://primevue.org/styleclass)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "StyleClassDirectiveBinding": {
                    "description": "Binding of StyleClass directive.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "StyleClassOptions",
                            "default": "",
                            "description": "Value of the StyleClass."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "Omit<DirectiveBinding, \"modifiers\" | \"value\">"
                },
                "StyleClassOptions": {
                    "description": "Defines options of StyleClass.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "enterActiveClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class to add during enter animation."
                        },
                        {
                            "name": "enterClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class to add when item begins to get displayed."
                        },
                        {
                            "name": "enterToClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class to add when item begins to get displayed."
                        },
                        {
                            "name": "hideOnOutsideClick",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to trigger leave animation when outside of the element is clicked."
                        },
                        {
                            "name": "leaveActiveClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class to add during leave animation."
                        },
                        {
                            "name": "leaveClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class to add when item begins to get hidden."
                        },
                        {
                            "name": "leaveToClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class to add when leave animation is completed."
                        },
                        {
                            "name": "selector",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Selector to define the target element. Available selectors are '@next', '@prev', '@parent' and '@grandparent'."
                        },
                        {
                            "name": "toggleClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Adds or removes a class when no enter-leave animation is required."
                        }
                    ],
                    "methods": []
                }
            }
        }
    },
    "tabmenu": {
        "description": "TabMenu is a navigation component that displays items as tab headers. Example below uses nested routes with TabMenu.\n\n[Live Demo](https://www.primevue.org/tabmenu/)",
        "components": {
            "default": {
                "description": "TabMenu is a navigation component that displays items as tab headers. Example below uses nested routes with TabMenu.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TabMenuChangeEvent": {
                    "description": "Custom change event.",
                    "relatedProp": "TabMenuEmits['tab-change']",
                    "props": [
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the selected tab"
                        },
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        }
                    ],
                    "methods": []
                },
                "TabMenuEmits": {
                    "description": "Defines valid emits in TabMenu component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "tab-change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TabMenuChangeEvent",
                                    "description": "Custom tab change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when an active tab is changed."
                        }
                    ]
                },
                "TabMenuProps": {
                    "description": "Defines valid properties in TabMenu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "activeIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Active index of menuitem."
                        },
                        {
                            "name": "aria-label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a string value that labels an interactive element."
                        },
                        {
                            "name": "aria-labelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "exact",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Defines if active route highlight should match the exact route path."
                        },
                        {
                            "name": "model",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuItem[]",
                            "default": "",
                            "description": "An array of menuitems."
                        }
                    ],
                    "methods": []
                },
                "TabMenuSlots": {
                    "description": "Defines valid slots in TabMenu component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "item",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>item</b>: MenuItem, // Menuitem instance\n  }",
                                    "description": "item slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content for each item."
                        }
                    ]
                }
            }
        }
    },
    "tabpanel": {
        "description": "TabPanel is a helper component for TabPanel component.\n\n[Live Demo](https://www.primevue.org/tabview/)",
        "components": {
            "default": {
                "description": "TabPanel is a helper component for TabPanel component.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TabPanelEmits": {
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "TabPanelProps": {
                    "description": "Defines valid properties in TabPanel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "contentClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the tab content."
                        },
                        {
                            "name": "contentProps",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLDivElement to the tab content."
                        },
                        {
                            "name": "contentStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the tab content."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the tab is disabled."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Orientation of tab headers."
                        },
                        {
                            "name": "headerActionProps",
                            "optional": true,
                            "readonly": false,
                            "type": "AnchorHTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLAnchorElement to the focusable anchor element inside the tab header."
                        },
                        {
                            "name": "headerClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the tab header."
                        },
                        {
                            "name": "headerProps",
                            "optional": true,
                            "readonly": false,
                            "type": "LiHTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLLiElement to the tab header."
                        },
                        {
                            "name": "headerStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the tab header."
                        }
                    ],
                    "methods": []
                },
                "TabPanelSlots": {
                    "description": "Defines valid slots in TabPanel slots.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "default",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "header",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": []
                }
            }
        }
    },
    "tabview": {
        "description": "TabView is a container component to group content with tabs.\n\n[Live Demo](https://www.primevue.org/tabview/)",
        "components": {
            "default": {
                "description": "TabView is a container component to group content with tabs.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TabViewChangeEvent": {
                    "description": "Custom tab change event.",
                    "relatedProp": "TabViewEmits['tab-change']",
                    "props": [
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the selected tab"
                        },
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        }
                    ],
                    "methods": [],
                    "extendedBy": "TabViewClickEvent"
                },
                "TabViewClickEvent": {
                    "description": "Custom tab change event.",
                    "relatedProp": "TabViewEmits['tab-click']",
                    "props": [
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the selected tab"
                        },
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "TabViewChangeEvent"
                },
                "TabViewEmits": {
                    "description": "Defines valid emits in TabView component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "tab-change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TabViewChangeEvent",
                                    "description": "Custom tab change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when an active tab is changed."
                        },
                        {
                            "name": "tab-click",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TabViewClickEvent",
                                    "description": "Custom tab click event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when an active tab is clicked."
                        },
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "number",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        }
                    ]
                },
                "TabViewProps": {
                    "description": "Defines valid properties in TabView component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "activeIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Index of the active tab."
                        },
                        {
                            "name": "lazy",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, hidden tabs are not rendered at all. Defaults to false that hides tabs with css."
                        },
                        {
                            "name": "nextButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLButtonElement to the next button."
                        },
                        {
                            "name": "previousButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLButtonElement to the previous button."
                        },
                        {
                            "name": "scrollable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled displays buttons at each side of the tab headers to scroll the tab list."
                        },
                        {
                            "name": "selectOnFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, the focused tab is activated."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Index of the element in tabbing order."
                        }
                    ],
                    "methods": []
                },
                "TabViewSlots": {
                    "description": "Defines valid slots in TabView slots.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Default slot to detect TabPanel components."
                        }
                    ]
                }
            }
        }
    },
    "tag": {
        "description": "Tag component is used to categorize content.\n\n[Live Demo](https://www.primevue.org/tag)",
        "components": {
            "default": {
                "description": "Tag component is used to categorize content.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TagEmits": {
                    "description": "Defines valid emits in Tag component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "TagProps": {
                    "description": "Defines valid properties in Tag component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon of the tag to display next to the value."
                        },
                        {
                            "name": "rounded",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the corners of the tag are rounded."
                        },
                        {
                            "name": "severity",
                            "optional": true,
                            "readonly": false,
                            "type": "\"success\" | \"info\" | \"warning\" | \"danger\"",
                            "default": "",
                            "description": "Severity type of the tag."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Value to display inside the tag."
                        }
                    ],
                    "methods": []
                },
                "TagSlots": {
                    "description": "Defines valid slots in Tag component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content template"
                        }
                    ]
                }
            }
        }
    },
    "terminal": {
        "description": "Terminal is a text based user interface.\n\n[Live Demo](https://www.primevue.org/terminal)",
        "components": {
            "default": {
                "description": "Terminal is a text based user interface.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TerminalEmits": {
                    "description": "Defines valid emits in Terminal component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "TerminalProps": {
                    "description": "Defines valid properties in Terminal component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "prompt",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Prompt text for each command."
                        },
                        {
                            "name": "welcomeMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Initial text to display on terminal."
                        }
                    ],
                    "methods": []
                },
                "TerminalSlots": {
                    "description": "Defines valid slots in Terminal component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        }
    },
    "terminalservice": {
        "description": "[Live Demo](https://www.primevue.org/terminal/)",
        "model": {
            "TerminalServiceOptions": {
                "description": "Confirmation Service methods.",
                "props": {
                    "description": "",
                    "values": []
                },
                "methods": {
                    "description": "",
                    "values": [
                        {
                            "name": "emit",
                            "parameters": [
                                {
                                    "name": "action",
                                    "optional": false,
                                    "type": "undefined | \"command\" | \"response\""
                                },
                                {
                                    "name": "params",
                                    "optional": true,
                                    "type": "any"
                                }
                            ],
                            "returnType": "void",
                            "description": "Emits the terminal using the action options."
                        },
                        {
                            "name": "off",
                            "parameters": [
                                {
                                    "name": "action",
                                    "optional": false,
                                    "type": "undefined | \"command\" | \"response\""
                                },
                                {
                                    "name": "fn",
                                    "optional": false,
                                    "type": "any"
                                }
                            ],
                            "returnType": "void",
                            "description": "Closes the terminal using the action options."
                        },
                        {
                            "name": "on",
                            "parameters": [
                                {
                                    "name": "action",
                                    "optional": false,
                                    "type": "undefined | \"command\" | \"response\""
                                },
                                {
                                    "name": "fn",
                                    "optional": false,
                                    "type": "any"
                                }
                            ],
                            "returnType": "void",
                            "description": "Displays the terminal using the action options."
                        }
                    ]
                }
            }
        }
    },
    "textarea": {
        "description": "Textarea is a multi-line text input element.\n\n[Live Demo](https://www.primevue.org/textarea/)",
        "components": {
            "default": {
                "description": "Textarea is a multi-line text input element.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TextareaEmits": {
                    "description": "Defines valid emits in Textarea component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "update:modelValue",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": []
                },
                "TextareaProps": {
                    "description": "Defines valid properties in Textarea component. In addition to these, all properties of TextareaHTMLAttributes can be used in this component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "autoResize",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, height of textarea changes as being typed."
                        },
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Value of the component."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "TextareaHTMLAttributes"
                },
                "TextareaSlots": {
                    "description": "Defines valid slots in Textarea component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        }
    },
    "tieredmenu": {
        "description": "TieredMenu displays submenus in nested overlays.\n\n[Live Demo](https://www.primevue.org/menu/)",
        "components": {
            "default": {
                "description": "TieredMenu displays submenus in nested overlays.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Hides the overlay."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TieredMenuEmits": {
                    "description": "Defines valid emits in TieredMenuMenu component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "before-hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke before the popup is hidden."
                        },
                        {
                            "name": "before-show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke before the popup is shown."
                        },
                        {
                            "name": "blur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component loses focus."
                        },
                        {
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component receives focus."
                        },
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when the popup is hidden."
                        },
                        {
                            "name": "show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when the popup is shown."
                        }
                    ]
                },
                "TieredMenuProps": {
                    "description": "Defines valid properties in TieredMenuMenu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "string | HTMLElement",
                            "default": "body",
                            "description": "A valid query selector or an HTMLElement to specify where the overlay gets attached."
                        },
                        {
                            "name": "aria-label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a string value that labels an interactive element."
                        },
                        {
                            "name": "aria-labelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying menu element."
                        },
                        {
                            "name": "autoZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to automatically manage layering."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "exact",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to apply 'router-link-active-exact' class if route exactly matches the item path."
                        },
                        {
                            "name": "model",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuItem[]",
                            "default": "",
                            "description": "An array of menuitems."
                        },
                        {
                            "name": "popup",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if menu would displayed as a popup."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        }
                    ],
                    "methods": []
                },
                "TieredMenuSlots": {
                    "description": "Defines valid slots in TieredMenuMenu component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "item",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>item</b>: MenuItem, // Menuitem instance\n  }",
                                    "description": "item slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content for each item."
                        }
                    ]
                }
            }
        }
    },
    "timeline": {
        "description": "Timeline visualizes a series of chained events.\n\n[Live Demo](https://primevue.org/timeline)",
        "components": {
            "default": {
                "description": "Timeline visualizes a series of chained events.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TimelineEmits": {
                    "description": "Defines valid emits in Timeline component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "TimelineProps": {
                    "description": "Defines valid properties in Timeline component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "align",
                            "optional": true,
                            "readonly": false,
                            "type": "\"alternate\" | \"left\" | \"top\" | \"bottom\" | \"right\"",
                            "default": "left",
                            "description": "Position of the timeline bar relative to the content."
                        },
                        {
                            "name": "dataKey",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Name of the field that uniquely identifies the a record in the data."
                        },
                        {
                            "name": "layout",
                            "optional": true,
                            "readonly": false,
                            "type": "\"horizontal\" | \"vertical\"",
                            "default": "horizontal",
                            "description": "Orientation of the timeline."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "An array of events to display."
                        }
                    ],
                    "methods": []
                },
                "TimelineSlots": {
                    "description": "Defines valid slots in Timeline component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "connector",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>index</b>: number, // Index of item\n  \t <b>item</b>: any, // Item data\n  }"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom connector template."
                        },
                        {
                            "name": "content",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>index</b>: number, // Index of item\n  \t <b>item</b>: any, // Item data\n  }",
                                    "description": "content slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content template"
                        },
                        {
                            "name": "marker",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>index</b>: number, // Index of item\n  \t <b>item</b>: any, // Item data\n  }",
                                    "description": "marker slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom marker template."
                        },
                        {
                            "name": "opposite",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>index</b>: number, // Index of item\n  \t <b>item</b>: any, // Item data\n  }",
                                    "description": "opposite slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom opposite template."
                        }
                    ]
                }
            }
        }
    },
    "toast": {
        "description": "Toast is used to display messages in an overlay.\n\n[Live Demo](https://www.primevue.org/toast/)",
        "components": {
            "default": {
                "description": "Toast is used to display messages in an overlay.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ToastBreakpointsType": {
                    "description": "Defines breakpoints type in Toast component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "ToastEmits": {
                    "description": "Defines valid emits in Toast component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "close",
                            "parameters": [
                                {
                                    "name": "message",
                                    "optional": false,
                                    "type": "ToastMessageOptions",
                                    "description": "Toast message."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the toast is closed."
                        },
                        {
                            "name": "life-end",
                            "parameters": [
                                {
                                    "name": "message",
                                    "optional": false,
                                    "type": "ToastMessageOptions",
                                    "description": "Toast message."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the toast's timeout is over."
                        }
                    ]
                },
                "ToastMessageOptions": {
                    "description": "Defines message options in Toast component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "closable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the message can be closed manually using the close icon."
                        },
                        {
                            "name": "contentStyleClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the content."
                        },
                        {
                            "name": "detail",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Detail content of the message."
                        },
                        {
                            "name": "group",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Key of the Toast to display the message."
                        },
                        {
                            "name": "life",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Delay in milliseconds to close the message automatically."
                        },
                        {
                            "name": "severity",
                            "optional": true,
                            "readonly": false,
                            "type": "\"error\" | \"success\" | \"info\" | \"warn\"",
                            "default": "info",
                            "description": "Severity level of the message."
                        },
                        {
                            "name": "styleClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the message."
                        },
                        {
                            "name": "summary",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Summary content of the message."
                        }
                    ],
                    "methods": []
                },
                "ToastProps": {
                    "description": "Defines valid properties in Toast component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "autoZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to automatically manage layering."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "breakpoints",
                            "optional": true,
                            "readonly": false,
                            "type": "ToastBreakpointsType",
                            "default": "",
                            "description": "Object literal to define styles per screen size."
                        },
                        {
                            "name": "closeButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLButtonElement to the close button."
                        },
                        {
                            "name": "closeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "pi pi-times",
                            "description": "Icon to display in the toast close button."
                        },
                        {
                            "name": "errorIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "pi pi-times",
                            "description": "Icon to display in the toast with error severity."
                        },
                        {
                            "name": "group",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Unique identifier of a message group."
                        },
                        {
                            "name": "infoIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "pi pi-info-circle",
                            "description": "Icon to display in the toast with info severity."
                        },
                        {
                            "name": "position",
                            "optional": true,
                            "readonly": false,
                            "type": "\"center\" | \"top-left\" | \"top-center\" | \"top-right\" | \"bottom-left\" | \"bottom-center\" | \"bottom-right\"",
                            "default": "top-right",
                            "description": "Position of the toast in viewport."
                        },
                        {
                            "name": "successIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "pi pi-check",
                            "description": "Icon to display in the toast with success severity."
                        },
                        {
                            "name": "warnIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "pi pi-exclamation-triangle",
                            "description": "Icon to display in the toast with warn severity."
                        }
                    ],
                    "methods": []
                },
                "ToastSlots": {
                    "description": "Defines valid slot in Toast component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "message",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>message</b>: any, // Message of the component\n  }",
                                    "description": "message slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom message template."
                        }
                    ]
                }
            }
        }
    },
    "toastservice-usetoast": {
        "description": "[Live Demo](https://www.primevue.org/toast/)",
        "model": {
            "ToastServiceMethods": {
                "description": "Toast Service methods.",
                "props": {
                    "description": "",
                    "values": []
                },
                "methods": {
                    "description": "",
                    "values": [
                        {
                            "name": "add",
                            "parameters": [
                                {
                                    "name": "message",
                                    "optional": false,
                                    "type": "ToastMessageOptions",
                                    "description": "Message instance."
                                }
                            ],
                            "returnType": "void",
                            "description": "Displays the message in a suitable Toast component."
                        },
                        {
                            "name": "removeAllGroups",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Clears all the messages."
                        },
                        {
                            "name": "removeGroup",
                            "parameters": [
                                {
                                    "name": "group",
                                    "optional": false,
                                    "type": "string",
                                    "description": "Name of the message group."
                                }
                            ],
                            "returnType": "void",
                            "description": "Clears the messages that belongs to the group."
                        }
                    ]
                }
            }
        }
    },
    "togglebutton": {
        "description": "ToggleButton is used to select a boolean value using a button.\n\n[Live Demo](https://www.primevue.org/togglebutton/)",
        "components": {
            "default": {
                "description": "ToggleButton is used to select a boolean value using a button.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ToggleButtonEmits": {
                    "description": "Defines valid emits in ToggleButton component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "blur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component loses focus."
                        },
                        {
                            "name": "change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on value change."
                        },
                        {
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component receives focus."
                        },
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "boolean",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        }
                    ]
                },
                "ToggleButtonProps": {
                    "description": "Defines valid properties in ToggleButton component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "aria-label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes a string value that labels the component."
                        },
                        {
                            "name": "aria-labelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the element should be disabled."
                        },
                        {
                            "name": "iconPos",
                            "optional": true,
                            "readonly": false,
                            "type": "\"left\" | \"right\"",
                            "default": "left",
                            "description": "Position of the icon."
                        },
                        {
                            "name": "inputClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Style class of the input field."
                        },
                        {
                            "name": "inputId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the focus input to match a label defined for the chips."
                        },
                        {
                            "name": "inputProps",
                            "optional": true,
                            "readonly": false,
                            "type": "InputHTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLInputElement to the focusable input element inside the component."
                        },
                        {
                            "name": "inputStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Inline style of the input field."
                        },
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Value of the component."
                        },
                        {
                            "name": "offIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon for the off state."
                        },
                        {
                            "name": "offLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "no",
                            "description": "Label for the off state."
                        },
                        {
                            "name": "onIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon for the on state."
                        },
                        {
                            "name": "onLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "yes",
                            "description": "Label for the on state."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        }
                    ],
                    "methods": []
                },
                "ToggleButtonSlots": {
                    "description": "Defines valid slots in ToggleButton component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        }
    },
    "toolbar": {
        "description": "Toolbar is a grouping component for buttons and other content.\n\n[Live Demo](https://www.primevue.org/toolbar/)",
        "components": {
            "default": {
                "description": "Toolbar is a grouping component for buttons and other content.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ToolbarEmits": {
                    "description": "Defines valid emits in Toolbar component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "ToolbarProps": {
                    "description": "Defines valid properties in Toolbar component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "aria-labelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a string value that labels an interactive element."
                        }
                    ],
                    "methods": []
                },
                "ToolbarSlots": {
                    "description": "Defines valid slots in Toolbar slots.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "center",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom center template."
                        },
                        {
                            "name": "end",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom end template."
                        },
                        {
                            "name": "start",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom start template."
                        }
                    ]
                }
            }
        }
    },
    "tooltip": {
        "description": "Tooltip directive provides advisory information for a component.\n\n[Live Demo](https://primevue.org/tooltip)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TooltipDirectiveBinding": {
                    "description": "Binding of Tooltip directive.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "modifiers",
                            "optional": true,
                            "readonly": false,
                            "type": "TooltipDirectiveModifiers",
                            "default": "",
                            "description": "Modifiers of the tooltip."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "string | TooltipOptions",
                            "default": "",
                            "description": "Value of the tooltip."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "Omit<DirectiveBinding, \"modifiers\" | \"value\">"
                },
                "TooltipDirectiveModifiers": {
                    "description": "Defines modifiers of Tooltip.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "bottom",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Bottom position for Tooltip."
                        },
                        {
                            "name": "focus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Focus event for Tooltip."
                        },
                        {
                            "name": "left",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Left position for Tooltip."
                        },
                        {
                            "name": "right",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Right position for Tooltip."
                        },
                        {
                            "name": "top",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Top position for Tooltip."
                        }
                    ],
                    "methods": []
                },
                "TooltipOptions": {
                    "description": "Defines options of Tooltip.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "class",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "When present, it adds a custom class to the tooltip."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "escape",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "By default the tooltip contents are not rendered as text. Set to true to support html tags in the content."
                        },
                        {
                            "name": "fitContent",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Automatically adjusts the element position when there is not enough space on the selected position."
                        },
                        {
                            "name": "id",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "When present, it adds a custom id to the tooltip."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Text of the tooltip."
                        }
                    ],
                    "methods": []
                }
            }
        }
    },
    "tree": {
        "description": "Tree is used to display hierarchical data.\n\n[Live Demo](https://www.primevue.org/tree/)",
        "components": {
            "default": {
                "description": "Tree is used to display hierarchical data.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TreeEmits": {
                    "description": "Defines valid slots in Tree component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "node-collapse",
                            "parameters": [
                                {
                                    "name": "node",
                                    "optional": false,
                                    "type": "TreeNode",
                                    "description": "Node instance."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is collapsed."
                        },
                        {
                            "name": "node-expand",
                            "parameters": [
                                {
                                    "name": "node",
                                    "optional": false,
                                    "type": "TreeNode",
                                    "description": "Node instance."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is expanded."
                        },
                        {
                            "name": "node-select",
                            "parameters": [
                                {
                                    "name": "node",
                                    "optional": false,
                                    "type": "TreeNode",
                                    "description": "Node instance."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is selected."
                        },
                        {
                            "name": "node-unselect",
                            "parameters": [
                                {
                                    "name": "node",
                                    "optional": false,
                                    "type": "TreeNode",
                                    "description": "Node instance."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is unselected."
                        },
                        {
                            "name": "update:expandedKeys",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "TreeExpandedKeys",
                                    "description": "New expanded keys."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the expanded keys change."
                        },
                        {
                            "name": "update:selectionKeys",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TreeSelectionKeys"
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the selection keys change."
                        }
                    ]
                },
                "TreeExpandedKeys": {
                    "description": "Custom expanded keys metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "TreeNode": {
                    "description": "Custom TreeNode metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeNode[]",
                            "default": "",
                            "description": "An array of treenodes as children."
                        },
                        {
                            "name": "collapsedIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to use in collapsed state."
                        },
                        {
                            "name": "data",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Data represented by the node."
                        },
                        {
                            "name": "expandedIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to use in expanded state."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon of the node to display next to content."
                        },
                        {
                            "name": "key",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Mandatory unique key of the node."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Label of the node."
                        },
                        {
                            "name": "leaf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Specifies if the node has children. Used in lazy loading."
                        },
                        {
                            "name": "selectable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the node is selectable when selection mode is enabled."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the node."
                        },
                        {
                            "name": "styleClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the node."
                        },
                        {
                            "name": "type",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Type of the node to match a template."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "TreeProps": {
                    "description": "Defines valid properties in Tree component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "aria-label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a string value that labels an interactive element."
                        },
                        {
                            "name": "aria-labelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying menu element."
                        },
                        {
                            "name": "expandedKeys",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeExpandedKeys",
                            "default": "",
                            "description": "A map of keys to represent the expansion state in controlled mode."
                        },
                        {
                            "name": "filter",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified, displays an input field to filter the items."
                        },
                        {
                            "name": "filterBy",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "label",
                            "description": "When filtering is enabled, filterBy decides which field or fields (comma separated) to search against."
                        },
                        {
                            "name": "filterLocale",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Locale to use in filtering. The default locale is the host environment's current locale."
                        },
                        {
                            "name": "filterMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"strict\" | \"lenient\"",
                            "default": "lenient",
                            "description": "Mode for filtering."
                        },
                        {
                            "name": "filterPlaceholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Placeholder text to show when filter input is empty."
                        },
                        {
                            "name": "loading",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display loading indicator."
                        },
                        {
                            "name": "loadingIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "pi pi-spin",
                            "description": "Icon to display when tree is loading."
                        },
                        {
                            "name": "metaKeySelection",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Defines how multiple items can be selected, when true metaKey needs to be pressed to select or unselect an item and when set to false selection of each item can be toggled individually.\nOn touch enabled devices, metaKeySelection is turned off automatically."
                        },
                        {
                            "name": "scrollHeight",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Height of the scroll viewport in fixed units or the 'flex' keyword for a dynamic size."
                        },
                        {
                            "name": "selectionKeys",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeSelectionKeys",
                            "default": "",
                            "description": "A map of keys to control the selection state."
                        },
                        {
                            "name": "selectionMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"multiple\" | \"checkbox\" | \"single\"",
                            "default": "",
                            "description": "Defines the selection mode."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeNode[]",
                            "default": "",
                            "description": "An array of treenodes."
                        }
                    ],
                    "methods": []
                },
                "TreeSelectionKeys": {
                    "description": "Custom selection keys metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "TreeSlots": {
                    "description": "Defines valid slots in Tree component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "Function"
                        }
                    ],
                    "methods": []
                }
            }
        }
    },
    "treeselect": {
        "description": "TreeSelect is a form component to choose from hierarchical data.\n\n[Live Demo](https://www.primevue.org/treeselect/)",
        "components": {
            "default": {
                "description": "TreeSelect is a form component to choose from hierarchical data.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TreeSelectEmits": {
                    "description": "Defines valid emits in TreeSelect component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "before-hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke before the overlay is hidden."
                        },
                        {
                            "name": "before-show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke before the overlay is shown."
                        },
                        {
                            "name": "change",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "string[]",
                                    "description": "Selected node keys"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on value change."
                        },
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when the overlay is hidden."
                        },
                        {
                            "name": "node-collapse",
                            "parameters": [
                                {
                                    "name": "node",
                                    "optional": false,
                                    "type": "TreeNode",
                                    "description": "Node instance."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is collapsed."
                        },
                        {
                            "name": "node-expand",
                            "parameters": [
                                {
                                    "name": "node",
                                    "optional": false,
                                    "type": "TreeNode",
                                    "description": "Node instance."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is expanded."
                        },
                        {
                            "name": "node-select",
                            "parameters": [
                                {
                                    "name": "node",
                                    "optional": false,
                                    "type": "TreeNode",
                                    "description": "Node instance."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is selected."
                        },
                        {
                            "name": "node-unselect",
                            "parameters": [
                                {
                                    "name": "node",
                                    "optional": false,
                                    "type": "TreeNode",
                                    "description": "Node instance."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is unselected."
                        },
                        {
                            "name": "show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when the overlay is shown."
                        },
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        }
                    ]
                },
                "TreeSelectProps": {
                    "description": "Defines valid properties in TreeSelect component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "string | HTMLElement",
                            "default": "body",
                            "description": "A valid query selector or an HTMLElement to specify where the overlay gets attached."
                        },
                        {
                            "name": "aria-label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes a string value that labels the component."
                        },
                        {
                            "name": "aria-labelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "display",
                            "optional": true,
                            "readonly": false,
                            "type": "\"comma\" | \"chip\"",
                            "default": "comma",
                            "description": "Defines how the selected items are displayed."
                        },
                        {
                            "name": "emptyMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "No results found",
                            "description": "Text to display when there are no options available. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "inputClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Style class of the input field."
                        },
                        {
                            "name": "inputId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "inputProps",
                            "optional": true,
                            "readonly": false,
                            "type": "InputHTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLInputElement to the focusable input element inside the component."
                        },
                        {
                            "name": "inputStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Inline style of the input field."
                        },
                        {
                            "name": "metaKeySelection",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Defines how multiple items can be selected, when true metaKey needs to be pressed to select or unselect an item and when set to false selection of each item can be toggled individually.\nOn touch enabled devices, metaKeySelection is turned off automatically."
                        },
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Value of the component."
                        },
                        {
                            "name": "options",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeNode[]",
                            "default": "",
                            "description": "An array of treenodes."
                        },
                        {
                            "name": "panelClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the overlay panel."
                        },
                        {
                            "name": "placeholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Label to display when there are no selections."
                        },
                        {
                            "name": "scrollHeight",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "200px",
                            "description": "Height of the viewport, a scrollbar is defined if height of list exceeds this value."
                        },
                        {
                            "name": "selectionMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"multiple\" | \"checkbox\" | \"single\"",
                            "default": "",
                            "description": "Defines the selection mode."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        }
                    ],
                    "methods": []
                },
                "TreeSelectSlots": {
                    "description": "Defines valid slots in TreeSelect component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "empty",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom empty template."
                        },
                        {
                            "name": "footer",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>options</b>: TreeNode, // An array of treenodes.\n  \t <b>value</b>: any, // Selected value\n  }",
                                    "description": "footer slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom footer template."
                        },
                        {
                            "name": "header",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>options</b>: TreeNode, // An array of treenodes.\n  \t <b>value</b>: any, // Selected value\n  }",
                                    "description": "header slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header template."
                        },
                        {
                            "name": "indicator",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom indicator template."
                        },
                        {
                            "name": "value",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>placeholder</b>: string, // Placeholder\n  \t <b>value</b>: any, // Selected value\n  }",
                                    "description": "value slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom value template."
                        }
                    ]
                }
            }
        }
    },
    "treetable": {
        "description": "TreeTable is used to display hierarchical data in tabular format.\n\n[Live Demo](https://www.primevue.org/treetable/)",
        "components": {
            "default": {
                "description": "TreeTable is used to display hierarchical data in tabular format.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TreeTableEmits": {
                    "description": "Defines valid emits in TreeTable component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "column-resize-end",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a column is resized."
                        },
                        {
                            "name": "filter",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TreeTableFilterEvent",
                                    "description": "Custom filter event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Event to emit after filtering, not triggered in lazy mode."
                        },
                        {
                            "name": "node-collapse",
                            "parameters": [
                                {
                                    "name": "node",
                                    "optional": false,
                                    "type": "TreeNode",
                                    "description": "Node instance."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is collapsed."
                        },
                        {
                            "name": "node-expand",
                            "parameters": [
                                {
                                    "name": "node",
                                    "optional": false,
                                    "type": "TreeNode",
                                    "description": "Node instance."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is expanded."
                        },
                        {
                            "name": "node-select",
                            "parameters": [
                                {
                                    "name": "node",
                                    "optional": false,
                                    "type": "TreeNode",
                                    "description": "Node instance."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is selected."
                        },
                        {
                            "name": "node-unselect",
                            "parameters": [
                                {
                                    "name": "node",
                                    "optional": false,
                                    "type": "TreeNode",
                                    "description": "Node instance."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is unselected."
                        },
                        {
                            "name": "page",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TreeTablePageEvent",
                                    "description": "Custom page event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on pagination. Sort and Filter information is also available for lazy loading implementation."
                        },
                        {
                            "name": "sort",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TreeTableSortEvent",
                                    "description": "Custom sort event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on sort. Page and Filter information is also available for lazy loading implementation."
                        },
                        {
                            "name": "update:expandedKeys",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "TreeTableExpandedKeys",
                                    "description": "New expanded keys."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the expanded keys change."
                        },
                        {
                            "name": "update:first",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "number",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the first changes."
                        },
                        {
                            "name": "update:multiSortMeta",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "undefined | null | TreeTableSortMeta[]",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the multiSortMeta changes."
                        },
                        {
                            "name": "update:rows",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "number",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the rows changes."
                        },
                        {
                            "name": "update:selectionKeys",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TreeTableSelectionKeys"
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the selection keys change."
                        },
                        {
                            "name": "update:sortField",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "string",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the sortField changes."
                        },
                        {
                            "name": "update:sortOrder",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "undefined | number",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the sortOrder changes."
                        }
                    ]
                },
                "TreeTableExpandedKeys": {
                    "description": "Custom expanded keys metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "TreeTableFilterEvent": {
                    "description": "Custom filter event.",
                    "relatedProp": "TreeTableEmits.sort",
                    "props": [
                        {
                            "name": "filterMatchModes",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | \"endsWith\" | \"startsWith\" | \"contains\" | \"in\" | \"notContains\" | \"equals\" | \"notEquals\" | \"lt\" | \"lte\" | \"gt\" | \"gte\" | \"between\" | \"dateIs\" | \"dateIsNot\" | \"dateBefore\" | \"dateAfter\"",
                            "default": "",
                            "description": "Match modes per field"
                        },
                        {
                            "name": "filteredValue",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Filtered collection (non-lazy only)"
                        },
                        {
                            "name": "filters",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeTableFilterMeta",
                            "default": "",
                            "description": "Collection of active filters"
                        },
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of first record"
                        },
                        {
                            "name": "multiSortMeta",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | null | TreeTableSortMeta[]",
                            "default": "",
                            "description": "MultiSort metadata"
                        },
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        },
                        {
                            "name": "rows",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Number of rows to display in new page"
                        },
                        {
                            "name": "sortField",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | string | Function",
                            "default": "",
                            "description": "Field to sort against"
                        },
                        {
                            "name": "sortOrder",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | null | 0 | 1 | -1",
                            "default": "",
                            "description": "Sort order as integer"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "TreeTableSortEvent"
                },
                "TreeTableFilterMeta": {
                    "description": "Custom filter metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "string | TreeTableFilterMetaData | TreeTableOperatorFilterMetaData"
                        }
                    ],
                    "methods": []
                },
                "TreeTableFilterMetaData": {
                    "description": "Custom treetable filter metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "matchMode",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | \"endsWith\" | \"startsWith\" | \"contains\" | \"in\" | \"notContains\" | \"equals\" | \"notEquals\" | \"lt\" | \"lte\" | \"gt\" | \"gte\" | \"between\" | \"dateIs\" | \"dateIsNot\" | \"dateBefore\" | \"dateAfter\"",
                            "default": "",
                            "description": "Filter match mode"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Filter value"
                        }
                    ],
                    "methods": []
                },
                "TreeTableOperatorFilterMetaData": {
                    "description": "Custom operator filter metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "constraints",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeTableFilterMetaData[]",
                            "default": "",
                            "description": "Array of filter meta datas."
                        },
                        {
                            "name": "operator",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Filter operator"
                        }
                    ],
                    "methods": []
                },
                "TreeTablePageEvent": {
                    "description": "Custom page event.",
                    "relatedProp": "TreeTableEmits.sort",
                    "props": [
                        {
                            "name": "filterMatchModes",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | \"endsWith\" | \"startsWith\" | \"contains\" | \"in\" | \"notContains\" | \"equals\" | \"notEquals\" | \"lt\" | \"lte\" | \"gt\" | \"gte\" | \"between\" | \"dateIs\" | \"dateIsNot\" | \"dateBefore\" | \"dateAfter\"",
                            "default": "",
                            "description": "Match modes per field"
                        },
                        {
                            "name": "filters",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeTableFilterMeta",
                            "default": "",
                            "description": "Collection of active filters"
                        },
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of first record"
                        },
                        {
                            "name": "multiSortMeta",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | null | TreeTableSortMeta[]",
                            "default": "",
                            "description": "MultiSort metadata"
                        },
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        },
                        {
                            "name": "page",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "New page number"
                        },
                        {
                            "name": "pageCount",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Total page count"
                        },
                        {
                            "name": "rows",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Number of rows to display in new page"
                        },
                        {
                            "name": "sortField",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | string | Function",
                            "default": "",
                            "description": "Field to sort against"
                        },
                        {
                            "name": "sortOrder",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | null | 0 | 1 | -1",
                            "default": "",
                            "description": "Sort order as integer"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "TreeTableSortEvent"
                },
                "TreeTableProps": {
                    "description": "Defines valid properties in TreeTable component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "alwaysShowPaginator",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show it even there is only one page."
                        },
                        {
                            "name": "autoLayout",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the cell widths scale according to their content or not."
                        },
                        {
                            "name": "columnResizeMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"fit\" | \"expand\"",
                            "default": "fit",
                            "description": "Defines whether the overall table width should change on column resize."
                        },
                        {
                            "name": "currentPageReportTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "'({currentPage} of {totalPages})'",
                            "description": "Template of the current page report element. It displays information about the pagination state.\n\n- {currentPage}\n- {totalPages}\n- {rows}\n- {first}\n- {last}\n- {totalRecords}"
                        },
                        {
                            "name": "defaultSortOrder",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Default sort order of an unsorted column."
                        },
                        {
                            "name": "expandedKeys",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTableExpandedKeys",
                            "default": "",
                            "description": "A map of keys to represent the state of the tree expansion state in controlled mode."
                        },
                        {
                            "name": "filterLocale",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Locale to use in filtering. The default locale is the host environment's current locale."
                        },
                        {
                            "name": "filterMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"strict\" | \"lenient\"",
                            "default": "lenient",
                            "description": "Mode for filtering."
                        },
                        {
                            "name": "filters",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTableFilterMeta",
                            "default": "",
                            "description": "Filters object with key-value pairs to define the filters."
                        },
                        {
                            "name": "first",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Index of the first row to be displayed."
                        },
                        {
                            "name": "indentation",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Indentation factor as rem value for children nodes."
                        },
                        {
                            "name": "lazy",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if data is loaded and interacted with in lazy manner."
                        },
                        {
                            "name": "loading",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Displays a loader to indicate data load is in progress."
                        },
                        {
                            "name": "loadingIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "pi pi-spinner",
                            "description": "The icon to show while indicating data load is in progress."
                        },
                        {
                            "name": "metaKeySelection",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Defines how multiple items can be selected, when true metaKey needs to be pressed to select or unselect an item and when set to false selection of each item can be toggled individually.\nOn touch enabled devices, metaKeySelection is turned off automatically."
                        },
                        {
                            "name": "multiSortMeta",
                            "optional": true,
                            "readonly": false,
                            "type": "null | TreeTableSortMeta[]",
                            "default": "",
                            "description": "An array of SortMeta objects to sort the data by default in multiple sort mode."
                        },
                        {
                            "name": "pageLinkSize",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "5",
                            "description": "Number of page links to display."
                        },
                        {
                            "name": "paginator",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified as true, enables the pagination."
                        },
                        {
                            "name": "paginatorPosition",
                            "optional": true,
                            "readonly": false,
                            "type": "\"both\" | \"top\" | \"bottom\"",
                            "default": "bottom",
                            "description": "Position of the paginator, options are 'top','bottom' or 'both'."
                        },
                        {
                            "name": "paginatorTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown",
                            "description": "Template of the paginator. It can be customized using the template property using the predefined keys. Here are the available elements that can be placed inside a paginator in any order.\n\n- FirstPageLink\n- PrevPageLink\n- PageLinks\n- NextPageLink\n- LastPageLink\n- RowsPerPageDropdown\n- JumpToPageDropdown\n- JumpToPageInput\n- CurrentPageReport"
                        },
                        {
                            "name": "removableSort",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, columns can have an un-sorted state."
                        },
                        {
                            "name": "resizableColumns",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, columns can be resized using drag and drop."
                        },
                        {
                            "name": "responsiveLayout",
                            "optional": true,
                            "readonly": false,
                            "type": "\"scroll\" | \"stack\"",
                            "default": "stack",
                            "description": "Defines the responsive mode, currently only option is scroll."
                        },
                        {
                            "name": "rowHover",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, background of the rows change on hover."
                        },
                        {
                            "name": "rows",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Number of rows to display per page."
                        },
                        {
                            "name": "rowsPerPageOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "number[]",
                            "default": "",
                            "description": "Array of integer values to display inside rows per page dropdown."
                        },
                        {
                            "name": "scrollDirection",
                            "optional": true,
                            "readonly": false,
                            "type": "\"both\" | \"horizontal\" | \"vertical\"",
                            "default": "vertical",
                            "description": "Orientation of the scrolling."
                        },
                        {
                            "name": "scrollHeight",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Height of the scroll viewport in fixed pixels or the 'flex' keyword for a dynamic size."
                        },
                        {
                            "name": "scrollable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified, enables horizontal and/or vertical scrolling."
                        },
                        {
                            "name": "selectionKeys",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTableSelectionKeys",
                            "default": "",
                            "description": "A map of keys to control the selection state."
                        },
                        {
                            "name": "selectionMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"multiple\" | \"checkbox\" | \"single\"",
                            "default": "",
                            "description": "Defines the selection mode."
                        },
                        {
                            "name": "showGridlines",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to show grid lines between cells."
                        },
                        {
                            "name": "sortField",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or a getter function of a row data used for sorting by default."
                        },
                        {
                            "name": "sortMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"multiple\" | \"single\"",
                            "default": "single",
                            "description": "Defines whether sorting works on single column or on multiple columns."
                        },
                        {
                            "name": "sortOrder",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Order to sort the data by default."
                        },
                        {
                            "name": "tableProps",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Props to pass to the table element."
                        },
                        {
                            "name": "totalRecords",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Number of total records, defaults to length of value when not defined."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeNode[]",
                            "default": "",
                            "description": "An array of treenodes."
                        }
                    ],
                    "methods": []
                },
                "TreeTableSelectionKeys": {
                    "description": "Custom selection keys metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "TreeTableSlots": {
                    "description": "Defines valid slots in TreeTable component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "empty",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom empty template."
                        },
                        {
                            "name": "footer",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom footer template."
                        },
                        {
                            "name": "header",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header template."
                        },
                        {
                            "name": "paginatorend",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom paginator end template."
                        },
                        {
                            "name": "paginatorstart",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom paginator start template."
                        }
                    ]
                },
                "TreeTableSortEvent": {
                    "description": "Custom sort event.",
                    "relatedProp": "TreeTableEmits.sort",
                    "props": [
                        {
                            "name": "filterMatchModes",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | \"endsWith\" | \"startsWith\" | \"contains\" | \"in\" | \"notContains\" | \"equals\" | \"notEquals\" | \"lt\" | \"lte\" | \"gt\" | \"gte\" | \"between\" | \"dateIs\" | \"dateIsNot\" | \"dateBefore\" | \"dateAfter\"",
                            "default": "",
                            "description": "Match modes per field"
                        },
                        {
                            "name": "filters",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeTableFilterMeta",
                            "default": "",
                            "description": "Collection of active filters"
                        },
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of first record"
                        },
                        {
                            "name": "multiSortMeta",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | null | TreeTableSortMeta[]",
                            "default": "",
                            "description": "MultiSort metadata"
                        },
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        },
                        {
                            "name": "rows",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Number of rows to display in new page"
                        },
                        {
                            "name": "sortField",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | string | Function",
                            "default": "",
                            "description": "Field to sort against"
                        },
                        {
                            "name": "sortOrder",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | null | 0 | 1 | -1",
                            "default": "",
                            "description": "Sort order as integer"
                        }
                    ],
                    "methods": [],
                    "extendedBy": "TreeTablePageEvent,TreeTableFilterEvent"
                },
                "TreeTableSortMeta": {
                    "description": "Custom sort metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "field",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Column field"
                        },
                        {
                            "name": "order",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | null | 0 | 1 | -1",
                            "default": "",
                            "description": "Column sort order"
                        }
                    ],
                    "methods": []
                }
            }
        }
    },
    "tristatecheckbox": {
        "description": "TriStateCheckbox is used to select either 'true', 'false' or 'null' as the value.\n\n[Live Demo](https://www.primevue.org/tristatecheckbox/)",
        "components": {
            "default": {
                "description": "TriStateCheckbox is used to select either 'true', 'false' or 'null' as the value.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TriStateCheckboxEmits": {
                    "description": "Defines valid emits in TriStateCheckbox component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "Nullable<boolean>",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        }
                    ]
                },
                "TriStateCheckboxProps": {
                    "description": "Defines valid properties in TriStateCheckbox component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "aria-label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes a string value that labels the component."
                        },
                        {
                            "name": "aria-labelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "inputId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "inputProps",
                            "optional": true,
                            "readonly": false,
                            "type": "InputHTMLAttributes",
                            "default": "",
                            "description": "Uses to pass all properties of the HTMLInputElement to the focusable input element inside the component."
                        },
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "Nullable<boolean>",
                            "default": "null",
                            "description": "Value of the component."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        }
                    ],
                    "methods": []
                },
                "TriStateCheckboxSlots": {
                    "description": "Defines valid slots in TriStateCheckbox component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        }
    },
    "ts-helpers": {
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "Booleanish": {
                    "values": "boolean | \"true\" | \"false\"",
                    "description": "Custom types"
                },
                "EmitFn": {
                    "values": "Options extends (infer V)[] ? Function : Object extends Options ? Function : UnionToIntersection<{ [key in Event]: Options[key] extends Function ? Function : Function }[Event]>"
                },
                "GlobalComponentConstructor": {
                    "values": "{}"
                },
                "Nullable": {
                    "values": "T | null | undefined"
                },
                "Numberish": {
                    "values": "number | string"
                },
                "PublicProps": {
                    "values": "VNodeProps & AllowedComponentProps & ComponentCustomProps"
                },
                "UnionToIntersection": {
                    "values": "(U extends any ? Function : never) extends Function ? I : never"
                }
            }
        }
    },
    "useconfirm/UseConfirm": {
        "functions": {
            "description": "Defines the custom functions used by the module.",
            "values": {
                "useConfirm": {
                    "name": "useConfirm",
                    "parameters": [],
                    "returnType": "Object"
                }
            }
        }
    },
    "usedialog/UseDialog": {
        "functions": {
            "description": "Defines the custom functions used by the module.",
            "values": {
                "useDialog": {
                    "name": "useDialog",
                    "parameters": [],
                    "returnType": "Object"
                }
            }
        }
    },
    "usetoast/UseToast": {
        "functions": {
            "description": "Defines the custom functions used by the module.",
            "values": {
                "useToast": {
                    "name": "useToast",
                    "parameters": [],
                    "returnType": "ToastServiceMethods"
                }
            }
        }
    },
    "utils/Utils": {
        "functions": {
            "description": "Defines the custom functions used by the module.",
            "values": {
                "EventBus": {
                    "name": "EventBus",
                    "parameters": [],
                    "returnType": "Object"
                },
                "UniqueComponentId": {
                    "name": "UniqueComponentId",
                    "parameters": [
                        {
                            "name": "prefix",
                            "type": "string"
                        }
                    ],
                    "returnType": "string"
                }
            }
        }
    },
    "virtualscroller": {
        "description": "VirtualScroller is a performant approach to handle huge data efficiently.\n\n[Live Demo](https://www.primevue.org/virtualscroller/)",
        "components": {
            "default": {
                "description": "VirtualScroller is a performant approach to handle huge data efficiently.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "getRenderedRange",
                            "parameters": [],
                            "returnType": "VirtualScrollerRangeMethod",
                            "description": "Returns the range of items added to the DOM."
                        },
                        {
                            "name": "scrollInView",
                            "parameters": [
                                {
                                    "name": "index",
                                    "type": "number",
                                    "description": "Index of item according to orientation mode."
                                },
                                {
                                    "name": "to",
                                    "type": "\"to-start\" | \"to-end\"",
                                    "description": "Defines the location of the item in view,"
                                },
                                {
                                    "name": "behavior",
                                    "type": "ScrollBehavior",
                                    "description": "Behavior of scroll"
                                }
                            ],
                            "returnType": "void",
                            "description": "It is used to move the specified index into the view. It is a method that will usually be needed when keyboard support is added to the virtualScroller component."
                        },
                        {
                            "name": "scrollTo",
                            "parameters": [
                                {
                                    "name": "options",
                                    "type": "ScrollToOptions",
                                    "description": "scoll options."
                                }
                            ],
                            "returnType": "void",
                            "description": "Scroll to move to a specific position."
                        },
                        {
                            "name": "scrollToIndex",
                            "parameters": [
                                {
                                    "name": "index",
                                    "type": "number",
                                    "description": "Index of item according to orientation mode."
                                },
                                {
                                    "name": "behavior",
                                    "type": "ScrollBehavior",
                                    "description": "Behavior of scroll."
                                }
                            ],
                            "returnType": "void",
                            "description": "Scroll to move to a specific item."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "VirtualScrollerEmits": {
                    "description": "Defines valid emits in VirtualScroller component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "lazy-load",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "VirtualScrollerLazyEvent",
                                    "description": "Custom lazy event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke in lazy mode to load new data."
                        },
                        {
                            "name": "scroll",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when scroll position changes."
                        },
                        {
                            "name": "scroll-index-change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "VirtualScrollerScrollIndexChangeEvent",
                                    "description": "Custom tab open event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when scroll position and item's range in view changes."
                        },
                        {
                            "name": "update:numToleratedItems",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "number",
                                    "description": "New number tolerated items"
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the numToleratedItems changes."
                        }
                    ]
                },
                "VirtualScrollerItemOptions": {
                    "description": "Custom item options.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "count",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Items count"
                        },
                        {
                            "name": "even",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the item is even."
                        },
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the item is first."
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Item index"
                        },
                        {
                            "name": "last",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the item is last."
                        },
                        {
                            "name": "odd",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the item is odd."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedBy": "VirtualScrollerLoaderOptions"
                },
                "VirtualScrollerLazyEvent": {
                    "description": "Custom lazy event.",
                    "relatedProp": "VirtualScrollerEmits['scroll-index-change']",
                    "props": [
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "First index of the new data range to be loaded."
                        },
                        {
                            "name": "last",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Last index of the new data range to be loaded."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "VirtualScrollerScrollIndexChangeEvent"
                },
                "VirtualScrollerLoaderOptions": {
                    "description": "Custom virtualscroller loader options",
                    "relatedProp": "undefined.VirtualScrollerItemOptions",
                    "props": [
                        {
                            "name": "count",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Items count"
                        },
                        {
                            "name": "even",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the item is even."
                        },
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the item is first."
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Item index"
                        },
                        {
                            "name": "last",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the item is last."
                        },
                        {
                            "name": "odd",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the item is odd."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "ColumnLoadingOptions",
                    "extendedTypes": "VirtualScrollerItemOptions"
                },
                "VirtualScrollerProps": {
                    "description": "Defines valid properties in VirtualScroller component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "appendOnly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Used to append each loaded item to top without removing any items from the DOM. Using very large data may cause the browser to crash."
                        },
                        {
                            "name": "autoSize",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to dynamically change the height or width of scrollable container."
                        },
                        {
                            "name": "class",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "delay",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Delay in scroll before new data is loaded."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "If disabled, the VirtualScroller feature is eliminated and the content is displayed directly."
                        },
                        {
                            "name": "id",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Unique identifier of the element."
                        },
                        {
                            "name": "inline",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, positions the content as inline."
                        },
                        {
                            "name": "itemSize",
                            "optional": true,
                            "readonly": false,
                            "type": "number | number[]",
                            "default": "",
                            "description": "The height/width of item according to orientation."
                        },
                        {
                            "name": "items",
                            "optional": true,
                            "readonly": false,
                            "type": "null | any[] | any[][]",
                            "default": "",
                            "description": "An array of objects to display."
                        },
                        {
                            "name": "lazy",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if data is loaded and interacted with in lazy manner."
                        },
                        {
                            "name": "loaderDisabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Used to implement a custom loader instead of using the loader feature in the VirtualScroller."
                        },
                        {
                            "name": "loading",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to load items."
                        },
                        {
                            "name": "numToleratedItems",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "half the number of items shown in the view.",
                            "description": "Determines how many additional elements to add to the DOM outside of the view.\nAccording to the scrolls made up and down, extra items are added in a certain algorithm in the form of multiples of this number."
                        },
                        {
                            "name": "orientation",
                            "optional": true,
                            "readonly": false,
                            "type": "\"both\" | \"horizontal\" | \"vertical\"",
                            "default": "vertical",
                            "description": "The orientation of scrollbar."
                        },
                        {
                            "name": "resizeDelay",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "10",
                            "description": "Delay after window's resize finishes."
                        },
                        {
                            "name": "scrollHeight",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Height of the scroll viewport."
                        },
                        {
                            "name": "scrollWidth",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Width of the scroll viewport."
                        },
                        {
                            "name": "showLoader",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether to show loader."
                        },
                        {
                            "name": "showSpacer",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Used to implement a custom spacer instead of using the spacer feature in the VirtualScroller."
                        },
                        {
                            "name": "step",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Used to specify how many items to load in each load method in lazy mode."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "0",
                            "description": "Index of the element in tabbing order."
                        }
                    ],
                    "methods": [
                        {
                            "name": "onLazyLoad",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "VirtualScrollerLazyEvent",
                                    "description": "Custom lazy event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke in lazy mode to load new data."
                        }
                    ]
                },
                "VirtualScrollerRangeMethod": {
                    "description": "Virtual scroller rendered range.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Whether the item is first."
                        },
                        {
                            "name": "last",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Whether the item is last."
                        },
                        {
                            "name": "viewport",
                            "optional": false,
                            "readonly": false,
                            "type": "VirtualScrollerViewport",
                            "default": "",
                            "description": "Viewport info."
                        }
                    ],
                    "methods": []
                },
                "VirtualScrollerScrollIndexChangeEvent": {
                    "description": "Custom scroll index change event.",
                    "relatedProp": "VirtualScrollerEmits['scroll-index-change']",
                    "props": [
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "First index of the new data range to be loaded."
                        },
                        {
                            "name": "last",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Last index of the new data range to be loaded."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "VirtualScrollerLazyEvent,VirtualScrollerViewport"
                },
                "VirtualScrollerSlots": {
                    "description": "Defines valid slots in VirtualScroller component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "content",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>both</b>: boolean, // Whether the orientation is both.\n  \t <b>columns</b>: undefined, // The number of the rendered columns.\n  \t <b>contentStyle</b>: any, // The style of content element.\n  \t <b>horizontal</b>: boolean, // Whether the orientation is horizontal.\n  \t <b>itemSize</b>: undefined, // The height/width of item according to orientation.\n  \t <b>items</b>: any, // An array of objects to display for virtualscroller\n  \t <b>loading</b>: boolean, // Whether the data is loaded.\n  \t <b>rows</b>: undefined, // The number of the rendered rows.\n  \t <b>spacerStyle</b>: any, // The style of spacer element.\n  \t <b>styleClass</b>: string, // Style class of the content\n  \t <b>vertical</b>: boolean, // Whether the orientation is vertical.\n  \t <b>contentRef(el: any)</b>: void, // Referance of the content\n  \t <b>getItemOptions(index: number)</b>: VirtualScrollerItemOptions, // Options of the items\n  \t <b>getLoaderOptions(index: number, ext: any)</b>: VirtualScrollerLoaderOptions, // Loader options of the items while the data is loading.\n  }",
                                    "description": "content slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content template."
                        },
                        {
                            "name": "item",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>item</b>: any, // Item data.\n  \t <b>options</b>: VirtualScrollerItemOptions, // Item options.\n  }",
                                    "description": "item slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom item template."
                        },
                        {
                            "name": "loader",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <b>options</b>: VirtualScrollerLoaderOptions, // Loader options.\n  }",
                                    "description": "header slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom loader template."
                        }
                    ]
                },
                "VirtualScrollerViewport": {
                    "description": "Custom virtualscroller viewport metadata.",
                    "relatedProp": "VirtualScrollerEmits['scroll-index-change']",
                    "props": [
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "First index of the new data range to be loaded."
                        },
                        {
                            "name": "last",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Last index of the new data range to be loaded."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "VirtualScrollerScrollIndexChangeEvent"
                }
            }
        }
    }
}